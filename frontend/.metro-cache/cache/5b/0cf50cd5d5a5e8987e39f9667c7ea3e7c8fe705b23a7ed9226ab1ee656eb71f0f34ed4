{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/callSuper","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"378KbBHdmndC3iMXZ2Ix8oB3LeE=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/wrapNativeSuper","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"imgnTtXT+OlBfDxpawXO7znTT9E=","exportNames":["*"],"imports":1}},{"name":"base64-js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":40,"index":40}}],"key":"9arPc0KuVPvzcEfvnWXidnN1Ujk=","exportNames":["*"],"imports":1}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":41},"end":{"line":2,"column":56,"index":97}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./Crypto.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":98},"end":{"line":3,"column":71,"index":169}}],"key":"t4jPthUJCVssyew/Bvzn4bGBsgM=","exportNames":["*"],"imports":1}},{"name":"./ExpoCrypto","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":170},"end":{"line":4,"column":38,"index":208}}],"key":"MRSg79dz8BunvGNY5DqVOOUuE/k=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.getRandomBytes = getRandomBytes;\n  exports.getRandomBytesAsync = getRandomBytesAsync;\n  exports.digestStringAsync = digestStringAsync;\n  exports.getRandomValues = getRandomValues;\n  exports.randomUUID = randomUUID;\n  exports.digest = digest;\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCallSuper = require(_dependencyMap[3], \"@babel/runtime/helpers/callSuper\");\n  var _callSuper = _interopDefault(_babelRuntimeHelpersCallSuper);\n  var _babelRuntimeHelpersInherits = require(_dependencyMap[4], \"@babel/runtime/helpers/inherits\");\n  var _inherits = _interopDefault(_babelRuntimeHelpersInherits);\n  var _babelRuntimeHelpersWrapNativeSuper = require(_dependencyMap[5], \"@babel/runtime/helpers/wrapNativeSuper\");\n  var _wrapNativeSuper = _interopDefault(_babelRuntimeHelpersWrapNativeSuper);\n  var _base64Js = require(_dependencyMap[6], \"base64-js\");\n  var _expoModulesCore = require(_dependencyMap[7], \"expo-modules-core\");\n  var _CryptoTypes = require(_dependencyMap[8], \"./Crypto.types\");\n  Object.keys(_CryptoTypes).forEach(function (k) {\n    if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) {\n      Object.defineProperty(exports, k, {\n        enumerable: true,\n        get: function () {\n          return _CryptoTypes[k];\n        }\n      });\n    }\n  });\n  var _ExpoCrypto = require(_dependencyMap[9], \"./ExpoCrypto\");\n  var ExpoCrypto = _interopDefault(_ExpoCrypto);\n  var CryptoError = /*#__PURE__*/function (_TypeError) {\n    function CryptoError(message) {\n      var _this;\n      (0, _classCallCheck.default)(this, CryptoError);\n      _this = (0, _callSuper.default)(this, CryptoError, [`expo-crypto: ${message}`]);\n      _this.code = 'ERR_CRYPTO';\n      return _this;\n    }\n    (0, _inherits.default)(CryptoError, _TypeError);\n    return (0, _createClass.default)(CryptoError);\n  }(/*#__PURE__*/(0, _wrapNativeSuper.default)(TypeError)); // @needsAudit\n  /**\n   * Generates completely random bytes using native implementations. The `byteCount` property\n   * is a `number` indicating the number of bytes to generate in the form of a `Uint8Array`.\n   * Falls back to `Math.random` during development to prevent issues with React Native Debugger.\n   * @param byteCount - A number within the range from `0` to `1024`. Anything else will throw a `TypeError`.\n   * @return An array of random bytes with the same length as the `byteCount`.\n   */\n  function getRandomBytes(byteCount) {\n    assertByteCount(byteCount, 'getRandomBytes');\n    var validByteCount = Math.floor(byteCount);\n    if (__DEV__) {\n      if (!global.nativeCallSyncHook || global.__REMOTEDEV__) {\n        // remote javascript debugging is enabled\n        var array = new Uint8Array(validByteCount);\n        for (var i = 0; i < validByteCount; i++) {\n          array[i] = Math.floor(Math.random() * 256);\n        }\n        return array;\n      }\n    }\n    if (ExpoCrypto.default.getRandomValues) {\n      var byteArray = new Uint8Array(validByteCount);\n      ExpoCrypto.default.getRandomValues(byteArray);\n      return byteArray;\n    } else if (ExpoCrypto.default.getRandomBase64String) {\n      var base64 = ExpoCrypto.default.getRandomBase64String(validByteCount);\n      return (0, _base64Js.toByteArray)(base64);\n    } else {\n      throw new _expoModulesCore.UnavailabilityError('expo-crypto', 'getRandomBytes');\n    }\n  }\n  // @needsAudit\n  /**\n   * Generates completely random bytes using native implementations. The `byteCount` property\n   * is a `number` indicating the number of bytes to generate in the form of a `Uint8Array`.\n   * @param byteCount - A number within the range from `0` to `1024`. Anything else will throw a `TypeError`.\n   * @return A promise that fulfills with an array of random bytes with the same length as the `byteCount`.\n   */\n  function getRandomBytesAsync(_x) {\n    return _getRandomBytesAsync.apply(this, arguments);\n  }\n  function _getRandomBytesAsync() {\n    _getRandomBytesAsync = (0, _asyncToGenerator.default)(function* (byteCount) {\n      assertByteCount(byteCount, 'getRandomBytesAsync');\n      var validByteCount = Math.floor(byteCount);\n      if (ExpoCrypto.default.getRandomValues) {\n        var byteArray = new Uint8Array(validByteCount);\n        ExpoCrypto.default.getRandomValues(byteArray);\n        return byteArray;\n      } else if (ExpoCrypto.default.getRandomBase64StringAsync) {\n        var base64 = yield ExpoCrypto.default.getRandomBase64StringAsync(validByteCount);\n        return (0, _base64Js.toByteArray)(base64);\n      } else {\n        throw new _expoModulesCore.UnavailabilityError('expo-crypto', 'getRandomBytesAsync');\n      }\n    });\n    return _getRandomBytesAsync.apply(this, arguments);\n  }\n  function assertByteCount(value, methodName) {\n    if (typeof value !== 'number' || isNaN(value) || Math.floor(value) < 0 || Math.floor(value) > 1024) {\n      throw new TypeError(`expo-crypto: ${methodName}(${value}) expected a valid number from range 0...1024`);\n    }\n  }\n  function assertAlgorithm(algorithm) {\n    if (!Object.values(_CryptoTypes.CryptoDigestAlgorithm).includes(algorithm)) {\n      throw new CryptoError(`Invalid algorithm provided. Expected one of: CryptoDigestAlgorithm.${Object.keys(_CryptoTypes.CryptoDigestAlgorithm).join(', AlgCryptoDigestAlgorithmorithm.')}`);\n    }\n  }\n  function assertData(data) {\n    if (typeof data !== 'string') {\n      throw new CryptoError(`Invalid data provided. Expected a string.`);\n    }\n  }\n  function assertEncoding(encoding) {\n    if (!Object.values(_CryptoTypes.CryptoEncoding).includes(encoding)) {\n      throw new CryptoError(`Invalid encoding provided. Expected one of: CryptoEncoding.${Object.keys(_CryptoTypes.CryptoEncoding).join(', CryptoEncoding.')}`);\n    }\n  }\n  // @needsAudit\n  /**\n   * The `digestStringAsync()` method of `Crypto` generates a digest of the supplied `data` string with the provided digest `algorithm`.\n   * A digest is a short fixed-length value derived from some variable-length input. **Cryptographic digests** should exhibit _collision-resistance_,\n   * meaning that it's very difficult to generate multiple inputs that have equal digest values.\n   * You can specify the returned string format as one of `CryptoEncoding`. By default, the resolved value will be formatted as a `HEX` string.\n   * On web, this method can only be called from a secure origin (HTTPS) otherwise, an error will be thrown.\n   *\n   * @param algorithm The cryptographic hash function to use to transform a block of data into a fixed-size output.\n   * @param data The value that will be used to generate a digest.\n   * @param options Format of the digest string. Defaults to: `CryptoDigestOptions.HEX`.\n   * @return Return a Promise which fulfills with a value representing the hashed input.\n   *\n   * @example\n   * ```ts\n   * const digest = await Crypto.digestStringAsync(\n   *   Crypto.CryptoDigestAlgorithm.SHA512,\n   *   'ðŸ¥“ Easy to Digest! ðŸ’™'\n   * );\n   * ```\n   */\n  function digestStringAsync(_x2, _x3) {\n    return _digestStringAsync.apply(this, arguments);\n  }\n  /**\n   * The `getRandomValues()` method of `Crypto` fills a provided `TypedArray` with cryptographically secure random values.\n   *\n   * @param typedArray An integer based [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) to fill with cryptographically secure random values. It modifies the input array in place.\n   * @return The input array filled with cryptographically secure random values.\n   *\n   * @example\n   * ```ts\n   * const byteArray = new Uint8Array(16);\n   * Crypto.getRandomValues(byteArray);\n   * console.log('Your lucky bytes: ' + byteArray);\n   * ```\n   */\n  function _digestStringAsync() {\n    _digestStringAsync = (0, _asyncToGenerator.default)(function* (algorithm, data) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        encoding: _CryptoTypes.CryptoEncoding.HEX\n      };\n      if (!ExpoCrypto.default.digestStringAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-crypto', 'digestStringAsync');\n      }\n      assertAlgorithm(algorithm);\n      assertData(data);\n      assertEncoding(options.encoding);\n      return yield ExpoCrypto.default.digestStringAsync(algorithm, data, options);\n    });\n    return _digestStringAsync.apply(this, arguments);\n  }\n  function getRandomValues(typedArray) {\n    ExpoCrypto.default.getRandomValues(typedArray);\n    return typedArray;\n  }\n  /**\n   * The `randomUUID()` method returns a unique identifier based on the V4 UUID spec (RFC4122).\n   * It uses cryptographically secure random values to generate the UUID.\n   *\n   * @return A string containing a newly generated UUIDv4 identifier\n   * @example\n   * ```ts\n   * const UUID = Crypto.randomUUID();\n   * console.log('Your UUID: ' + UUID);\n   * ```\n   */\n  function randomUUID() {\n    return ExpoCrypto.default.randomUUID();\n  }\n  var digestLengths = {\n    [_CryptoTypes.CryptoDigestAlgorithm.SHA1]: 20,\n    [_CryptoTypes.CryptoDigestAlgorithm.SHA256]: 32,\n    [_CryptoTypes.CryptoDigestAlgorithm.SHA384]: 48,\n    [_CryptoTypes.CryptoDigestAlgorithm.SHA512]: 64,\n    [_CryptoTypes.CryptoDigestAlgorithm.MD2]: 16,\n    [_CryptoTypes.CryptoDigestAlgorithm.MD4]: 16,\n    [_CryptoTypes.CryptoDigestAlgorithm.MD5]: 16\n  };\n  /**\n   * The `digest()` method of `Crypto` generates a digest of the supplied `TypedArray` of bytes `data` with the provided digest `algorithm`.\n   * A digest is a short fixed-length value derived from some variable-length input. **Cryptographic digests** should exhibit _collision-resistance_,\n   * meaning that it's very difficult to generate multiple inputs that have equal digest values.\n   * On web, this method can only be called from a secure origin (HTTPS) otherwise, an error will be thrown.\n   *\n   * @param algorithm The cryptographic hash function to use to transform a block of data into a fixed-size output.\n   * @param data The value that will be used to generate a digest.\n   * @return A Promise which fulfills with an ArrayBuffer representing the hashed input.\n   * @example\n   * ```ts\n   * const array = new Uint8Array([1, 2, 3, 4, 5]);\n   * const digest = await Crypto.digest(Crypto.CryptoDigestAlgorithm.SHA512, array);\n   * console.log('Your digest: ' + digest);\n   * ```\n   */\n  function digest(algorithm, data) {\n    return new Promise((resolve, reject) => {\n      try {\n        if (typeof ExpoCrypto.default.digestAsync === 'function') {\n          resolve(ExpoCrypto.default.digestAsync(algorithm, data));\n        } else {\n          var output = new Uint8Array(digestLengths[algorithm]);\n          ExpoCrypto.default.digest(algorithm, output, data);\n          resolve(output.buffer);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n});","lineCount":244,"map":[[12,2,20,0,"exports"],[12,9,20,0],[12,10,20,0,"getRandomBytes"],[12,24,20,0],[12,27,20,0,"getRandomBytes"],[12,41,20,0],[13,2,53,0,"exports"],[13,9,53,0],[13,10,53,0,"getRandomBytesAsync"],[13,29,53,0],[13,32,53,0,"getRandomBytesAsync"],[13,51,53,0],[14,2,113,0,"exports"],[14,9,113,0],[14,10,113,0,"digestStringAsync"],[14,27,113,0],[14,30,113,0,"digestStringAsync"],[14,47,113,0],[15,2,135,0,"exports"],[15,9,135,0],[15,10,135,0,"getRandomValues"],[15,25,135,0],[15,28,135,0,"getRandomValues"],[15,43,135,0],[16,2,150,0,"exports"],[16,9,150,0],[16,10,150,0,"randomUUID"],[16,20,150,0],[16,23,150,0,"randomUUID"],[16,33,150,0],[17,2,178,0,"exports"],[17,9,178,0],[17,10,178,0,"digest"],[17,16,178,0],[17,19,178,0,"digest"],[17,25,178,0],[18,2,194,1],[18,6,194,1,"_babelRuntimeHelpersAsyncToGenerator"],[18,42,194,1],[18,45,194,1,"require"],[18,52,194,1],[18,53,194,1,"_dependencyMap"],[18,67,194,1],[19,2,194,1],[19,6,194,1,"_asyncToGenerator"],[19,23,194,1],[19,26,194,1,"_interopDefault"],[19,41,194,1],[19,42,194,1,"_babelRuntimeHelpersAsyncToGenerator"],[19,78,194,1],[20,2,194,1],[20,6,194,1,"_babelRuntimeHelpersCreateClass"],[20,37,194,1],[20,40,194,1,"require"],[20,47,194,1],[20,48,194,1,"_dependencyMap"],[20,62,194,1],[21,2,194,1],[21,6,194,1,"_createClass"],[21,18,194,1],[21,21,194,1,"_interopDefault"],[21,36,194,1],[21,37,194,1,"_babelRuntimeHelpersCreateClass"],[21,68,194,1],[22,2,194,1],[22,6,194,1,"_babelRuntimeHelpersClassCallCheck"],[22,40,194,1],[22,43,194,1,"require"],[22,50,194,1],[22,51,194,1,"_dependencyMap"],[22,65,194,1],[23,2,194,1],[23,6,194,1,"_classCallCheck"],[23,21,194,1],[23,24,194,1,"_interopDefault"],[23,39,194,1],[23,40,194,1,"_babelRuntimeHelpersClassCallCheck"],[23,74,194,1],[24,2,194,1],[24,6,194,1,"_babelRuntimeHelpersCallSuper"],[24,35,194,1],[24,38,194,1,"require"],[24,45,194,1],[24,46,194,1,"_dependencyMap"],[24,60,194,1],[25,2,194,1],[25,6,194,1,"_callSuper"],[25,16,194,1],[25,19,194,1,"_interopDefault"],[25,34,194,1],[25,35,194,1,"_babelRuntimeHelpersCallSuper"],[25,64,194,1],[26,2,194,1],[26,6,194,1,"_babelRuntimeHelpersInherits"],[26,34,194,1],[26,37,194,1,"require"],[26,44,194,1],[26,45,194,1,"_dependencyMap"],[26,59,194,1],[27,2,194,1],[27,6,194,1,"_inherits"],[27,15,194,1],[27,18,194,1,"_interopDefault"],[27,33,194,1],[27,34,194,1,"_babelRuntimeHelpersInherits"],[27,62,194,1],[28,2,194,1],[28,6,194,1,"_babelRuntimeHelpersWrapNativeSuper"],[28,41,194,1],[28,44,194,1,"require"],[28,51,194,1],[28,52,194,1,"_dependencyMap"],[28,66,194,1],[29,2,194,1],[29,6,194,1,"_wrapNativeSuper"],[29,22,194,1],[29,25,194,1,"_interopDefault"],[29,40,194,1],[29,41,194,1,"_babelRuntimeHelpersWrapNativeSuper"],[29,76,194,1],[30,2,1,0],[30,6,1,0,"_base64Js"],[30,15,1,0],[30,18,1,0,"require"],[30,25,1,0],[30,26,1,0,"_dependencyMap"],[30,40,1,0],[31,2,2,0],[31,6,2,0,"_expoModulesCore"],[31,22,2,0],[31,25,2,0,"require"],[31,32,2,0],[31,33,2,0,"_dependencyMap"],[31,47,2,0],[32,2,3,0],[32,6,3,0,"_CryptoTypes"],[32,18,3,0],[32,21,3,0,"require"],[32,28,3,0],[32,29,3,0,"_dependencyMap"],[32,43,3,0],[33,2,5,0,"Object"],[33,8,5,0],[33,9,5,0,"keys"],[33,13,5,0],[33,14,5,0,"_CryptoTypes"],[33,26,5,0],[33,28,5,0,"forEach"],[33,35,5,0],[33,46,5,0,"k"],[33,47,5,0],[34,4,5,0],[34,8,5,0,"k"],[34,9,5,0],[34,28,5,0,"Object"],[34,34,5,0],[34,35,5,0,"prototype"],[34,44,5,0],[34,45,5,0,"hasOwnProperty"],[34,59,5,0],[34,60,5,0,"call"],[34,64,5,0],[34,65,5,0,"exports"],[34,72,5,0],[34,74,5,0,"k"],[34,75,5,0],[35,6,5,0,"Object"],[35,12,5,0],[35,13,5,0,"defineProperty"],[35,27,5,0],[35,28,5,0,"exports"],[35,35,5,0],[35,37,5,0,"k"],[35,38,5,0],[36,8,5,0,"enumerable"],[36,18,5,0],[37,8,5,0,"get"],[37,11,5,0],[37,22,5,0,"get"],[37,23,5,0],[38,10,5,0],[38,17,5,0,"_CryptoTypes"],[38,29,5,0],[38,30,5,0,"k"],[38,31,5,0],[39,8,5,0],[40,6,5,0],[41,4,5,0],[42,2,5,0],[43,2,4,0],[43,6,4,0,"_ExpoCrypto"],[43,17,4,0],[43,20,4,0,"require"],[43,27,4,0],[43,28,4,0,"_dependencyMap"],[43,42,4,0],[44,2,4,0],[44,6,4,0,"ExpoCrypto"],[44,16,4,0],[44,19,4,0,"_interopDefault"],[44,34,4,0],[44,35,4,0,"_ExpoCrypto"],[44,46,4,0],[45,2,4,38],[45,6,6,6,"CryptoError"],[45,17,6,17],[45,43,6,17,"_TypeError"],[45,53,6,17],[46,4,8,4],[46,13,8,4,"CryptoError"],[46,25,8,16,"message"],[46,32,8,23],[46,34,8,25],[47,6,8,25],[47,10,8,25,"_this"],[47,15,8,25],[48,6,8,25],[48,10,8,25,"_classCallCheck"],[48,25,8,25],[48,26,8,25,"default"],[48,33,8,25],[48,41,8,25,"CryptoError"],[48,52,8,25],[49,6,9,8,"_this"],[49,11,9,8],[49,18,9,8,"_callSuper"],[49,28,9,8],[49,29,9,8,"default"],[49,36,9,8],[49,44,9,8,"CryptoError"],[49,55,9,8],[49,58,9,14],[49,74,9,30,"message"],[49,81,9,37],[49,83,9,39],[50,6,9,41,"_this"],[50,11,9,41],[50,12,7,4,"code"],[50,16,7,8],[50,19,7,11],[50,31,7,23],[51,6,7,23],[51,13,7,23,"_this"],[51,18,7,23],[52,4,10,4],[53,4,10,5],[53,8,10,5,"_inherits"],[53,17,10,5],[53,18,10,5,"default"],[53,25,10,5],[53,27,10,5,"CryptoError"],[53,38,10,5],[53,40,10,5,"_TypeError"],[53,50,10,5],[54,4,10,5],[54,15,10,5,"_createClass"],[54,27,10,5],[54,28,10,5,"default"],[54,35,10,5],[54,37,10,5,"CryptoError"],[54,48,10,5],[55,2,10,5],[55,21,10,5,"_wrapNativeSuper"],[55,37,10,5],[55,38,10,5,"default"],[55,45,10,5],[55,47,6,26,"TypeError"],[55,56,6,35],[55,60,12,0],[56,2,13,0],[57,0,14,0],[58,0,15,0],[59,0,16,0],[60,0,17,0],[61,0,18,0],[62,0,19,0],[63,2,20,7],[63,11,20,16,"getRandomBytes"],[63,25,20,30,"getRandomBytes"],[63,26,20,31,"byteCount"],[63,35,20,40],[63,37,20,42],[64,4,21,4,"assertByteCount"],[64,19,21,19],[64,20,21,20,"byteCount"],[64,29,21,29],[64,31,21,31],[64,47,21,47],[64,48,21,48],[65,4,22,4],[65,8,22,10,"validByteCount"],[65,22,22,24],[65,25,22,27,"Math"],[65,29,22,31],[65,30,22,32,"floor"],[65,35,22,37],[65,36,22,38,"byteCount"],[65,45,22,47],[65,46,22,48],[66,4,23,4],[66,8,23,8,"__DEV__"],[66,15,23,15],[66,17,23,17],[67,6,24,8],[67,10,24,12],[67,11,24,13,"global"],[67,17,24,19],[67,18,24,20,"nativeCallSyncHook"],[67,36,24,38],[67,40,24,42,"global"],[67,46,24,48],[67,47,24,49,"__REMOTEDEV__"],[67,60,24,62],[67,62,24,64],[68,8,25,12],[69,8,26,12],[69,12,26,18,"array"],[69,17,26,23],[69,20,26,26],[69,24,26,30,"Uint8Array"],[69,34,26,40],[69,35,26,41,"validByteCount"],[69,49,26,55],[69,50,26,56],[70,8,27,12],[70,13,27,17],[70,17,27,21,"i"],[70,18,27,22],[70,21,27,25],[70,22,27,26],[70,24,27,28,"i"],[70,25,27,29],[70,28,27,32,"validByteCount"],[70,42,27,46],[70,44,27,48,"i"],[70,45,27,49],[70,47,27,51],[70,49,27,53],[71,10,28,16,"array"],[71,15,28,21],[71,16,28,22,"i"],[71,17,28,23],[71,18,28,24],[71,21,28,27,"Math"],[71,25,28,31],[71,26,28,32,"floor"],[71,31,28,37],[71,32,28,38,"Math"],[71,36,28,42],[71,37,28,43,"random"],[71,43,28,49],[71,44,28,50],[71,45,28,51],[71,48,28,54],[71,51,28,57],[71,52,28,58],[72,8,29,12],[73,8,30,12],[73,15,30,19,"array"],[73,20,30,24],[74,6,31,8],[75,4,32,4],[76,4,33,4],[76,8,33,8,"ExpoCrypto"],[76,18,33,18],[76,19,33,18,"default"],[76,26,33,18],[76,27,33,19,"getRandomValues"],[76,42,33,34],[76,44,33,36],[77,6,34,8],[77,10,34,14,"byteArray"],[77,19,34,23],[77,22,34,26],[77,26,34,30,"Uint8Array"],[77,36,34,40],[77,37,34,41,"validByteCount"],[77,51,34,55],[77,52,34,56],[78,6,35,8,"ExpoCrypto"],[78,16,35,18],[78,17,35,18,"default"],[78,24,35,18],[78,25,35,19,"getRandomValues"],[78,40,35,34],[78,41,35,35,"byteArray"],[78,50,35,44],[78,51,35,45],[79,6,36,8],[79,13,36,15,"byteArray"],[79,22,36,24],[80,4,37,4],[80,5,37,5],[80,11,38,9],[80,15,38,13,"ExpoCrypto"],[80,25,38,23],[80,26,38,23,"default"],[80,33,38,23],[80,34,38,24,"getRandomBase64String"],[80,55,38,45],[80,57,38,47],[81,6,39,8],[81,10,39,14,"base64"],[81,16,39,20],[81,19,39,23,"ExpoCrypto"],[81,29,39,33],[81,30,39,33,"default"],[81,37,39,33],[81,38,39,34,"getRandomBase64String"],[81,59,39,55],[81,60,39,56,"validByteCount"],[81,74,39,70],[81,75,39,71],[82,6,40,8],[82,13,40,15],[82,17,40,15,"toByteArray"],[82,26,40,26],[82,27,40,26,"toByteArray"],[82,38,40,26],[82,40,40,27,"base64"],[82,46,40,33],[82,47,40,34],[83,4,41,4],[83,5,41,5],[83,11,42,9],[84,6,43,8],[84,12,43,14],[84,16,43,18,"UnavailabilityError"],[84,32,43,37],[84,33,43,37,"UnavailabilityError"],[84,52,43,37],[84,53,43,38],[84,66,43,51],[84,68,43,53],[84,84,43,69],[84,85,43,70],[85,4,44,4],[86,2,45,0],[87,2,46,0],[88,2,47,0],[89,0,48,0],[90,0,49,0],[91,0,50,0],[92,0,51,0],[93,0,52,0],[94,2,47,0],[94,11,53,22,"getRandomBytesAsync"],[94,30,53,41,"getRandomBytesAsync"],[94,31,53,41,"_x"],[94,33,53,41],[95,4,53,41],[95,11,53,41,"_getRandomBytesAsync"],[95,31,53,41],[95,32,53,41,"apply"],[95,37,53,41],[95,44,53,41,"arguments"],[95,53,53,41],[96,2,53,41],[97,2,53,41],[97,11,53,41,"_getRandomBytesAsync"],[97,32,53,41],[98,4,53,41,"_getRandomBytesAsync"],[98,24,53,41],[98,31,53,41,"_asyncToGenerator"],[98,48,53,41],[98,49,53,41,"default"],[98,56,53,41],[98,58,53,7],[98,69,53,42,"byteCount"],[98,78,53,51],[98,80,53,53],[99,6,54,4,"assertByteCount"],[99,21,54,19],[99,22,54,20,"byteCount"],[99,31,54,29],[99,33,54,31],[99,54,54,52],[99,55,54,53],[100,6,55,4],[100,10,55,10,"validByteCount"],[100,24,55,24],[100,27,55,27,"Math"],[100,31,55,31],[100,32,55,32,"floor"],[100,37,55,37],[100,38,55,38,"byteCount"],[100,47,55,47],[100,48,55,48],[101,6,56,4],[101,10,56,8,"ExpoCrypto"],[101,20,56,18],[101,21,56,18,"default"],[101,28,56,18],[101,29,56,19,"getRandomValues"],[101,44,56,34],[101,46,56,36],[102,8,57,8],[102,12,57,14,"byteArray"],[102,21,57,23],[102,24,57,26],[102,28,57,30,"Uint8Array"],[102,38,57,40],[102,39,57,41,"validByteCount"],[102,53,57,55],[102,54,57,56],[103,8,58,8,"ExpoCrypto"],[103,18,58,18],[103,19,58,18,"default"],[103,26,58,18],[103,27,58,19,"getRandomValues"],[103,42,58,34],[103,43,58,35,"byteArray"],[103,52,58,44],[103,53,58,45],[104,8,59,8],[104,15,59,15,"byteArray"],[104,24,59,24],[105,6,60,4],[105,7,60,5],[105,13,61,9],[105,17,61,13,"ExpoCrypto"],[105,27,61,23],[105,28,61,23,"default"],[105,35,61,23],[105,36,61,24,"getRandomBase64StringAsync"],[105,62,61,50],[105,64,61,52],[106,8,62,8],[106,12,62,14,"base64"],[106,18,62,20],[106,27,62,29,"ExpoCrypto"],[106,37,62,39],[106,38,62,39,"default"],[106,45,62,39],[106,46,62,40,"getRandomBase64StringAsync"],[106,72,62,66],[106,73,62,67,"validByteCount"],[106,87,62,81],[106,88,62,82],[107,8,63,8],[107,15,63,15],[107,19,63,15,"toByteArray"],[107,28,63,26],[107,29,63,26,"toByteArray"],[107,40,63,26],[107,42,63,27,"base64"],[107,48,63,33],[107,49,63,34],[108,6,64,4],[108,7,64,5],[108,13,65,9],[109,8,66,8],[109,14,66,14],[109,18,66,18,"UnavailabilityError"],[109,34,66,37],[109,35,66,37,"UnavailabilityError"],[109,54,66,37],[109,55,66,38],[109,68,66,51],[109,70,66,53],[109,91,66,74],[109,92,66,75],[110,6,67,4],[111,4,68,0],[111,5,68,1],[112,4,68,1],[112,11,68,1,"_getRandomBytesAsync"],[112,31,68,1],[112,32,68,1,"apply"],[112,37,68,1],[112,44,68,1,"arguments"],[112,53,68,1],[113,2,68,1],[114,2,69,0],[114,11,69,9,"assertByteCount"],[114,26,69,24,"assertByteCount"],[114,27,69,25,"value"],[114,32,69,30],[114,34,69,32,"methodName"],[114,44,69,42],[114,46,69,44],[115,4,70,4],[115,8,70,8],[115,15,70,15,"value"],[115,20,70,20],[115,25,70,25],[115,33,70,33],[115,37,71,8,"isNaN"],[115,42,71,13],[115,43,71,14,"value"],[115,48,71,19],[115,49,71,20],[115,53,72,8,"Math"],[115,57,72,12],[115,58,72,13,"floor"],[115,63,72,18],[115,64,72,19,"value"],[115,69,72,24],[115,70,72,25],[115,73,72,28],[115,74,72,29],[115,78,73,8,"Math"],[115,82,73,12],[115,83,73,13,"floor"],[115,88,73,18],[115,89,73,19,"value"],[115,94,73,24],[115,95,73,25],[115,98,73,28],[115,102,73,32],[115,104,73,34],[116,6,74,8],[116,12,74,14],[116,16,74,18,"TypeError"],[116,25,74,27],[116,26,74,28],[116,42,74,44,"methodName"],[116,52,74,54],[116,56,74,58,"value"],[116,61,74,63],[116,108,74,110],[116,109,74,111],[117,4,75,4],[118,2,76,0],[119,2,77,0],[119,11,77,9,"assertAlgorithm"],[119,26,77,24,"assertAlgorithm"],[119,27,77,25,"algorithm"],[119,36,77,34],[119,38,77,36],[120,4,78,4],[120,8,78,8],[120,9,78,9,"Object"],[120,15,78,15],[120,16,78,16,"values"],[120,22,78,22],[120,23,78,23,"CryptoDigestAlgorithm"],[120,35,78,44],[120,36,78,44,"CryptoDigestAlgorithm"],[120,57,78,44],[120,58,78,45],[120,59,78,46,"includes"],[120,67,78,54],[120,68,78,55,"algorithm"],[120,77,78,64],[120,78,78,65],[120,80,78,67],[121,6,79,8],[121,12,79,14],[121,16,79,18,"CryptoError"],[121,27,79,29],[121,28,79,30],[121,98,79,100,"Object"],[121,104,79,106],[121,105,79,107,"keys"],[121,109,79,111],[121,110,79,112,"CryptoDigestAlgorithm"],[121,122,79,133],[121,123,79,133,"CryptoDigestAlgorithm"],[121,144,79,133],[121,145,79,134],[121,146,79,135,"join"],[121,150,79,139],[121,151,79,140],[121,186,79,175],[121,187,79,176],[121,189,79,178],[121,190,79,179],[122,4,80,4],[123,2,81,0],[124,2,82,0],[124,11,82,9,"assertData"],[124,21,82,19,"assertData"],[124,22,82,20,"data"],[124,26,82,24],[124,28,82,26],[125,4,83,4],[125,8,83,8],[125,15,83,15,"data"],[125,19,83,19],[125,24,83,24],[125,32,83,32],[125,34,83,34],[126,6,84,8],[126,12,84,14],[126,16,84,18,"CryptoError"],[126,27,84,29],[126,28,84,30],[126,71,84,73],[126,72,84,74],[127,4,85,4],[128,2,86,0],[129,2,87,0],[129,11,87,9,"assertEncoding"],[129,25,87,23,"assertEncoding"],[129,26,87,24,"encoding"],[129,34,87,32],[129,36,87,34],[130,4,88,4],[130,8,88,8],[130,9,88,9,"Object"],[130,15,88,15],[130,16,88,16,"values"],[130,22,88,22],[130,23,88,23,"CryptoEncoding"],[130,35,88,37],[130,36,88,37,"CryptoEncoding"],[130,50,88,37],[130,51,88,38],[130,52,88,39,"includes"],[130,60,88,47],[130,61,88,48,"encoding"],[130,69,88,56],[130,70,88,57],[130,72,88,59],[131,6,89,8],[131,12,89,14],[131,16,89,18,"CryptoError"],[131,27,89,29],[131,28,89,30],[131,90,89,92,"Object"],[131,96,89,98],[131,97,89,99,"keys"],[131,101,89,103],[131,102,89,104,"CryptoEncoding"],[131,114,89,118],[131,115,89,118,"CryptoEncoding"],[131,129,89,118],[131,130,89,119],[131,131,89,120,"join"],[131,135,89,124],[131,136,89,125],[131,155,89,144],[131,156,89,145],[131,158,89,147],[131,159,89,148],[132,4,90,4],[133,2,91,0],[134,2,92,0],[135,2,93,0],[136,0,94,0],[137,0,95,0],[138,0,96,0],[139,0,97,0],[140,0,98,0],[141,0,99,0],[142,0,100,0],[143,0,101,0],[144,0,102,0],[145,0,103,0],[146,0,104,0],[147,0,105,0],[148,0,106,0],[149,0,107,0],[150,0,108,0],[151,0,109,0],[152,0,110,0],[153,0,111,0],[154,0,112,0],[155,2,93,0],[155,11,113,22,"digestStringAsync"],[155,28,113,39,"digestStringAsync"],[155,29,113,39,"_x2"],[155,32,113,39],[155,34,113,39,"_x3"],[155,37,113,39],[156,4,113,39],[156,11,113,39,"_digestStringAsync"],[156,29,113,39],[156,30,113,39,"apply"],[156,35,113,39],[156,42,113,39,"arguments"],[156,51,113,39],[157,2,113,39],[158,2,122,0],[159,0,123,0],[160,0,124,0],[161,0,125,0],[162,0,126,0],[163,0,127,0],[164,0,128,0],[165,0,129,0],[166,0,130,0],[167,0,131,0],[168,0,132,0],[169,0,133,0],[170,0,134,0],[171,2,122,0],[171,11,122,0,"_digestStringAsync"],[171,30,122,0],[172,4,122,0,"_digestStringAsync"],[172,22,122,0],[172,29,122,0,"_asyncToGenerator"],[172,46,122,0],[172,47,122,0,"default"],[172,54,122,0],[172,56,113,7],[172,67,113,40,"algorithm"],[172,76,113,49],[172,78,113,51,"data"],[172,82,113,55],[172,84,113,101],[173,6,113,101],[173,10,113,57,"options"],[173,17,113,64],[173,20,113,64,"arguments"],[173,29,113,64],[173,30,113,64,"length"],[173,36,113,64],[173,44,113,64,"arguments"],[173,53,113,64],[173,61,113,64,"undefined"],[173,70,113,64],[173,73,113,64,"arguments"],[173,82,113,64],[173,88,113,67],[174,8,113,69,"encoding"],[174,16,113,77],[174,18,113,79,"CryptoEncoding"],[174,30,113,93],[174,31,113,93,"CryptoEncoding"],[174,45,113,93],[174,46,113,94,"HEX"],[175,6,113,98],[175,7,113,99],[176,6,114,4],[176,10,114,8],[176,11,114,9,"ExpoCrypto"],[176,21,114,19],[176,22,114,19,"default"],[176,29,114,19],[176,30,114,20,"digestStringAsync"],[176,47,114,37],[176,49,114,39],[177,8,115,8],[177,14,115,14],[177,18,115,18,"UnavailabilityError"],[177,34,115,37],[177,35,115,37,"UnavailabilityError"],[177,54,115,37],[177,55,115,38],[177,68,115,51],[177,70,115,53],[177,89,115,72],[177,90,115,73],[178,6,116,4],[179,6,117,4,"assertAlgorithm"],[179,21,117,19],[179,22,117,20,"algorithm"],[179,31,117,29],[179,32,117,30],[180,6,118,4,"assertData"],[180,16,118,14],[180,17,118,15,"data"],[180,21,118,19],[180,22,118,20],[181,6,119,4,"assertEncoding"],[181,20,119,18],[181,21,119,19,"options"],[181,28,119,26],[181,29,119,27,"encoding"],[181,37,119,35],[181,38,119,36],[182,6,120,4],[182,19,120,17,"ExpoCrypto"],[182,29,120,27],[182,30,120,27,"default"],[182,37,120,27],[182,38,120,28,"digestStringAsync"],[182,55,120,45],[182,56,120,46,"algorithm"],[182,65,120,55],[182,67,120,57,"data"],[182,71,120,61],[182,73,120,63,"options"],[182,80,120,70],[182,81,120,71],[183,4,121,0],[183,5,121,1],[184,4,121,1],[184,11,121,1,"_digestStringAsync"],[184,29,121,1],[184,30,121,1,"apply"],[184,35,121,1],[184,42,121,1,"arguments"],[184,51,121,1],[185,2,121,1],[186,2,135,7],[186,11,135,16,"getRandomValues"],[186,26,135,31,"getRandomValues"],[186,27,135,32,"typedArray"],[186,37,135,42],[186,39,135,44],[187,4,136,4,"ExpoCrypto"],[187,14,136,14],[187,15,136,14,"default"],[187,22,136,14],[187,23,136,15,"getRandomValues"],[187,38,136,30],[187,39,136,31,"typedArray"],[187,49,136,41],[187,50,136,42],[188,4,137,4],[188,11,137,11,"typedArray"],[188,21,137,21],[189,2,138,0],[190,2,139,0],[191,0,140,0],[192,0,141,0],[193,0,142,0],[194,0,143,0],[195,0,144,0],[196,0,145,0],[197,0,146,0],[198,0,147,0],[199,0,148,0],[200,0,149,0],[201,2,150,7],[201,11,150,16,"randomUUID"],[201,21,150,26,"randomUUID"],[201,22,150,26],[201,24,150,29],[202,4,151,4],[202,11,151,11,"ExpoCrypto"],[202,21,151,21],[202,22,151,21,"default"],[202,29,151,21],[202,30,151,22,"randomUUID"],[202,40,151,32],[202,41,151,33],[202,42,151,34],[203,2,152,0],[204,2,153,0],[204,6,153,6,"digestLengths"],[204,19,153,19],[204,22,153,22],[205,4,154,4],[205,5,154,5,"CryptoDigestAlgorithm"],[205,17,154,26],[205,18,154,26,"CryptoDigestAlgorithm"],[205,39,154,26],[205,40,154,27,"SHA1"],[205,44,154,31],[205,47,154,34],[205,49,154,36],[206,4,155,4],[206,5,155,5,"CryptoDigestAlgorithm"],[206,17,155,26],[206,18,155,26,"CryptoDigestAlgorithm"],[206,39,155,26],[206,40,155,27,"SHA256"],[206,46,155,33],[206,49,155,36],[206,51,155,38],[207,4,156,4],[207,5,156,5,"CryptoDigestAlgorithm"],[207,17,156,26],[207,18,156,26,"CryptoDigestAlgorithm"],[207,39,156,26],[207,40,156,27,"SHA384"],[207,46,156,33],[207,49,156,36],[207,51,156,38],[208,4,157,4],[208,5,157,5,"CryptoDigestAlgorithm"],[208,17,157,26],[208,18,157,26,"CryptoDigestAlgorithm"],[208,39,157,26],[208,40,157,27,"SHA512"],[208,46,157,33],[208,49,157,36],[208,51,157,38],[209,4,158,4],[209,5,158,5,"CryptoDigestAlgorithm"],[209,17,158,26],[209,18,158,26,"CryptoDigestAlgorithm"],[209,39,158,26],[209,40,158,27,"MD2"],[209,43,158,30],[209,46,158,33],[209,48,158,35],[210,4,159,4],[210,5,159,5,"CryptoDigestAlgorithm"],[210,17,159,26],[210,18,159,26,"CryptoDigestAlgorithm"],[210,39,159,26],[210,40,159,27,"MD4"],[210,43,159,30],[210,46,159,33],[210,48,159,35],[211,4,160,4],[211,5,160,5,"CryptoDigestAlgorithm"],[211,17,160,26],[211,18,160,26,"CryptoDigestAlgorithm"],[211,39,160,26],[211,40,160,27,"MD5"],[211,43,160,30],[211,46,160,33],[212,2,161,0],[212,3,161,1],[213,2,162,0],[214,0,163,0],[215,0,164,0],[216,0,165,0],[217,0,166,0],[218,0,167,0],[219,0,168,0],[220,0,169,0],[221,0,170,0],[222,0,171,0],[223,0,172,0],[224,0,173,0],[225,0,174,0],[226,0,175,0],[227,0,176,0],[228,0,177,0],[229,2,178,7],[229,11,178,16,"digest"],[229,17,178,22,"digest"],[229,18,178,23,"algorithm"],[229,27,178,32],[229,29,178,34,"data"],[229,33,178,38],[229,35,178,40],[230,4,179,4],[230,11,179,11],[230,15,179,15,"Promise"],[230,22,179,22],[230,23,179,23],[230,24,179,24,"resolve"],[230,31,179,31],[230,33,179,33,"reject"],[230,39,179,39],[230,44,179,44],[231,6,180,8],[231,10,180,12],[232,8,181,12],[232,12,181,16],[232,19,181,23,"ExpoCrypto"],[232,29,181,33],[232,30,181,33,"default"],[232,37,181,33],[232,38,181,34,"digestAsync"],[232,49,181,45],[232,54,181,50],[232,64,181,60],[232,66,181,62],[233,10,182,16,"resolve"],[233,17,182,23],[233,18,182,24,"ExpoCrypto"],[233,28,182,34],[233,29,182,34,"default"],[233,36,182,34],[233,37,182,35,"digestAsync"],[233,48,182,46],[233,49,182,47,"algorithm"],[233,58,182,56],[233,60,182,58,"data"],[233,64,182,62],[233,65,182,63],[233,66,182,64],[234,8,183,12],[234,9,183,13],[234,15,184,17],[235,10,185,16],[235,14,185,22,"output"],[235,20,185,28],[235,23,185,31],[235,27,185,35,"Uint8Array"],[235,37,185,45],[235,38,185,46,"digestLengths"],[235,51,185,59],[235,52,185,60,"algorithm"],[235,61,185,69],[235,62,185,70],[235,63,185,71],[236,10,186,16,"ExpoCrypto"],[236,20,186,26],[236,21,186,26,"default"],[236,28,186,26],[236,29,186,27,"digest"],[236,35,186,33],[236,36,186,34,"algorithm"],[236,45,186,43],[236,47,186,45,"output"],[236,53,186,51],[236,55,186,53,"data"],[236,59,186,57],[236,60,186,58],[237,10,187,16,"resolve"],[237,17,187,23],[237,18,187,24,"output"],[237,24,187,30],[237,25,187,31,"buffer"],[237,31,187,37],[237,32,187,38],[238,8,188,12],[239,6,189,8],[239,7,189,9],[239,8,190,8],[239,15,190,15,"error"],[239,20,190,20],[239,22,190,22],[240,8,191,12,"reject"],[240,14,191,18],[240,15,191,19,"error"],[240,20,191,24],[240,21,191,25],[241,6,192,8],[242,4,193,4],[242,5,193,5],[242,6,193,6],[243,2,194,0],[244,0,194,1],[244,3]],"functionMap":{"names":["<global>","CryptoError","CryptoError#constructor","getRandomBytes","getRandomBytesAsync","assertByteCount","assertAlgorithm","assertData","assertEncoding","digestStringAsync","getRandomValues","randomUUID","digest","Promise$argument_0"],"mappings":"AAA;ACK;ICE;KDE;CDC;OGS;CHyB;OIQ;CJe;AKC;CLO;AMC;CNI;AOC;CPI;AQC;CRI;OSsB;CTQ;OUc;CVG;OWY;CXE;OY0B;uBCC;KDc;CZC"},"hasCjsExports":false},"type":"js/module"}]}