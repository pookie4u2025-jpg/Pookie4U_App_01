{"dependencies":[{"name":"expo-constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":65,"index":65}}],"key":"pPv5KzfRT0rL6NCr7G9k0o4d1W8=","exportNames":["*"],"imports":1}},{"name":"expo-linking","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":66},"end":{"line":2,"column":40,"index":106}}],"key":"UOn5wJuCXvTT9EneNUmI6H0GQgM=","exportNames":["*"],"imports":1}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":107},"end":{"line":3,"column":45,"index":152}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"expo-web-browser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":153},"end":{"line":4,"column":54,"index":207}}],"key":"qFWzf28Sq0474idIhFBHQFboHaY=","exportNames":["*"],"imports":1}},{"name":"./AuthRequest","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":208},"end":{"line":5,"column":44,"index":252}}],"key":"BFyNh543W2KnsToqdsAa2+thYOo=","exportNames":["*"],"imports":1}},{"name":"./Discovery","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":253},"end":{"line":6,"column":52,"index":305}}],"key":"r5fifmpNd960vV6idFP2s9wdtw4=","exportNames":["*"],"imports":1}},{"name":"./SessionUrlProvider","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":306},"end":{"line":7,"column":54,"index":360}}],"key":"zrEejrKtMOy1F6w6i03i6OAYnco=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  exports.dismiss = dismiss;\n  Object.defineProperty(exports, \"getDefaultReturnUrl\", {\n    enumerable: true,\n    get: function () {\n      return getDefaultReturnUrl;\n    }\n  });\n  exports.getRedirectUrl = getRedirectUrl;\n  exports.makeRedirectUri = makeRedirectUri;\n  exports.loadAsync = loadAsync;\n  var _expoConstants = require(_dependencyMap[0], \"expo-constants\");\n  var Constants = _interopDefault(_expoConstants);\n  var _expoLinking = require(_dependencyMap[1], \"expo-linking\");\n  var Linking = _interopNamespace(_expoLinking);\n  var _expoModulesCore = require(_dependencyMap[2], \"expo-modules-core\");\n  var _expoWebBrowser = require(_dependencyMap[3], \"expo-web-browser\");\n  var _AuthRequest = require(_dependencyMap[4], \"./AuthRequest\");\n  var _Discovery = require(_dependencyMap[5], \"./Discovery\");\n  var _SessionUrlProvider = require(_dependencyMap[6], \"./SessionUrlProvider\");\n  var sessionUrlProvider = _interopDefault(_SessionUrlProvider);\n  // @needsAudit\n  /**\n   * Cancels an active `AuthSession` if there is one.\n   */\n  function dismiss() {\n    (0, _expoWebBrowser.dismissAuthSession)();\n  }\n  const getDefaultReturnUrl = sessionUrlProvider.default.getDefaultReturnUrl;\n  // @needsAudit @docsMissing\n  /**\n   * Get the URL that your authentication provider needs to redirect to. For example: `https://auth.expo.io/@your-username/your-app-slug`. You can pass an additional path component to be appended to the default redirect URL.\n   * > **Note** This method will throw an exception if you're using the bare workflow on native.\n   *\n   * @param path\n   * @return\n   *\n   * @example\n   * ```ts\n   * const url = AuthSession.getRedirectUrl('redirect');\n   *\n   * // Managed: https://auth.expo.io/@your-username/your-app-slug/redirect\n   * // Web: https://localhost:19006/redirect\n   * ```\n   *\n   * @deprecated Use `makeRedirectUri()` instead.\n   */\n  function getRedirectUrl(path) {\n    return sessionUrlProvider.default.getRedirectUrl({\n      urlPath: path\n    });\n  }\n  // @needsAudit\n  /**\n   * Create a redirect url for the current platform and environment. You need to manually define the redirect that will be used in\n   * a bare workflow React Native app, or an Expo standalone app, this is because it cannot be inferred automatically.\n   * - **Web:** Generates a path based on the current `window.location`. For production web apps, you should hard code the URL as well.\n   * - **Managed workflow:** Uses the `scheme` property of your app config.\n   * - **Bare workflow:** Will fallback to using the `native` option for bare workflow React Native apps.\n   *\n   * @param options Additional options for configuring the path.\n   * @return The `redirectUri` to use in an authentication request.\n   *\n   * @example\n   * ```ts\n   * const redirectUri = makeRedirectUri({\n   *   scheme: 'my-scheme',\n   *   path: 'redirect'\n   * });\n   * // Development Build: my-scheme://redirect\n   * // Expo Go: exp://127.0.0.1:8081/--/redirect\n   * // Web dev: https://localhost:19006/redirect\n   * // Web prod: https://yourwebsite.com/redirect\n   *\n   * const redirectUri2 = makeRedirectUri({\n   *   scheme: 'scheme2',\n   *   preferLocalhost: true,\n   *   isTripleSlashed: true,\n   * });\n   * // Development Build: scheme2:///\n   * // Expo Go: exp://localhost:8081\n   * // Web dev: https://localhost:19006\n   * // Web prod: https://yourwebsite.com\n   * ```\n   */\n  function makeRedirectUri({\n    native,\n    scheme,\n    isTripleSlashed,\n    queryParams,\n    path,\n    preferLocalhost\n  } = {}) {\n    if (_expoModulesCore.Platform.OS !== 'web' && native && [_expoConstants.ExecutionEnvironment.Standalone, _expoConstants.ExecutionEnvironment.Bare].includes(Constants.default.executionEnvironment)) {\n      // Should use the user-defined native scheme in standalone builds\n      return native;\n    }\n    const url = Linking.createURL(path || '', {\n      isTripleSlashed,\n      scheme,\n      queryParams\n    });\n    if (preferLocalhost) {\n      const ipAddress = url.match(/\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/);\n      // Only replace if an IP address exists\n      if (ipAddress?.length) {\n        const [protocol, path] = url.split(ipAddress[0]);\n        return `${protocol}localhost${path}`;\n      }\n    }\n    return url;\n  }\n  // @needsAudit\n  /**\n   * Build an `AuthRequest` and load it before returning.\n   *\n   * @param config A valid [`AuthRequestConfig`](#authrequestconfig) that specifies what provider to use.\n   * @param issuerOrDiscovery A loaded [`DiscoveryDocument`](#discoverydocument) or issuer URL.\n   * (Only `authorizationEndpoint` is required for requesting an authorization code).\n   * @return Returns an instance of `AuthRequest` that can be used to prompt the user for authorization.\n   */\n  async function loadAsync(config, issuerOrDiscovery) {\n    const request = new _AuthRequest.AuthRequest(config);\n    const discovery = await (0, _Discovery.resolveDiscoveryAsync)(issuerOrDiscovery);\n    await request.makeAuthUrlAsync(discovery);\n    return request;\n  }\n});","lineCount":153,"map":[[27,2,12,0,"exports"],[27,9,12,0],[27,10,12,0,"dismiss"],[27,17,12,0],[27,20,12,0,"dismiss"],[27,27,12,0],[28,2,15,0,"Object"],[28,8,15,0],[28,9,15,0,"defineProperty"],[28,23,15,0],[28,24,15,0,"exports"],[28,31,15,0],[29,4,15,0,"enumerable"],[29,14,15,0],[30,4,15,0,"get"],[30,7,15,0],[30,18,15,0,"get"],[30,19,15,0],[31,6,15,0],[31,13,15,0,"getDefaultReturnUrl"],[31,32,15,0],[32,4,15,0],[33,2,15,0],[34,2,34,0,"exports"],[34,9,34,0],[34,10,34,0,"getRedirectUrl"],[34,24,34,0],[34,27,34,0,"getRedirectUrl"],[34,41,34,0],[35,2,70,0,"exports"],[35,9,70,0],[35,10,70,0,"makeRedirectUri"],[35,25,70,0],[35,28,70,0,"makeRedirectUri"],[35,43,70,0],[36,2,101,0,"exports"],[36,9,101,0],[36,10,101,0,"loadAsync"],[36,19,101,0],[36,22,101,0,"loadAsync"],[36,31,101,0],[37,2,1,0],[37,6,1,0,"_expoConstants"],[37,20,1,0],[37,23,1,0,"require"],[37,30,1,0],[37,31,1,0,"_dependencyMap"],[37,45,1,0],[38,2,1,0],[38,6,1,0,"Constants"],[38,15,1,0],[38,18,1,0,"_interopDefault"],[38,33,1,0],[38,34,1,0,"_expoConstants"],[38,48,1,0],[39,2,2,0],[39,6,2,0,"_expoLinking"],[39,18,2,0],[39,21,2,0,"require"],[39,28,2,0],[39,29,2,0,"_dependencyMap"],[39,43,2,0],[40,2,2,0],[40,6,2,0,"Linking"],[40,13,2,0],[40,16,2,0,"_interopNamespace"],[40,33,2,0],[40,34,2,0,"_expoLinking"],[40,46,2,0],[41,2,3,0],[41,6,3,0,"_expoModulesCore"],[41,22,3,0],[41,25,3,0,"require"],[41,32,3,0],[41,33,3,0,"_dependencyMap"],[41,47,3,0],[42,2,4,0],[42,6,4,0,"_expoWebBrowser"],[42,21,4,0],[42,24,4,0,"require"],[42,31,4,0],[42,32,4,0,"_dependencyMap"],[42,46,4,0],[43,2,5,0],[43,6,5,0,"_AuthRequest"],[43,18,5,0],[43,21,5,0,"require"],[43,28,5,0],[43,29,5,0,"_dependencyMap"],[43,43,5,0],[44,2,6,0],[44,6,6,0,"_Discovery"],[44,16,6,0],[44,19,6,0,"require"],[44,26,6,0],[44,27,6,0,"_dependencyMap"],[44,41,6,0],[45,2,7,0],[45,6,7,0,"_SessionUrlProvider"],[45,25,7,0],[45,28,7,0,"require"],[45,35,7,0],[45,36,7,0,"_dependencyMap"],[45,50,7,0],[46,2,7,0],[46,6,7,0,"sessionUrlProvider"],[46,24,7,0],[46,27,7,0,"_interopDefault"],[46,42,7,0],[46,43,7,0,"_SessionUrlProvider"],[46,62,7,0],[47,2,8,0],[48,2,9,0],[49,0,10,0],[50,0,11,0],[51,2,12,7],[51,11,12,16,"dismiss"],[51,18,12,23,"dismiss"],[51,19,12,23],[51,21,12,26],[52,4,13,4],[52,8,13,4,"dismissAuthSession"],[52,23,13,22],[52,24,13,22,"dismissAuthSession"],[52,42,13,22],[52,44,13,23],[52,45,13,24],[53,2,14,0],[54,2,15,7],[54,8,15,13,"getDefaultReturnUrl"],[54,27,15,32],[54,30,15,35,"sessionUrlProvider"],[54,48,15,53],[54,49,15,53,"default"],[54,56,15,53],[54,57,15,54,"getDefaultReturnUrl"],[54,76,15,73],[55,2,16,0],[56,2,17,0],[57,0,18,0],[58,0,19,0],[59,0,20,0],[60,0,21,0],[61,0,22,0],[62,0,23,0],[63,0,24,0],[64,0,25,0],[65,0,26,0],[66,0,27,0],[67,0,28,0],[68,0,29,0],[69,0,30,0],[70,0,31,0],[71,0,32,0],[72,0,33,0],[73,2,34,7],[73,11,34,16,"getRedirectUrl"],[73,25,34,30,"getRedirectUrl"],[73,26,34,31,"path"],[73,30,34,35],[73,32,34,37],[74,4,35,4],[74,11,35,11,"sessionUrlProvider"],[74,29,35,29],[74,30,35,29,"default"],[74,37,35,29],[74,38,35,30,"getRedirectUrl"],[74,52,35,44],[74,53,35,45],[75,6,35,47,"urlPath"],[75,13,35,54],[75,15,35,56,"path"],[76,4,35,61],[76,5,35,62],[76,6,35,63],[77,2,36,0],[78,2,37,0],[79,2,38,0],[80,0,39,0],[81,0,40,0],[82,0,41,0],[83,0,42,0],[84,0,43,0],[85,0,44,0],[86,0,45,0],[87,0,46,0],[88,0,47,0],[89,0,48,0],[90,0,49,0],[91,0,50,0],[92,0,51,0],[93,0,52,0],[94,0,53,0],[95,0,54,0],[96,0,55,0],[97,0,56,0],[98,0,57,0],[99,0,58,0],[100,0,59,0],[101,0,60,0],[102,0,61,0],[103,0,62,0],[104,0,63,0],[105,0,64,0],[106,0,65,0],[107,0,66,0],[108,0,67,0],[109,0,68,0],[110,0,69,0],[111,2,70,7],[111,11,70,16,"makeRedirectUri"],[111,26,70,31,"makeRedirectUri"],[111,27,70,32],[112,4,70,34,"native"],[112,10,70,40],[113,4,70,42,"scheme"],[113,10,70,48],[114,4,70,50,"isTripleSlashed"],[114,19,70,65],[115,4,70,67,"queryParams"],[115,15,70,78],[116,4,70,80,"path"],[116,8,70,84],[117,4,70,86,"preferLocalhost"],[118,2,70,103],[118,3,70,104],[118,6,70,107],[118,7,70,108],[118,8,70,109],[118,10,70,111],[119,4,71,4],[119,8,71,8,"Platform"],[119,24,71,16],[119,25,71,16,"Platform"],[119,33,71,16],[119,34,71,17,"OS"],[119,36,71,19],[119,41,71,24],[119,46,71,29],[119,50,72,8,"native"],[119,56,72,14],[119,60,73,8],[119,61,73,9,"ExecutionEnvironment"],[119,75,73,29],[119,76,73,29,"ExecutionEnvironment"],[119,96,73,29],[119,97,73,30,"Standalone"],[119,107,73,40],[119,109,73,42,"ExecutionEnvironment"],[119,123,73,62],[119,124,73,62,"ExecutionEnvironment"],[119,144,73,62],[119,145,73,63,"Bare"],[119,149,73,67],[119,150,73,68],[119,151,73,69,"includes"],[119,159,73,77],[119,160,73,78,"Constants"],[119,169,73,87],[119,170,73,87,"default"],[119,177,73,87],[119,178,73,88,"executionEnvironment"],[119,198,73,108],[119,199,73,109],[119,201,73,111],[120,6,74,8],[121,6,75,8],[121,13,75,15,"native"],[121,19,75,21],[122,4,76,4],[123,4,77,4],[123,10,77,10,"url"],[123,13,77,13],[123,16,77,16,"Linking"],[123,23,77,23],[123,24,77,24,"createURL"],[123,33,77,33],[123,34,77,34,"path"],[123,38,77,38],[123,42,77,42],[123,44,77,44],[123,46,77,46],[124,6,78,8,"isTripleSlashed"],[124,21,78,23],[125,6,79,8,"scheme"],[125,12,79,14],[126,6,80,8,"queryParams"],[127,4,81,4],[127,5,81,5],[127,6,81,6],[128,4,82,4],[128,8,82,8,"preferLocalhost"],[128,23,82,23],[128,25,82,25],[129,6,83,8],[129,12,83,14,"ipAddress"],[129,21,83,23],[129,24,83,26,"url"],[129,27,83,29],[129,28,83,30,"match"],[129,33,83,35],[129,34,83,36],[129,198,83,200],[129,199,83,201],[130,6,84,8],[131,6,85,8],[131,10,85,12,"ipAddress"],[131,19,85,21],[131,21,85,23,"length"],[131,27,85,29],[131,29,85,31],[132,8,86,12],[132,14,86,18],[132,15,86,19,"protocol"],[132,23,86,27],[132,25,86,29,"path"],[132,29,86,33],[132,30,86,34],[132,33,86,37,"url"],[132,36,86,40],[132,37,86,41,"split"],[132,42,86,46],[132,43,86,47,"ipAddress"],[132,52,86,56],[132,53,86,57],[132,54,86,58],[132,55,86,59],[132,56,86,60],[133,8,87,12],[133,15,87,19],[133,18,87,22,"protocol"],[133,26,87,30],[133,38,87,42,"path"],[133,42,87,46],[133,44,87,48],[134,6,88,8],[135,4,89,4],[136,4,90,4],[136,11,90,11,"url"],[136,14,90,14],[137,2,91,0],[138,2,92,0],[139,2,93,0],[140,0,94,0],[141,0,95,0],[142,0,96,0],[143,0,97,0],[144,0,98,0],[145,0,99,0],[146,0,100,0],[147,2,101,7],[147,17,101,22,"loadAsync"],[147,26,101,31,"loadAsync"],[147,27,101,32,"config"],[147,33,101,38],[147,35,101,40,"issuerOrDiscovery"],[147,52,101,57],[147,54,101,59],[148,4,102,4],[148,10,102,10,"request"],[148,17,102,17],[148,20,102,20],[148,24,102,24,"AuthRequest"],[148,36,102,35],[148,37,102,35,"AuthRequest"],[148,48,102,35],[148,49,102,36,"config"],[148,55,102,42],[148,56,102,43],[149,4,103,4],[149,10,103,10,"discovery"],[149,19,103,19],[149,22,103,22],[149,28,103,28],[149,32,103,28,"resolveDiscoveryAsync"],[149,42,103,49],[149,43,103,49,"resolveDiscoveryAsync"],[149,64,103,49],[149,66,103,50,"issuerOrDiscovery"],[149,83,103,67],[149,84,103,68],[150,4,104,4],[150,10,104,10,"request"],[150,17,104,17],[150,18,104,18,"makeAuthUrlAsync"],[150,34,104,34],[150,35,104,35,"discovery"],[150,44,104,44],[150,45,104,45],[151,4,105,4],[151,11,105,11,"request"],[151,18,105,18],[152,2,106,0],[153,0,106,1],[153,3]],"functionMap":{"names":["<global>","dismiss","getRedirectUrl","makeRedirectUri","loadAsync"],"mappings":"AAA;OCW;CDE;OEoB;CFE;OGkC;CHqB;OIU;CJK"},"hasCjsExports":false},"type":"js/module"}]}