{"dependencies":[{"name":"zustand","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":33,"index":33}}],"key":"POPvx7yS3Y3wz+S/9OAefiXNs0Q=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":34},"end":{"line":2,"column":69,"index":103}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"],"imports":1}},{"name":"../utils/HapticsManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":104},"end":{"line":3,"column":77,"index":181}}],"key":"nBdnSRqGBBV35N8QrGTTDbqVGgg=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"AVAILABLE_BADGES\", {\n    enumerable: true,\n    get: function () {\n      return AVAILABLE_BADGES;\n    }\n  });\n  Object.defineProperty(exports, \"useGameStore\", {\n    enumerable: true,\n    get: function () {\n      return useGameStore;\n    }\n  });\n  var _zustand = require(_dependencyMap[0], \"zustand\");\n  var _reactNativeAsyncStorageAsyncStorage = require(_dependencyMap[1], \"@react-native-async-storage/async-storage\");\n  var AsyncStorage = _interopDefault(_reactNativeAsyncStorageAsyncStorage);\n  var _utilsHapticsManager = require(_dependencyMap[2], \"../utils/HapticsManager\");\n  // Level progression: exponential growth\n  const calculateLevelUpPoints = level => {\n    return Math.floor(100 * Math.pow(1.5, level - 1));\n  };\n\n  // Generate level thresholds up to level 50\n  const generateLevelThresholds = () => {\n    const thresholds = [0]; // Level 1 starts at 0\n    for (let i = 1; i <= 50; i++) {\n      thresholds.push(thresholds[i - 1] + calculateLevelUpPoints(i));\n    }\n    return thresholds;\n  };\n  const LEVEL_THRESHOLDS = generateLevelThresholds();\n  const STORAGE_KEY = '@pookie4u_game_data';\n\n  // Available badges\n  const AVAILABLE_BADGES = {\n    FIRST_TASK: 'first_task',\n    WEEK_WARRIOR: 'week_warrior',\n    // 7-day streak\n    MONTH_MASTER: 'month_master',\n    // 30-day streak\n    HUNDRED_CLUB: 'hundred_club',\n    // 100 tasks\n    ROMANCE_EXPERT: 'romance_expert',\n    // Level 5\n    LOVE_GURU: 'love_guru',\n    // Level 10\n    RELATIONSHIP_CHAMPION: 'relationship_champion',\n    // Level 20\n    STREAK_LEGEND: 'streak_legend',\n    // 50-day streak\n    POINTS_MASTER: 'points_master',\n    // 1000 points\n    DEDICATION_AWARD: 'dedication_award' // 100 days active\n  };\n  const useGameStore = (0, _zustand.create)((set, get) => ({\n    // Initial state\n    totalPoints: 0,\n    currentLevel: 1,\n    currentStreak: 0,\n    longestStreak: 0,\n    tasksCompleted: 0,\n    badges: [],\n    lastActiveDate: null,\n    levelUpPoints: LEVEL_THRESHOLDS,\n    // Load persisted data from AsyncStorage\n    loadPersistedData: async () => {\n      try {\n        const stored = await AsyncStorage.default.getItem(STORAGE_KEY);\n        if (stored) {\n          const data = JSON.parse(stored);\n          set({\n            totalPoints: data.totalPoints || 0,\n            currentLevel: data.currentLevel || 1,\n            currentStreak: data.currentStreak || 0,\n            longestStreak: data.longestStreak || 0,\n            tasksCompleted: data.tasksCompleted || 0,\n            badges: data.badges || [],\n            lastActiveDate: data.lastActiveDate || null\n          });\n\n          // Check if streak should be broken due to inactivity\n          const state = get();\n          if (state.lastActiveDate) {\n            const lastActive = new Date(state.lastActiveDate);\n            const now = new Date();\n            const daysSinceActive = Math.floor((now.getTime() - lastActive.getTime()) / (1000 * 60 * 60 * 24));\n            if (daysSinceActive > 1 && state.currentStreak > 0) {\n              // Break streak if more than 1 day inactive\n              await state.breakStreak();\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Failed to load game data:', error);\n      }\n    },\n    // Persist current state to AsyncStorage\n    persistData: async updatedState => {\n      try {\n        const currentState = get();\n        const dataToStore = {\n          totalPoints: updatedState.totalPoints ?? currentState.totalPoints,\n          currentLevel: updatedState.currentLevel ?? currentState.currentLevel,\n          currentStreak: updatedState.currentStreak ?? currentState.currentStreak,\n          longestStreak: updatedState.longestStreak ?? currentState.longestStreak,\n          tasksCompleted: updatedState.tasksCompleted ?? currentState.tasksCompleted,\n          badges: updatedState.badges ?? currentState.badges,\n          lastActiveDate: new Date().toISOString()\n        };\n        await AsyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(dataToStore));\n      } catch (error) {\n        console.error('Failed to persist game data:', error);\n      }\n    },\n    // Add experience points with level progression\n    addExperience: async points => {\n      const state = get();\n      const newPoints = state.totalPoints + points;\n\n      // Calculate new level\n      let newLevel = state.currentLevel;\n      while (newLevel < LEVEL_THRESHOLDS.length - 1 && newPoints >= LEVEL_THRESHOLDS[newLevel]) {\n        newLevel++;\n      }\n      const leveledUp = newLevel > state.currentLevel;\n\n      // Update state\n      const updatedState = {\n        totalPoints: newPoints,\n        currentLevel: newLevel\n      };\n      set(updatedState);\n\n      // Persist immediately\n      await get().persistData(updatedState);\n\n      // Haptic feedback for level up\n      if (leveledUp) {\n        await (0, _utilsHapticsManager.levelUp)();\n\n        // Award level-based badges\n        if (newLevel === 5) {\n          await get().addBadge(AVAILABLE_BADGES.ROMANCE_EXPERT);\n        } else if (newLevel === 10) {\n          await get().addBadge(AVAILABLE_BADGES.LOVE_GURU);\n        } else if (newLevel === 20) {\n          await get().addBadge(AVAILABLE_BADGES.RELATIONSHIP_CHAMPION);\n        }\n      }\n\n      // Check for points-based badges\n      if (newPoints >= 1000 && !state.badges.includes(AVAILABLE_BADGES.POINTS_MASTER)) {\n        await get().addBadge(AVAILABLE_BADGES.POINTS_MASTER);\n      }\n    },\n    // Complete a task (combines points and task completion)\n    completeTask: async taskPoints => {\n      const state = get();\n      const newTasksCompleted = state.tasksCompleted + 1;\n\n      // Update state\n      const updatedState = {\n        tasksCompleted: newTasksCompleted\n      };\n      set(updatedState);\n\n      // Add experience points\n      await get().addExperience(taskPoints);\n\n      // Update streak\n      await get().updateStreak();\n\n      // Persist task completion\n      await get().persistData(updatedState);\n\n      // Task completion haptic feedback\n      await (0, _utilsHapticsManager.taskComplete)();\n\n      // Check for task-based badges\n      if (newTasksCompleted === 1) {\n        await get().addBadge(AVAILABLE_BADGES.FIRST_TASK);\n      } else if (newTasksCompleted === 100) {\n        await get().addBadge(AVAILABLE_BADGES.HUNDRED_CLUB);\n      }\n    },\n    // Update daily streak (Snapchat-style)\n    updateStreak: async () => {\n      const state = get();\n      const today = new Date();\n      const todayString = today.toDateString();\n\n      // If no last active date, this is the first task - start streak at 1\n      if (!state.lastActiveDate) {\n        const updatedState = {\n          currentStreak: 1,\n          longestStreak: Math.max(1, state.longestStreak),\n          lastActiveDate: today.toISOString()\n        };\n        set(updatedState);\n        await get().persistData(updatedState);\n\n        // Check for first task badge\n        if (state.currentStreak === 0) {\n          await get().addBadge(AVAILABLE_BADGES.FIRST_TASK);\n        }\n        return;\n      }\n      const lastActiveDate = new Date(state.lastActiveDate);\n      const lastActiveDateString = lastActiveDate.toDateString();\n\n      // If already updated today, don't update again\n      if (lastActiveDateString === todayString) {\n        return;\n      }\n\n      // Calculate days difference\n      const diffTime = today.getTime() - lastActiveDate.getTime();\n      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n      let newStreak;\n      let newLongestStreak;\n      if (diffDays === 1) {\n        // Consecutive day - increment streak\n        newStreak = state.currentStreak + 1;\n        newLongestStreak = Math.max(newStreak, state.longestStreak);\n      } else if (diffDays > 1) {\n        // Missed day(s) - reset streak to 1 (starting fresh)\n        newStreak = 1;\n        newLongestStreak = state.longestStreak; // Keep longest streak\n      } else {\n        // Same day (shouldn't happen but safety check)\n        return;\n      }\n      const updatedState = {\n        currentStreak: newStreak,\n        longestStreak: newLongestStreak,\n        lastActiveDate: today.toISOString()\n      };\n      set(updatedState);\n\n      // Persist immediately\n      await get().persistData(updatedState);\n\n      // Check for streak-based badges\n      if (newStreak === 7) {\n        await get().addBadge(AVAILABLE_BADGES.WEEK_WARRIOR);\n      } else if (newStreak === 30) {\n        await get().addBadge(AVAILABLE_BADGES.MONTH_MASTER);\n      } else if (newStreak === 50) {\n        await get().addBadge(AVAILABLE_BADGES.STREAK_LEGEND);\n      }\n    },\n    // Break current streak\n    breakStreak: async () => {\n      const updatedState = {\n        currentStreak: 0\n      };\n      set(updatedState);\n      await get().persistData(updatedState);\n    },\n    // Add a new badge\n    addBadge: async badge => {\n      const state = get();\n      if (!state.badges.includes(badge)) {\n        const updatedState = {\n          badges: [...state.badges, badge]\n        };\n        set(updatedState);\n        await get().persistData(updatedState);\n\n        // Achievement haptic feedback\n        await (0, _utilsHapticsManager.achievement)();\n      }\n    },\n    // Reset all progress (for testing or account reset)\n    resetProgress: async () => {\n      const resetState = {\n        totalPoints: 0,\n        currentLevel: 1,\n        currentStreak: 0,\n        longestStreak: 0,\n        tasksCompleted: 0,\n        badges: [],\n        lastActiveDate: null\n      };\n      set(resetState);\n\n      // Clear from storage\n      try {\n        await AsyncStorage.default.removeItem(STORAGE_KEY);\n      } catch (error) {\n        console.error('Failed to clear game data:', error);\n      }\n    },\n    // Computed getters\n    getExperienceForNextLevel: () => {\n      const state = get();\n      if (state.currentLevel >= LEVEL_THRESHOLDS.length - 1) {\n        return 0; // Max level reached\n      }\n      return LEVEL_THRESHOLDS[state.currentLevel] - state.totalPoints;\n    },\n    getProgressPercentage: () => {\n      const state = get();\n      if (state.currentLevel >= LEVEL_THRESHOLDS.length - 1) {\n        return 100; // Max level\n      }\n      const currentLevelStart = LEVEL_THRESHOLDS[state.currentLevel - 1];\n      const nextLevelStart = LEVEL_THRESHOLDS[state.currentLevel];\n      const currentProgress = state.totalPoints - currentLevelStart;\n      const totalNeeded = nextLevelStart - currentLevelStart;\n      return Math.floor(currentProgress / totalNeeded * 100);\n    },\n    shouldLevelUp: () => {\n      const state = get();\n      return state.currentLevel < LEVEL_THRESHOLDS.length - 1 && state.totalPoints >= LEVEL_THRESHOLDS[state.currentLevel];\n    }\n  }));\n\n  // Initialize store on app start\n  useGameStore.getState().loadPersistedData();\n});","lineCount":331,"map":[[12,2,51,0,"Object"],[12,8,51,0],[12,9,51,0,"defineProperty"],[12,23,51,0],[12,24,51,0,"exports"],[12,31,51,0],[13,4,51,0,"enumerable"],[13,14,51,0],[14,4,51,0,"get"],[14,7,51,0],[14,18,51,0,"get"],[14,19,51,0],[15,6,51,0],[15,13,51,0,"AVAILABLE_BADGES"],[15,29,51,0],[16,4,51,0],[17,2,51,0],[18,2,360,0,"Object"],[18,8,360,0],[18,9,360,0,"defineProperty"],[18,23,360,0],[18,24,360,0,"exports"],[18,31,360,0],[19,4,360,0,"enumerable"],[19,14,360,0],[20,4,360,0,"get"],[20,7,360,0],[20,18,360,0,"get"],[20,19,360,0],[21,6,360,0],[21,13,360,9,"useGameStore"],[21,25,360,21],[22,4,360,21],[23,2,360,21],[24,2,1,0],[24,6,1,0,"_zustand"],[24,14,1,0],[24,17,1,0,"require"],[24,24,1,0],[24,25,1,0,"_dependencyMap"],[24,39,1,0],[25,2,2,0],[25,6,2,0,"_reactNativeAsyncStorageAsyncStorage"],[25,42,2,0],[25,45,2,0,"require"],[25,52,2,0],[25,53,2,0,"_dependencyMap"],[25,67,2,0],[26,2,2,0],[26,6,2,0,"AsyncStorage"],[26,18,2,0],[26,21,2,0,"_interopDefault"],[26,36,2,0],[26,37,2,0,"_reactNativeAsyncStorageAsyncStorage"],[26,73,2,0],[27,2,3,0],[27,6,3,0,"_utilsHapticsManager"],[27,26,3,0],[27,29,3,0,"require"],[27,36,3,0],[27,37,3,0,"_dependencyMap"],[27,51,3,0],[28,2,33,0],[29,2,34,0],[29,8,34,6,"calculateLevelUpPoints"],[29,30,34,28],[29,33,34,32,"level"],[29,38,34,45],[29,42,34,58],[30,4,35,2],[30,11,35,9,"Math"],[30,15,35,13],[30,16,35,14,"floor"],[30,21,35,19],[30,22,35,20],[30,25,35,23],[30,28,35,26,"Math"],[30,32,35,30],[30,33,35,31,"pow"],[30,36,35,34],[30,37,35,35],[30,40,35,38],[30,42,35,40,"level"],[30,47,35,45],[30,50,35,48],[30,51,35,49],[30,52,35,50],[30,53,35,51],[31,2,36,0],[31,3,36,1],[33,2,38,0],[34,2,39,0],[34,8,39,6,"generateLevelThresholds"],[34,31,39,29],[34,34,39,32,"generateLevelThresholds"],[34,35,39,32],[34,40,39,48],[35,4,40,2],[35,10,40,8,"thresholds"],[35,20,40,18],[35,23,40,21],[35,24,40,22],[35,25,40,23],[35,26,40,24],[35,27,40,25],[35,28,40,26],[36,4,41,2],[36,9,41,7],[36,13,41,11,"i"],[36,14,41,12],[36,17,41,15],[36,18,41,16],[36,20,41,18,"i"],[36,21,41,19],[36,25,41,23],[36,27,41,25],[36,29,41,27,"i"],[36,30,41,28],[36,32,41,30],[36,34,41,32],[37,6,42,4,"thresholds"],[37,16,42,14],[37,17,42,15,"push"],[37,21,42,19],[37,22,42,20,"thresholds"],[37,32,42,30],[37,33,42,31,"i"],[37,34,42,32],[37,37,42,35],[37,38,42,36],[37,39,42,37],[37,42,42,40,"calculateLevelUpPoints"],[37,64,42,62],[37,65,42,63,"i"],[37,66,42,64],[37,67,42,65],[37,68,42,66],[38,4,43,2],[39,4,44,2],[39,11,44,9,"thresholds"],[39,21,44,19],[40,2,45,0],[40,3,45,1],[41,2,47,0],[41,8,47,6,"LEVEL_THRESHOLDS"],[41,24,47,22],[41,27,47,25,"generateLevelThresholds"],[41,50,47,48],[41,51,47,49],[41,52,47,50],[42,2,48,0],[42,8,48,6,"STORAGE_KEY"],[42,19,48,17],[42,22,48,20],[42,43,48,41],[44,2,50,0],[45,2,51,7],[45,8,51,13,"AVAILABLE_BADGES"],[45,24,51,29],[45,27,51,32],[46,4,52,2,"FIRST_TASK"],[46,14,52,12],[46,16,52,14],[46,28,52,26],[47,4,53,2,"WEEK_WARRIOR"],[47,16,53,14],[47,18,53,16],[47,32,53,30],[48,4,53,32],[49,4,54,2,"MONTH_MASTER"],[49,16,54,14],[49,18,54,16],[49,32,54,30],[50,4,54,32],[51,4,55,2,"HUNDRED_CLUB"],[51,16,55,14],[51,18,55,16],[51,32,55,30],[52,4,55,32],[53,4,56,2,"ROMANCE_EXPERT"],[53,18,56,16],[53,20,56,18],[53,36,56,34],[54,4,56,36],[55,4,57,2,"LOVE_GURU"],[55,13,57,11],[55,15,57,13],[55,26,57,24],[56,4,57,26],[57,4,58,2,"RELATIONSHIP_CHAMPION"],[57,25,58,23],[57,27,58,25],[57,50,58,48],[58,4,58,50],[59,4,59,2,"STREAK_LEGEND"],[59,17,59,15],[59,19,59,17],[59,34,59,32],[60,4,59,34],[61,4,60,2,"POINTS_MASTER"],[61,17,60,15],[61,19,60,17],[61,34,60,32],[62,4,60,34],[63,4,61,2,"DEDICATION_AWARD"],[63,20,61,18],[63,22,61,20],[63,40,61,38],[63,41,61,40],[64,2,62,0],[64,3,62,1],[65,2,64,0],[65,8,64,6,"useGameStore"],[65,20,64,18],[65,23,64,21],[65,27,64,21,"create"],[65,35,64,27],[65,36,64,27,"create"],[65,42,64,27],[65,44,64,39],[65,45,64,40,"set"],[65,48,64,43],[65,50,64,45,"get"],[65,53,64,48],[65,59,64,54],[66,4,65,2],[67,4,66,2,"totalPoints"],[67,15,66,13],[67,17,66,15],[67,18,66,16],[68,4,67,2,"currentLevel"],[68,16,67,14],[68,18,67,16],[68,19,67,17],[69,4,68,2,"currentStreak"],[69,17,68,15],[69,19,68,17],[69,20,68,18],[70,4,69,2,"longestStreak"],[70,17,69,15],[70,19,69,17],[70,20,69,18],[71,4,70,2,"tasksCompleted"],[71,18,70,16],[71,20,70,18],[71,21,70,19],[72,4,71,2,"badges"],[72,10,71,8],[72,12,71,10],[72,14,71,12],[73,4,72,2,"lastActiveDate"],[73,18,72,16],[73,20,72,18],[73,24,72,22],[74,4,73,2,"levelUpPoints"],[74,17,73,15],[74,19,73,17,"LEVEL_THRESHOLDS"],[74,35,73,33],[75,4,75,2],[76,4,76,2,"loadPersistedData"],[76,21,76,19],[76,23,76,21],[76,29,76,21,"loadPersistedData"],[76,30,76,21],[76,35,76,33],[77,6,77,4],[77,10,77,8],[78,8,78,6],[78,14,78,12,"stored"],[78,20,78,18],[78,23,78,21],[78,29,78,27,"AsyncStorage"],[78,41,78,39],[78,42,78,39,"default"],[78,49,78,39],[78,50,78,40,"getItem"],[78,57,78,47],[78,58,78,48,"STORAGE_KEY"],[78,69,78,59],[78,70,78,60],[79,8,79,6],[79,12,79,10,"stored"],[79,18,79,16],[79,20,79,18],[80,10,80,8],[80,16,80,14,"data"],[80,20,80,18],[80,23,80,21,"JSON"],[80,27,80,25],[80,28,80,26,"parse"],[80,33,80,31],[80,34,80,32,"stored"],[80,40,80,38],[80,41,80,39],[81,10,81,8,"set"],[81,13,81,11],[81,14,81,12],[82,12,82,10,"totalPoints"],[82,23,82,21],[82,25,82,23,"data"],[82,29,82,27],[82,30,82,28,"totalPoints"],[82,41,82,39],[82,45,82,43],[82,46,82,44],[83,12,83,10,"currentLevel"],[83,24,83,22],[83,26,83,24,"data"],[83,30,83,28],[83,31,83,29,"currentLevel"],[83,43,83,41],[83,47,83,45],[83,48,83,46],[84,12,84,10,"currentStreak"],[84,25,84,23],[84,27,84,25,"data"],[84,31,84,29],[84,32,84,30,"currentStreak"],[84,45,84,43],[84,49,84,47],[84,50,84,48],[85,12,85,10,"longestStreak"],[85,25,85,23],[85,27,85,25,"data"],[85,31,85,29],[85,32,85,30,"longestStreak"],[85,45,85,43],[85,49,85,47],[85,50,85,48],[86,12,86,10,"tasksCompleted"],[86,26,86,24],[86,28,86,26,"data"],[86,32,86,30],[86,33,86,31,"tasksCompleted"],[86,47,86,45],[86,51,86,49],[86,52,86,50],[87,12,87,10,"badges"],[87,18,87,16],[87,20,87,18,"data"],[87,24,87,22],[87,25,87,23,"badges"],[87,31,87,29],[87,35,87,33],[87,37,87,35],[88,12,88,10,"lastActiveDate"],[88,26,88,24],[88,28,88,26,"data"],[88,32,88,30],[88,33,88,31,"lastActiveDate"],[88,47,88,45],[88,51,88,49],[89,10,89,8],[89,11,89,9],[89,12,89,10],[91,10,91,8],[92,10,92,8],[92,16,92,14,"state"],[92,21,92,19],[92,24,92,22,"get"],[92,27,92,25],[92,28,92,26],[92,29,92,27],[93,10,93,8],[93,14,93,12,"state"],[93,19,93,17],[93,20,93,18,"lastActiveDate"],[93,34,93,32],[93,36,93,34],[94,12,94,10],[94,18,94,16,"lastActive"],[94,28,94,26],[94,31,94,29],[94,35,94,33,"Date"],[94,39,94,37],[94,40,94,38,"state"],[94,45,94,43],[94,46,94,44,"lastActiveDate"],[94,60,94,58],[94,61,94,59],[95,12,95,10],[95,18,95,16,"now"],[95,21,95,19],[95,24,95,22],[95,28,95,26,"Date"],[95,32,95,30],[95,33,95,31],[95,34,95,32],[96,12,96,10],[96,18,96,16,"daysSinceActive"],[96,33,96,31],[96,36,96,34,"Math"],[96,40,96,38],[96,41,96,39,"floor"],[96,46,96,44],[96,47,96,45],[96,48,96,46,"now"],[96,51,96,49],[96,52,96,50,"getTime"],[96,59,96,57],[96,60,96,58],[96,61,96,59],[96,64,96,62,"lastActive"],[96,74,96,72],[96,75,96,73,"getTime"],[96,82,96,80],[96,83,96,81],[96,84,96,82],[96,89,96,87],[96,93,96,91],[96,96,96,94],[96,98,96,96],[96,101,96,99],[96,103,96,101],[96,106,96,104],[96,108,96,106],[96,109,96,107],[96,110,96,108],[97,12,98,10],[97,16,98,14,"daysSinceActive"],[97,31,98,29],[97,34,98,32],[97,35,98,33],[97,39,98,37,"state"],[97,44,98,42],[97,45,98,43,"currentStreak"],[97,58,98,56],[97,61,98,59],[97,62,98,60],[97,64,98,62],[98,14,99,12],[99,14,100,12],[99,20,100,18,"state"],[99,25,100,23],[99,26,100,24,"breakStreak"],[99,37,100,35],[99,38,100,36],[99,39,100,37],[100,12,101,10],[101,10,102,8],[102,8,103,6],[103,6,104,4],[103,7,104,5],[103,8,104,6],[103,15,104,13,"error"],[103,20,104,18],[103,22,104,20],[104,8,105,6,"console"],[104,15,105,13],[104,16,105,14,"error"],[104,21,105,19],[104,22,105,20],[104,49,105,47],[104,51,105,49,"error"],[104,56,105,54],[104,57,105,55],[105,6,106,4],[106,4,107,2],[106,5,107,3],[107,4,109,2],[108,4,110,2,"persistData"],[108,15,110,13],[108,17,110,15],[108,23,110,22,"updatedState"],[108,35,110,54],[108,39,110,59],[109,6,111,4],[109,10,111,8],[110,8,112,6],[110,14,112,12,"currentState"],[110,26,112,24],[110,29,112,27,"get"],[110,32,112,30],[110,33,112,31],[110,34,112,32],[111,8,113,6],[111,14,113,12,"dataToStore"],[111,25,113,23],[111,28,113,26],[112,10,114,8,"totalPoints"],[112,21,114,19],[112,23,114,21,"updatedState"],[112,35,114,33],[112,36,114,34,"totalPoints"],[112,47,114,45],[112,51,114,49,"currentState"],[112,63,114,61],[112,64,114,62,"totalPoints"],[112,75,114,73],[113,10,115,8,"currentLevel"],[113,22,115,20],[113,24,115,22,"updatedState"],[113,36,115,34],[113,37,115,35,"currentLevel"],[113,49,115,47],[113,53,115,51,"currentState"],[113,65,115,63],[113,66,115,64,"currentLevel"],[113,78,115,76],[114,10,116,8,"currentStreak"],[114,23,116,21],[114,25,116,23,"updatedState"],[114,37,116,35],[114,38,116,36,"currentStreak"],[114,51,116,49],[114,55,116,53,"currentState"],[114,67,116,65],[114,68,116,66,"currentStreak"],[114,81,116,79],[115,10,117,8,"longestStreak"],[115,23,117,21],[115,25,117,23,"updatedState"],[115,37,117,35],[115,38,117,36,"longestStreak"],[115,51,117,49],[115,55,117,53,"currentState"],[115,67,117,65],[115,68,117,66,"longestStreak"],[115,81,117,79],[116,10,118,8,"tasksCompleted"],[116,24,118,22],[116,26,118,24,"updatedState"],[116,38,118,36],[116,39,118,37,"tasksCompleted"],[116,53,118,51],[116,57,118,55,"currentState"],[116,69,118,67],[116,70,118,68,"tasksCompleted"],[116,84,118,82],[117,10,119,8,"badges"],[117,16,119,14],[117,18,119,16,"updatedState"],[117,30,119,28],[117,31,119,29,"badges"],[117,37,119,35],[117,41,119,39,"currentState"],[117,53,119,51],[117,54,119,52,"badges"],[117,60,119,58],[118,10,120,8,"lastActiveDate"],[118,24,120,22],[118,26,120,24],[118,30,120,28,"Date"],[118,34,120,32],[118,35,120,33],[118,36,120,34],[118,37,120,35,"toISOString"],[118,48,120,46],[118,49,120,47],[119,8,121,6],[119,9,121,7],[120,8,123,6],[120,14,123,12,"AsyncStorage"],[120,26,123,24],[120,27,123,24,"default"],[120,34,123,24],[120,35,123,25,"setItem"],[120,42,123,32],[120,43,123,33,"STORAGE_KEY"],[120,54,123,44],[120,56,123,46,"JSON"],[120,60,123,50],[120,61,123,51,"stringify"],[120,70,123,60],[120,71,123,61,"dataToStore"],[120,82,123,72],[120,83,123,73],[120,84,123,74],[121,6,124,4],[121,7,124,5],[121,8,124,6],[121,15,124,13,"error"],[121,20,124,18],[121,22,124,20],[122,8,125,6,"console"],[122,15,125,13],[122,16,125,14,"error"],[122,21,125,19],[122,22,125,20],[122,52,125,50],[122,54,125,52,"error"],[122,59,125,57],[122,60,125,58],[123,6,126,4],[124,4,127,2],[124,5,127,3],[125,4,129,2],[126,4,130,2,"addExperience"],[126,17,130,15],[126,19,130,17],[126,25,130,24,"points"],[126,31,130,38],[126,35,130,43],[127,6,131,4],[127,12,131,10,"state"],[127,17,131,15],[127,20,131,18,"get"],[127,23,131,21],[127,24,131,22],[127,25,131,23],[128,6,132,4],[128,12,132,10,"newPoints"],[128,21,132,19],[128,24,132,22,"state"],[128,29,132,27],[128,30,132,28,"totalPoints"],[128,41,132,39],[128,44,132,42,"points"],[128,50,132,48],[130,6,134,4],[131,6,135,4],[131,10,135,8,"newLevel"],[131,18,135,16],[131,21,135,19,"state"],[131,26,135,24],[131,27,135,25,"currentLevel"],[131,39,135,37],[132,6,136,4],[132,13,136,11,"newLevel"],[132,21,136,19],[132,24,136,22,"LEVEL_THRESHOLDS"],[132,40,136,38],[132,41,136,39,"length"],[132,47,136,45],[132,50,136,48],[132,51,136,49],[132,55,136,53,"newPoints"],[132,64,136,62],[132,68,136,66,"LEVEL_THRESHOLDS"],[132,84,136,82],[132,85,136,83,"newLevel"],[132,93,136,91],[132,94,136,92],[132,96,136,94],[133,8,137,6,"newLevel"],[133,16,137,14],[133,18,137,16],[134,6,138,4],[135,6,140,4],[135,12,140,10,"leveledUp"],[135,21,140,19],[135,24,140,22,"newLevel"],[135,32,140,30],[135,35,140,33,"state"],[135,40,140,38],[135,41,140,39,"currentLevel"],[135,53,140,51],[137,6,142,4],[138,6,143,4],[138,12,143,10,"updatedState"],[138,24,143,22],[138,27,143,25],[139,8,144,6,"totalPoints"],[139,19,144,17],[139,21,144,19,"newPoints"],[139,30,144,28],[140,8,145,6,"currentLevel"],[140,20,145,18],[140,22,145,20,"newLevel"],[141,6,146,4],[141,7,146,5],[142,6,148,4,"set"],[142,9,148,7],[142,10,148,8,"updatedState"],[142,22,148,20],[142,23,148,21],[144,6,150,4],[145,6,151,4],[145,12,151,11,"get"],[145,15,151,14],[145,16,151,15],[145,17,151,16],[145,18,151,25,"persistData"],[145,29,151,36],[145,30,151,37,"updatedState"],[145,42,151,49],[145,43,151,50],[147,6,153,4],[148,6,154,4],[148,10,154,8,"leveledUp"],[148,19,154,17],[148,21,154,19],[149,8,155,6],[149,14,155,12],[149,18,155,12,"levelUp"],[149,38,155,19],[149,39,155,19,"levelUp"],[149,46,155,19],[149,48,155,20],[149,49,155,21],[151,8,157,6],[152,8,158,6],[152,12,158,10,"newLevel"],[152,20,158,18],[152,25,158,23],[152,26,158,24],[152,28,158,26],[153,10,159,8],[153,16,159,14,"get"],[153,19,159,17],[153,20,159,18],[153,21,159,19],[153,22,159,20,"addBadge"],[153,30,159,28],[153,31,159,29,"AVAILABLE_BADGES"],[153,47,159,45],[153,48,159,46,"ROMANCE_EXPERT"],[153,62,159,60],[153,63,159,61],[154,8,160,6],[154,9,160,7],[154,15,160,13],[154,19,160,17,"newLevel"],[154,27,160,25],[154,32,160,30],[154,34,160,32],[154,36,160,34],[155,10,161,8],[155,16,161,14,"get"],[155,19,161,17],[155,20,161,18],[155,21,161,19],[155,22,161,20,"addBadge"],[155,30,161,28],[155,31,161,29,"AVAILABLE_BADGES"],[155,47,161,45],[155,48,161,46,"LOVE_GURU"],[155,57,161,55],[155,58,161,56],[156,8,162,6],[156,9,162,7],[156,15,162,13],[156,19,162,17,"newLevel"],[156,27,162,25],[156,32,162,30],[156,34,162,32],[156,36,162,34],[157,10,163,8],[157,16,163,14,"get"],[157,19,163,17],[157,20,163,18],[157,21,163,19],[157,22,163,20,"addBadge"],[157,30,163,28],[157,31,163,29,"AVAILABLE_BADGES"],[157,47,163,45],[157,48,163,46,"RELATIONSHIP_CHAMPION"],[157,69,163,67],[157,70,163,68],[158,8,164,6],[159,6,165,4],[161,6,167,4],[162,6,168,4],[162,10,168,8,"newPoints"],[162,19,168,17],[162,23,168,21],[162,27,168,25],[162,31,168,29],[162,32,168,30,"state"],[162,37,168,35],[162,38,168,36,"badges"],[162,44,168,42],[162,45,168,43,"includes"],[162,53,168,51],[162,54,168,52,"AVAILABLE_BADGES"],[162,70,168,68],[162,71,168,69,"POINTS_MASTER"],[162,84,168,82],[162,85,168,83],[162,87,168,85],[163,8,169,6],[163,14,169,12,"get"],[163,17,169,15],[163,18,169,16],[163,19,169,17],[163,20,169,18,"addBadge"],[163,28,169,26],[163,29,169,27,"AVAILABLE_BADGES"],[163,45,169,43],[163,46,169,44,"POINTS_MASTER"],[163,59,169,57],[163,60,169,58],[164,6,170,4],[165,4,171,2],[165,5,171,3],[166,4,173,2],[167,4,174,2,"completeTask"],[167,16,174,14],[167,18,174,16],[167,24,174,23,"taskPoints"],[167,34,174,41],[167,38,174,46],[168,6,175,4],[168,12,175,10,"state"],[168,17,175,15],[168,20,175,18,"get"],[168,23,175,21],[168,24,175,22],[168,25,175,23],[169,6,176,4],[169,12,176,10,"newTasksCompleted"],[169,29,176,27],[169,32,176,30,"state"],[169,37,176,35],[169,38,176,36,"tasksCompleted"],[169,52,176,50],[169,55,176,53],[169,56,176,54],[171,6,178,4],[172,6,179,4],[172,12,179,10,"updatedState"],[172,24,179,22],[172,27,179,25],[173,8,180,6,"tasksCompleted"],[173,22,180,20],[173,24,180,22,"newTasksCompleted"],[174,6,181,4],[174,7,181,5],[175,6,183,4,"set"],[175,9,183,7],[175,10,183,8,"updatedState"],[175,22,183,20],[175,23,183,21],[177,6,185,4],[178,6,186,4],[178,12,186,10,"get"],[178,15,186,13],[178,16,186,14],[178,17,186,15],[178,18,186,16,"addExperience"],[178,31,186,29],[178,32,186,30,"taskPoints"],[178,42,186,40],[178,43,186,41],[180,6,188,4],[181,6,189,4],[181,12,189,10,"get"],[181,15,189,13],[181,16,189,14],[181,17,189,15],[181,18,189,16,"updateStreak"],[181,30,189,28],[181,31,189,29],[181,32,189,30],[183,6,191,4],[184,6,192,4],[184,12,192,11,"get"],[184,15,192,14],[184,16,192,15],[184,17,192,16],[184,18,192,25,"persistData"],[184,29,192,36],[184,30,192,37,"updatedState"],[184,42,192,49],[184,43,192,50],[186,6,194,4],[187,6,195,4],[187,12,195,10],[187,16,195,10,"taskComplete"],[187,36,195,22],[187,37,195,22,"taskComplete"],[187,49,195,22],[187,51,195,23],[187,52,195,24],[189,6,197,4],[190,6,198,4],[190,10,198,8,"newTasksCompleted"],[190,27,198,25],[190,32,198,30],[190,33,198,31],[190,35,198,33],[191,8,199,6],[191,14,199,12,"get"],[191,17,199,15],[191,18,199,16],[191,19,199,17],[191,20,199,18,"addBadge"],[191,28,199,26],[191,29,199,27,"AVAILABLE_BADGES"],[191,45,199,43],[191,46,199,44,"FIRST_TASK"],[191,56,199,54],[191,57,199,55],[192,6,200,4],[192,7,200,5],[192,13,200,11],[192,17,200,15,"newTasksCompleted"],[192,34,200,32],[192,39,200,37],[192,42,200,40],[192,44,200,42],[193,8,201,6],[193,14,201,12,"get"],[193,17,201,15],[193,18,201,16],[193,19,201,17],[193,20,201,18,"addBadge"],[193,28,201,26],[193,29,201,27,"AVAILABLE_BADGES"],[193,45,201,43],[193,46,201,44,"HUNDRED_CLUB"],[193,58,201,56],[193,59,201,57],[194,6,202,4],[195,4,203,2],[195,5,203,3],[196,4,205,2],[197,4,206,2,"updateStreak"],[197,16,206,14],[197,18,206,16],[197,24,206,16,"updateStreak"],[197,25,206,16],[197,30,206,28],[198,6,207,4],[198,12,207,10,"state"],[198,17,207,15],[198,20,207,18,"get"],[198,23,207,21],[198,24,207,22],[198,25,207,23],[199,6,208,4],[199,12,208,10,"today"],[199,17,208,15],[199,20,208,18],[199,24,208,22,"Date"],[199,28,208,26],[199,29,208,27],[199,30,208,28],[200,6,209,4],[200,12,209,10,"todayString"],[200,23,209,21],[200,26,209,24,"today"],[200,31,209,29],[200,32,209,30,"toDateString"],[200,44,209,42],[200,45,209,43],[200,46,209,44],[202,6,211,4],[203,6,212,4],[203,10,212,8],[203,11,212,9,"state"],[203,16,212,14],[203,17,212,15,"lastActiveDate"],[203,31,212,29],[203,33,212,31],[204,8,213,6],[204,14,213,12,"updatedState"],[204,26,213,24],[204,29,213,27],[205,10,214,8,"currentStreak"],[205,23,214,21],[205,25,214,23],[205,26,214,24],[206,10,215,8,"longestStreak"],[206,23,215,21],[206,25,215,23,"Math"],[206,29,215,27],[206,30,215,28,"max"],[206,33,215,31],[206,34,215,32],[206,35,215,33],[206,37,215,35,"state"],[206,42,215,40],[206,43,215,41,"longestStreak"],[206,56,215,54],[206,57,215,55],[207,10,216,8,"lastActiveDate"],[207,24,216,22],[207,26,216,24,"today"],[207,31,216,29],[207,32,216,30,"toISOString"],[207,43,216,41],[207,44,216,42],[208,8,217,6],[208,9,217,7],[209,8,219,6,"set"],[209,11,219,9],[209,12,219,10,"updatedState"],[209,24,219,22],[209,25,219,23],[210,8,220,6],[210,14,220,13,"get"],[210,17,220,16],[210,18,220,17],[210,19,220,18],[210,20,220,27,"persistData"],[210,31,220,38],[210,32,220,39,"updatedState"],[210,44,220,51],[210,45,220,52],[212,8,222,6],[213,8,223,6],[213,12,223,10,"state"],[213,17,223,15],[213,18,223,16,"currentStreak"],[213,31,223,29],[213,36,223,34],[213,37,223,35],[213,39,223,37],[214,10,224,8],[214,16,224,14,"get"],[214,19,224,17],[214,20,224,18],[214,21,224,19],[214,22,224,20,"addBadge"],[214,30,224,28],[214,31,224,29,"AVAILABLE_BADGES"],[214,47,224,45],[214,48,224,46,"FIRST_TASK"],[214,58,224,56],[214,59,224,57],[215,8,225,6],[216,8,226,6],[217,6,227,4],[218,6,229,4],[218,12,229,10,"lastActiveDate"],[218,26,229,24],[218,29,229,27],[218,33,229,31,"Date"],[218,37,229,35],[218,38,229,36,"state"],[218,43,229,41],[218,44,229,42,"lastActiveDate"],[218,58,229,56],[218,59,229,57],[219,6,230,4],[219,12,230,10,"lastActiveDateString"],[219,32,230,30],[219,35,230,33,"lastActiveDate"],[219,49,230,47],[219,50,230,48,"toDateString"],[219,62,230,60],[219,63,230,61],[219,64,230,62],[221,6,232,4],[222,6,233,4],[222,10,233,8,"lastActiveDateString"],[222,30,233,28],[222,35,233,33,"todayString"],[222,46,233,44],[222,48,233,46],[223,8,234,6],[224,6,235,4],[226,6,237,4],[227,6,238,4],[227,12,238,10,"diffTime"],[227,20,238,18],[227,23,238,21,"today"],[227,28,238,26],[227,29,238,27,"getTime"],[227,36,238,34],[227,37,238,35],[227,38,238,36],[227,41,238,39,"lastActiveDate"],[227,55,238,53],[227,56,238,54,"getTime"],[227,63,238,61],[227,64,238,62],[227,65,238,63],[228,6,239,4],[228,12,239,10,"diffDays"],[228,20,239,18],[228,23,239,21,"Math"],[228,27,239,25],[228,28,239,26,"floor"],[228,33,239,31],[228,34,239,32,"diffTime"],[228,42,239,40],[228,46,239,44],[228,50,239,48],[228,53,239,51],[228,55,239,53],[228,58,239,56],[228,60,239,58],[228,63,239,61],[228,65,239,63],[228,66,239,64],[228,67,239,65],[229,6,241,4],[229,10,241,8,"newStreak"],[229,19,241,17],[230,6,242,4],[230,10,242,8,"newLongestStreak"],[230,26,242,24],[231,6,244,4],[231,10,244,8,"diffDays"],[231,18,244,16],[231,23,244,21],[231,24,244,22],[231,26,244,24],[232,8,245,6],[233,8,246,6,"newStreak"],[233,17,246,15],[233,20,246,18,"state"],[233,25,246,23],[233,26,246,24,"currentStreak"],[233,39,246,37],[233,42,246,40],[233,43,246,41],[234,8,247,6,"newLongestStreak"],[234,24,247,22],[234,27,247,25,"Math"],[234,31,247,29],[234,32,247,30,"max"],[234,35,247,33],[234,36,247,34,"newStreak"],[234,45,247,43],[234,47,247,45,"state"],[234,52,247,50],[234,53,247,51,"longestStreak"],[234,66,247,64],[234,67,247,65],[235,6,248,4],[235,7,248,5],[235,13,248,11],[235,17,248,15,"diffDays"],[235,25,248,23],[235,28,248,26],[235,29,248,27],[235,31,248,29],[236,8,249,6],[237,8,250,6,"newStreak"],[237,17,250,15],[237,20,250,18],[237,21,250,19],[238,8,251,6,"newLongestStreak"],[238,24,251,22],[238,27,251,25,"state"],[238,32,251,30],[238,33,251,31,"longestStreak"],[238,46,251,44],[238,47,251,45],[238,48,251,46],[239,6,252,4],[239,7,252,5],[239,13,252,11],[240,8,253,6],[241,8,254,6],[242,6,255,4],[243,6,257,4],[243,12,257,10,"updatedState"],[243,24,257,22],[243,27,257,25],[244,8,258,6,"currentStreak"],[244,21,258,19],[244,23,258,21,"newStreak"],[244,32,258,30],[245,8,259,6,"longestStreak"],[245,21,259,19],[245,23,259,21,"newLongestStreak"],[245,39,259,37],[246,8,260,6,"lastActiveDate"],[246,22,260,20],[246,24,260,22,"today"],[246,29,260,27],[246,30,260,28,"toISOString"],[246,41,260,39],[246,42,260,40],[247,6,261,4],[247,7,261,5],[248,6,263,4,"set"],[248,9,263,7],[248,10,263,8,"updatedState"],[248,22,263,20],[248,23,263,21],[250,6,265,4],[251,6,266,4],[251,12,266,11,"get"],[251,15,266,14],[251,16,266,15],[251,17,266,16],[251,18,266,25,"persistData"],[251,29,266,36],[251,30,266,37,"updatedState"],[251,42,266,49],[251,43,266,50],[253,6,268,4],[254,6,269,4],[254,10,269,8,"newStreak"],[254,19,269,17],[254,24,269,22],[254,25,269,23],[254,27,269,25],[255,8,270,6],[255,14,270,12,"get"],[255,17,270,15],[255,18,270,16],[255,19,270,17],[255,20,270,18,"addBadge"],[255,28,270,26],[255,29,270,27,"AVAILABLE_BADGES"],[255,45,270,43],[255,46,270,44,"WEEK_WARRIOR"],[255,58,270,56],[255,59,270,57],[256,6,271,4],[256,7,271,5],[256,13,271,11],[256,17,271,15,"newStreak"],[256,26,271,24],[256,31,271,29],[256,33,271,31],[256,35,271,33],[257,8,272,6],[257,14,272,12,"get"],[257,17,272,15],[257,18,272,16],[257,19,272,17],[257,20,272,18,"addBadge"],[257,28,272,26],[257,29,272,27,"AVAILABLE_BADGES"],[257,45,272,43],[257,46,272,44,"MONTH_MASTER"],[257,58,272,56],[257,59,272,57],[258,6,273,4],[258,7,273,5],[258,13,273,11],[258,17,273,15,"newStreak"],[258,26,273,24],[258,31,273,29],[258,33,273,31],[258,35,273,33],[259,8,274,6],[259,14,274,12,"get"],[259,17,274,15],[259,18,274,16],[259,19,274,17],[259,20,274,18,"addBadge"],[259,28,274,26],[259,29,274,27,"AVAILABLE_BADGES"],[259,45,274,43],[259,46,274,44,"STREAK_LEGEND"],[259,59,274,57],[259,60,274,58],[260,6,275,4],[261,4,276,2],[261,5,276,3],[262,4,278,2],[263,4,279,2,"breakStreak"],[263,15,279,13],[263,17,279,15],[263,23,279,15,"breakStreak"],[263,24,279,15],[263,29,279,27],[264,6,280,4],[264,12,280,10,"updatedState"],[264,24,280,22],[264,27,280,25],[265,8,281,6,"currentStreak"],[265,21,281,19],[265,23,281,21],[266,6,282,4],[266,7,282,5],[267,6,284,4,"set"],[267,9,284,7],[267,10,284,8,"updatedState"],[267,22,284,20],[267,23,284,21],[268,6,285,4],[268,12,285,11,"get"],[268,15,285,14],[268,16,285,15],[268,17,285,16],[268,18,285,25,"persistData"],[268,29,285,36],[268,30,285,37,"updatedState"],[268,42,285,49],[268,43,285,50],[269,4,286,2],[269,5,286,3],[270,4,288,2],[271,4,289,2,"addBadge"],[271,12,289,10],[271,14,289,12],[271,20,289,19,"badge"],[271,25,289,32],[271,29,289,37],[272,6,290,4],[272,12,290,10,"state"],[272,17,290,15],[272,20,290,18,"get"],[272,23,290,21],[272,24,290,22],[272,25,290,23],[273,6,292,4],[273,10,292,8],[273,11,292,9,"state"],[273,16,292,14],[273,17,292,15,"badges"],[273,23,292,21],[273,24,292,22,"includes"],[273,32,292,30],[273,33,292,31,"badge"],[273,38,292,36],[273,39,292,37],[273,41,292,39],[274,8,293,6],[274,14,293,12,"updatedState"],[274,26,293,24],[274,29,293,27],[275,10,294,8,"badges"],[275,16,294,14],[275,18,294,16],[275,19,294,17],[275,22,294,20,"state"],[275,27,294,25],[275,28,294,26,"badges"],[275,34,294,32],[275,36,294,34,"badge"],[275,41,294,39],[276,8,295,6],[276,9,295,7],[277,8,297,6,"set"],[277,11,297,9],[277,12,297,10,"updatedState"],[277,24,297,22],[277,25,297,23],[278,8,298,6],[278,14,298,13,"get"],[278,17,298,16],[278,18,298,17],[278,19,298,18],[278,20,298,27,"persistData"],[278,31,298,38],[278,32,298,39,"updatedState"],[278,44,298,51],[278,45,298,52],[280,8,300,6],[281,8,301,6],[281,14,301,12],[281,18,301,12,"achievement"],[281,38,301,23],[281,39,301,23,"achievement"],[281,50,301,23],[281,52,301,24],[281,53,301,25],[282,6,302,4],[283,4,303,2],[283,5,303,3],[284,4,305,2],[285,4,306,2,"resetProgress"],[285,17,306,15],[285,19,306,17],[285,25,306,17,"resetProgress"],[285,26,306,17],[285,31,306,29],[286,6,307,4],[286,12,307,10,"resetState"],[286,22,307,20],[286,25,307,23],[287,8,308,6,"totalPoints"],[287,19,308,17],[287,21,308,19],[287,22,308,20],[288,8,309,6,"currentLevel"],[288,20,309,18],[288,22,309,20],[288,23,309,21],[289,8,310,6,"currentStreak"],[289,21,310,19],[289,23,310,21],[289,24,310,22],[290,8,311,6,"longestStreak"],[290,21,311,19],[290,23,311,21],[290,24,311,22],[291,8,312,6,"tasksCompleted"],[291,22,312,20],[291,24,312,22],[291,25,312,23],[292,8,313,6,"badges"],[292,14,313,12],[292,16,313,14],[292,18,313,16],[293,8,314,6,"lastActiveDate"],[293,22,314,20],[293,24,314,22],[294,6,315,4],[294,7,315,5],[295,6,317,4,"set"],[295,9,317,7],[295,10,317,8,"resetState"],[295,20,317,18],[295,21,317,19],[297,6,319,4],[298,6,320,4],[298,10,320,8],[299,8,321,6],[299,14,321,12,"AsyncStorage"],[299,26,321,24],[299,27,321,24,"default"],[299,34,321,24],[299,35,321,25,"removeItem"],[299,45,321,35],[299,46,321,36,"STORAGE_KEY"],[299,57,321,47],[299,58,321,48],[300,6,322,4],[300,7,322,5],[300,8,322,6],[300,15,322,13,"error"],[300,20,322,18],[300,22,322,20],[301,8,323,6,"console"],[301,15,323,13],[301,16,323,14,"error"],[301,21,323,19],[301,22,323,20],[301,50,323,48],[301,52,323,50,"error"],[301,57,323,55],[301,58,323,56],[302,6,324,4],[303,4,325,2],[303,5,325,3],[304,4,327,2],[305,4,328,2,"getExperienceForNextLevel"],[305,29,328,27],[305,31,328,29,"getExperienceForNextLevel"],[305,32,328,29],[305,37,328,35],[306,6,329,4],[306,12,329,10,"state"],[306,17,329,15],[306,20,329,18,"get"],[306,23,329,21],[306,24,329,22],[306,25,329,23],[307,6,330,4],[307,10,330,8,"state"],[307,15,330,13],[307,16,330,14,"currentLevel"],[307,28,330,26],[307,32,330,30,"LEVEL_THRESHOLDS"],[307,48,330,46],[307,49,330,47,"length"],[307,55,330,53],[307,58,330,56],[307,59,330,57],[307,61,330,59],[308,8,331,6],[308,15,331,13],[308,16,331,14],[308,17,331,15],[308,18,331,16],[309,6,332,4],[310,6,333,4],[310,13,333,11,"LEVEL_THRESHOLDS"],[310,29,333,27],[310,30,333,28,"state"],[310,35,333,33],[310,36,333,34,"currentLevel"],[310,48,333,46],[310,49,333,47],[310,52,333,50,"state"],[310,57,333,55],[310,58,333,56,"totalPoints"],[310,69,333,67],[311,4,334,2],[311,5,334,3],[312,4,336,2,"getProgressPercentage"],[312,25,336,23],[312,27,336,25,"getProgressPercentage"],[312,28,336,25],[312,33,336,31],[313,6,337,4],[313,12,337,10,"state"],[313,17,337,15],[313,20,337,18,"get"],[313,23,337,21],[313,24,337,22],[313,25,337,23],[314,6,338,4],[314,10,338,8,"state"],[314,15,338,13],[314,16,338,14,"currentLevel"],[314,28,338,26],[314,32,338,30,"LEVEL_THRESHOLDS"],[314,48,338,46],[314,49,338,47,"length"],[314,55,338,53],[314,58,338,56],[314,59,338,57],[314,61,338,59],[315,8,339,6],[315,15,339,13],[315,18,339,16],[315,19,339,17],[315,20,339,18],[316,6,340,4],[317,6,342,4],[317,12,342,10,"currentLevelStart"],[317,29,342,27],[317,32,342,30,"LEVEL_THRESHOLDS"],[317,48,342,46],[317,49,342,47,"state"],[317,54,342,52],[317,55,342,53,"currentLevel"],[317,67,342,65],[317,70,342,68],[317,71,342,69],[317,72,342,70],[318,6,343,4],[318,12,343,10,"nextLevelStart"],[318,26,343,24],[318,29,343,27,"LEVEL_THRESHOLDS"],[318,45,343,43],[318,46,343,44,"state"],[318,51,343,49],[318,52,343,50,"currentLevel"],[318,64,343,62],[318,65,343,63],[319,6,344,4],[319,12,344,10,"currentProgress"],[319,27,344,25],[319,30,344,28,"state"],[319,35,344,33],[319,36,344,34,"totalPoints"],[319,47,344,45],[319,50,344,48,"currentLevelStart"],[319,67,344,65],[320,6,345,4],[320,12,345,10,"totalNeeded"],[320,23,345,21],[320,26,345,24,"nextLevelStart"],[320,40,345,38],[320,43,345,41,"currentLevelStart"],[320,60,345,58],[321,6,347,4],[321,13,347,11,"Math"],[321,17,347,15],[321,18,347,16,"floor"],[321,23,347,21],[321,24,347,23,"currentProgress"],[321,39,347,38],[321,42,347,41,"totalNeeded"],[321,53,347,52],[321,56,347,56],[321,59,347,59],[321,60,347,60],[322,4,348,2],[322,5,348,3],[323,4,350,2,"shouldLevelUp"],[323,17,350,15],[323,19,350,17,"shouldLevelUp"],[323,20,350,17],[323,25,350,23],[324,6,351,4],[324,12,351,10,"state"],[324,17,351,15],[324,20,351,18,"get"],[324,23,351,21],[324,24,351,22],[324,25,351,23],[325,6,352,4],[325,13,352,11,"state"],[325,18,352,16],[325,19,352,17,"currentLevel"],[325,31,352,29],[325,34,352,32,"LEVEL_THRESHOLDS"],[325,50,352,48],[325,51,352,49,"length"],[325,57,352,55],[325,60,352,58],[325,61,352,59],[325,65,353,11,"state"],[325,70,353,16],[325,71,353,17,"totalPoints"],[325,82,353,28],[325,86,353,32,"LEVEL_THRESHOLDS"],[325,102,353,48],[325,103,353,49,"state"],[325,108,353,54],[325,109,353,55,"currentLevel"],[325,121,353,67],[325,122,353,68],[326,4,354,2],[327,2,355,0],[327,3,355,1],[327,4,355,2],[327,5,355,3],[329,2,357,0],[330,2,358,0,"useGameStore"],[330,14,358,12],[330,15,358,13,"getState"],[330,23,358,21],[330,24,358,22],[330,25,358,23],[330,26,358,24,"loadPersistedData"],[330,43,358,41],[330,44,358,42],[330,45,358,43],[331,0,358,44],[331,3]],"functionMap":{"names":["<global>","calculateLevelUpPoints","generateLevelThresholds","create$argument_0","loadPersistedData","persistData","addExperience","completeTask","updateStreak","breakStreak","addBadge","resetProgress","getExperienceForNextLevel","getProgressPercentage","shouldLevelUp"],"mappings":"AAA;+BCiC;CDE;gCEG;CFM;uCGmB;qBCY;GD+B;eEG;GFiB;iBGG;GHyC;gBIG;GJ6B;gBKG;GLsE;eMG;GNO;YOG;GPc;iBQG;GRmB;6BSG;GTM;yBUE;GVY;iBWE;GXI;EHC"},"hasCjsExports":false},"type":"js/module"}]}