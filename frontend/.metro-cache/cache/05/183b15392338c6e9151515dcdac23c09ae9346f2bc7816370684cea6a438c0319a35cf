{"dependencies":[{"name":"invariant","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":34,"index":34}}],"key":"4HPAaDQ25ZwZ2dzTLatXuUucZUM=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"],"imports":1}},{"name":"./Base64","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":76},"end":{"line":3,"column":35,"index":111}}],"key":"n1MyTQaw9Ongoku/usWwSyOvS2k=","exportNames":["*"],"imports":1}},{"name":"./Errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":112},"end":{"line":4,"column":38,"index":150}}],"key":"Hc24lHtszv0n4sfQahKq/F+wSE4=","exportNames":["*"],"imports":1}},{"name":"./Fetch","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":151},"end":{"line":5,"column":39,"index":190}}],"key":"PeuZJEzLUzE71YmlrqcRrF53N6s=","exportNames":["*"],"imports":1}},{"name":"./TokenRequest.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":191},"end":{"line":6,"column":50,"index":241}}],"key":"nhvkV9DwU2zmYd/Ws+l9/RADlsc=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  exports.getCurrentTimeInSeconds = getCurrentTimeInSeconds;\n  Object.defineProperty(exports, \"TokenResponse\", {\n    enumerable: true,\n    get: function () {\n      return TokenResponse;\n    }\n  });\n  Object.defineProperty(exports, \"Request\", {\n    enumerable: true,\n    get: function () {\n      return Request;\n    }\n  });\n  Object.defineProperty(exports, \"TokenRequest\", {\n    enumerable: true,\n    get: function () {\n      return TokenRequest;\n    }\n  });\n  Object.defineProperty(exports, \"AccessTokenRequest\", {\n    enumerable: true,\n    get: function () {\n      return AccessTokenRequest;\n    }\n  });\n  Object.defineProperty(exports, \"RefreshTokenRequest\", {\n    enumerable: true,\n    get: function () {\n      return RefreshTokenRequest;\n    }\n  });\n  Object.defineProperty(exports, \"RevokeTokenRequest\", {\n    enumerable: true,\n    get: function () {\n      return RevokeTokenRequest;\n    }\n  });\n  exports.exchangeCodeAsync = exchangeCodeAsync;\n  exports.refreshAsync = refreshAsync;\n  exports.revokeAsync = revokeAsync;\n  exports.fetchUserInfoAsync = fetchUserInfoAsync;\n  var _invariant = require(_dependencyMap[0], \"invariant\");\n  var invariant = _interopDefault(_invariant);\n  var _reactNativeWebDistExportsPlatform = require(_dependencyMap[1], \"react-native-web/dist/exports/Platform\");\n  var Platform = _interopDefault(_reactNativeWebDistExportsPlatform);\n  var _Base = require(_dependencyMap[2], \"./Base64\");\n  var Base64 = _interopNamespace(_Base);\n  var _Errors = require(_dependencyMap[3], \"./Errors\");\n  var _Fetch = require(_dependencyMap[4], \"./Fetch\");\n  var _TokenRequestTypes = require(_dependencyMap[5], \"./TokenRequest.types\");\n  /**\n   * Returns the current time in seconds.\n   */\n  function getCurrentTimeInSeconds() {\n    return Math.floor(Date.now() / 1000);\n  }\n  /**\n   * Token Response.\n   *\n   * [Section 5.1](https://tools.ietf.org/html/rfc6749#section-5.1)\n   */\n  class TokenResponse {\n    /**\n     * Determines whether a token refresh request must be made to refresh the tokens\n     *\n     * @param token\n     * @param secondsMargin\n     */\n    static isTokenFresh(token,\n    /**\n     * -10 minutes in seconds\n     */\n    secondsMargin = 60 * 10 * -1) {\n      if (!token) {\n        return false;\n      }\n      if (token.expiresIn) {\n        const now = getCurrentTimeInSeconds();\n        return now < token.issuedAt + token.expiresIn + secondsMargin;\n      }\n      // if there is no expiration time but we have an access token, it is assumed to never expire\n      return true;\n    }\n    /**\n     * Creates a `TokenResponse` from query parameters returned from an `AuthRequest`.\n     *\n     * @param params\n     */\n    static fromQueryParams(params) {\n      return new TokenResponse({\n        accessToken: params.access_token,\n        refreshToken: params.refresh_token,\n        scope: params.scope,\n        state: params.state,\n        idToken: params.id_token,\n        tokenType: params.token_type,\n        expiresIn: params.expires_in,\n        issuedAt: params.issued_at\n      });\n    }\n\n    /**\n     * Contains the unprocessed token response. Use it to access properties which aren't part of RFC 6749.\n     * */\n\n    constructor(response, rawResponse) {\n      this.rawResponse = rawResponse;\n      this.accessToken = response.accessToken;\n      this.tokenType = response.tokenType ?? 'bearer';\n      this.expiresIn = response.expiresIn;\n      this.refreshToken = response.refreshToken;\n      this.scope = response.scope;\n      this.state = response.state;\n      this.idToken = response.idToken;\n      this.issuedAt = response.issuedAt ?? getCurrentTimeInSeconds();\n    }\n    applyResponseConfig(response) {\n      this.accessToken = response.accessToken ?? this.accessToken;\n      this.tokenType = response.tokenType ?? this.tokenType ?? 'bearer';\n      this.expiresIn = response.expiresIn ?? this.expiresIn;\n      this.refreshToken = response.refreshToken ?? this.refreshToken;\n      this.scope = response.scope ?? this.scope;\n      this.state = response.state ?? this.state;\n      this.idToken = response.idToken ?? this.idToken;\n      this.issuedAt = response.issuedAt ?? this.issuedAt ?? getCurrentTimeInSeconds();\n    }\n    getRequestConfig() {\n      return {\n        accessToken: this.accessToken,\n        idToken: this.idToken,\n        refreshToken: this.refreshToken,\n        scope: this.scope,\n        state: this.state,\n        tokenType: this.tokenType,\n        issuedAt: this.issuedAt,\n        expiresIn: this.expiresIn\n      };\n    }\n    async refreshAsync(config, discovery) {\n      const request = new RefreshTokenRequest({\n        ...config,\n        refreshToken: this.refreshToken\n      });\n      const response = await request.performAsync(discovery);\n      // Custom: reuse the refresh token if one wasn't returned\n      response.refreshToken = response.refreshToken ?? this.refreshToken;\n      const json = response.getRequestConfig();\n      this.applyResponseConfig(json);\n      return this;\n    }\n    shouldRefresh() {\n      // no refresh token available and token has expired\n      return !(TokenResponse.isTokenFresh(this) || !this.refreshToken);\n    }\n  }\n  class Request {\n    constructor(request) {\n      this.request = request;\n    }\n    async performAsync(discovery) {\n      throw new Error('performAsync must be extended');\n    }\n    getRequestConfig() {\n      throw new Error('getRequestConfig must be extended');\n    }\n    getQueryBody() {\n      throw new Error('getQueryBody must be extended');\n    }\n  }\n  /**\n   * A generic token request.\n   */\n  class TokenRequest extends Request {\n    constructor(request, grantType) {\n      super(request);\n      this.grantType = grantType;\n      this.clientId = request.clientId;\n      this.clientSecret = request.clientSecret;\n      this.extraParams = request.extraParams;\n      this.scopes = request.scopes;\n    }\n    getHeaders() {\n      const headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n      if (typeof this.clientSecret !== 'undefined') {\n        // If client secret exists, it should be converted to base64\n        // https://tools.ietf.org/html/rfc6749#section-2.3.1\n        const encodedClientId = encodeURIComponent(this.clientId);\n        const encodedClientSecret = encodeURIComponent(this.clientSecret);\n        const credentials = `${encodedClientId}:${encodedClientSecret}`;\n        const basicAuth = Base64.encodeNoWrap(credentials);\n        headers.Authorization = `Basic ${basicAuth}`;\n      }\n      return headers;\n    }\n    async performAsync(discovery) {\n      // redirect URI must not be nil\n      (0, invariant.default)(discovery.tokenEndpoint, `Cannot invoke \\`performAsync()\\` without a valid tokenEndpoint`);\n      const response = await (0, _Fetch.requestAsync)(discovery.tokenEndpoint, {\n        dataType: 'json',\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: this.getQueryBody()\n      });\n      if ('error' in response) {\n        throw new _Errors.TokenError(response);\n      }\n      return new TokenResponse({\n        accessToken: response.access_token,\n        tokenType: response.token_type,\n        expiresIn: response.expires_in,\n        refreshToken: response.refresh_token,\n        scope: response.scope,\n        idToken: response.id_token,\n        issuedAt: response.issued_at\n      }, response);\n    }\n    getQueryBody() {\n      const queryBody = {\n        grant_type: this.grantType\n      };\n      if (!this.clientSecret) {\n        // Only add the client ID if client secret is not present, otherwise pass the client id with the secret in the request body.\n        queryBody.client_id = this.clientId;\n      }\n      if (this.scopes) {\n        queryBody.scope = this.scopes.join(' ');\n      }\n      if (this.extraParams) {\n        for (const extra in this.extraParams) {\n          if (extra in this.extraParams && !(extra in queryBody)) {\n            queryBody[extra] = this.extraParams[extra];\n          }\n        }\n      }\n      return queryBody;\n    }\n  }\n  /**\n   * Access token request. Exchange an authorization code for a user access token.\n   *\n   * [Section 4.1.3](https://tools.ietf.org/html/rfc6749#section-4.1.3)\n   */\n  class AccessTokenRequest extends TokenRequest {\n    constructor(options) {\n      (0, invariant.default)(options.redirectUri, `\\`AccessTokenRequest\\` requires a valid \\`redirectUri\\` (it must also match the one used in the auth request). Example: ${Platform.default.select({\n        web: 'https://yourwebsite.com/redirect',\n        default: 'myapp://redirect'\n      })}`);\n      (0, invariant.default)(options.code, `\\`AccessTokenRequest\\` requires a valid authorization \\`code\\`. This is what's received from the authorization server after an auth request.`);\n      super(options, _TokenRequestTypes.GrantType.AuthorizationCode);\n      this.code = options.code;\n      this.redirectUri = options.redirectUri;\n    }\n    getQueryBody() {\n      const queryBody = super.getQueryBody();\n      if (this.redirectUri) {\n        queryBody.redirect_uri = this.redirectUri;\n      }\n      if (this.code) {\n        queryBody.code = this.code;\n      }\n      return queryBody;\n    }\n    getRequestConfig() {\n      return {\n        clientId: this.clientId,\n        clientSecret: this.clientSecret,\n        grantType: this.grantType,\n        code: this.code,\n        redirectUri: this.redirectUri,\n        extraParams: this.extraParams,\n        scopes: this.scopes\n      };\n    }\n  }\n  /**\n   * Refresh request.\n   *\n   * [Section 6](https://tools.ietf.org/html/rfc6749#section-6)\n   */\n  class RefreshTokenRequest extends TokenRequest {\n    constructor(options) {\n      (0, invariant.default)(options.refreshToken, `\\`RefreshTokenRequest\\` requires a valid \\`refreshToken\\`.`);\n      super(options, _TokenRequestTypes.GrantType.RefreshToken);\n      this.refreshToken = options.refreshToken;\n    }\n    getQueryBody() {\n      const queryBody = super.getQueryBody();\n      if (this.refreshToken) {\n        queryBody.refresh_token = this.refreshToken;\n      }\n      return queryBody;\n    }\n    getRequestConfig() {\n      return {\n        clientId: this.clientId,\n        clientSecret: this.clientSecret,\n        grantType: this.grantType,\n        refreshToken: this.refreshToken,\n        extraParams: this.extraParams,\n        scopes: this.scopes\n      };\n    }\n  }\n  /**\n   * Revocation request for a given token.\n   *\n   * [Section 2.1](https://tools.ietf.org/html/rfc7009#section-2.1)\n   */\n  class RevokeTokenRequest extends Request {\n    constructor(request) {\n      super(request);\n      (0, invariant.default)(request.token, `\\`RevokeTokenRequest\\` requires a valid \\`token\\` to revoke.`);\n      this.clientId = request.clientId;\n      this.clientSecret = request.clientSecret;\n      this.token = request.token;\n      this.tokenTypeHint = request.tokenTypeHint;\n    }\n    getHeaders() {\n      const headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n      if (typeof this.clientSecret !== 'undefined' && this.clientId) {\n        // If client secret exists, it should be converted to base64\n        // https://tools.ietf.org/html/rfc6749#section-2.3.1\n        const encodedClientId = encodeURIComponent(this.clientId);\n        const encodedClientSecret = encodeURIComponent(this.clientSecret);\n        const credentials = `${encodedClientId}:${encodedClientSecret}`;\n        const basicAuth = Base64.encodeNoWrap(credentials);\n        headers.Authorization = `Basic ${basicAuth}`;\n      }\n      return headers;\n    }\n    /**\n     * Perform a token revocation request.\n     *\n     * @param discovery The `revocationEndpoint` for a provider.\n     */\n    async performAsync(discovery) {\n      (0, invariant.default)(discovery.revocationEndpoint, `Cannot invoke \\`performAsync()\\` without a valid revocationEndpoint`);\n      await (0, _Fetch.requestAsync)(discovery.revocationEndpoint, {\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: this.getQueryBody()\n      });\n      return true;\n    }\n    getRequestConfig() {\n      return {\n        clientId: this.clientId,\n        clientSecret: this.clientSecret,\n        token: this.token,\n        tokenTypeHint: this.tokenTypeHint\n      };\n    }\n    getQueryBody() {\n      const queryBody = {\n        token: this.token\n      };\n      if (this.tokenTypeHint) {\n        queryBody.token_type_hint = this.tokenTypeHint;\n      }\n      // Include client creds https://tools.ietf.org/html/rfc6749#section-2.3.1\n      if (this.clientId) {\n        queryBody.client_id = this.clientId;\n      }\n      if (this.clientSecret) {\n        queryBody.client_secret = this.clientSecret;\n      }\n      return queryBody;\n    }\n  }\n  // @needsAudit\n  /**\n   * Exchange an authorization code for an access token that can be used to get data from the provider.\n   *\n   * @param config Configuration used to exchange the code for a token.\n   * @param discovery The `tokenEndpoint` for a provider.\n   * @return Returns a discovery document with a valid `tokenEndpoint` URL.\n   */\n  function exchangeCodeAsync(config, discovery) {\n    const request = new AccessTokenRequest(config);\n    return request.performAsync(discovery);\n  }\n  // @needsAudit\n  /**\n   * Refresh an access token.\n   * - If the provider didn't return a `refresh_token` then the access token may not be refreshed.\n   * - If the provider didn't return a `expires_in` then it's assumed that the token does not expire.\n   * - Determine if a token needs to be refreshed via `TokenResponse.isTokenFresh()` or `shouldRefresh()` on an instance of `TokenResponse`.\n   *\n   * @see [Section 6](https://tools.ietf.org/html/rfc6749#section-6).\n   *\n   * @param config Configuration used to refresh the given access token.\n   * @param discovery The `tokenEndpoint` for a provider.\n   * @return Returns a discovery document with a valid `tokenEndpoint` URL.\n   */\n  function refreshAsync(config, discovery) {\n    const request = new RefreshTokenRequest(config);\n    return request.performAsync(discovery);\n  }\n  // @needsAudit\n  /**\n   * Revoke a token with a provider. This makes the token unusable, effectively requiring the user to login again.\n   *\n   * @param config Configuration used to revoke a refresh or access token.\n   * @param discovery The `revocationEndpoint` for a provider.\n   * @return Returns a discovery document with a valid `revocationEndpoint` URL. Many providers do not support this feature.\n   */\n  function revokeAsync(config, discovery) {\n    const request = new RevokeTokenRequest(config);\n    return request.performAsync(discovery);\n  }\n  /**\n   * Fetch generic user info from the provider's OpenID Connect `userInfoEndpoint` (if supported).\n   *\n   * @see [UserInfo](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo).\n   *\n   * @param config The `accessToken` for a user, returned from a code exchange or auth request.\n   * @param discovery The `userInfoEndpoint` for a provider.\n   */\n  function fetchUserInfoAsync(config, discovery) {\n    if (!discovery.userInfoEndpoint) {\n      throw new Error('User info endpoint is not defined in the service config discovery document');\n    }\n    return (0, _Fetch.requestAsync)(discovery.userInfoEndpoint, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Bearer ${config.accessToken}`\n      },\n      dataType: 'json',\n      method: 'GET'\n    });\n  }\n});","lineCount":463,"map":[[27,2,10,0,"exports"],[27,9,10,0],[27,10,10,0,"getCurrentTimeInSeconds"],[27,33,10,0],[27,36,10,0,"getCurrentTimeInSeconds"],[27,59,10,0],[28,2,18,0,"Object"],[28,8,18,0],[28,9,18,0,"defineProperty"],[28,23,18,0],[28,24,18,0,"exports"],[28,31,18,0],[29,4,18,0,"enumerable"],[29,14,18,0],[30,4,18,0,"get"],[30,7,18,0],[30,18,18,0,"get"],[30,19,18,0],[31,6,18,0],[31,13,18,0,"TokenResponse"],[31,26,18,0],[32,4,18,0],[33,2,18,0],[34,2,119,0,"Object"],[34,8,119,0],[34,9,119,0,"defineProperty"],[34,23,119,0],[34,24,119,0,"exports"],[34,31,119,0],[35,4,119,0,"enumerable"],[35,14,119,0],[36,4,119,0,"get"],[36,7,119,0],[36,18,119,0,"get"],[36,19,119,0],[37,6,119,0],[37,13,119,0,"Request"],[37,20,119,0],[38,4,119,0],[39,2,119,0],[40,2,137,0,"Object"],[40,8,137,0],[40,9,137,0,"defineProperty"],[40,23,137,0],[40,24,137,0,"exports"],[40,31,137,0],[41,4,137,0,"enumerable"],[41,14,137,0],[42,4,137,0,"get"],[42,7,137,0],[42,18,137,0,"get"],[42,19,137,0],[43,6,137,0],[43,13,137,0,"TokenRequest"],[43,25,137,0],[44,4,137,0],[45,2,137,0],[46,2,212,0,"Object"],[46,8,212,0],[46,9,212,0,"defineProperty"],[46,23,212,0],[46,24,212,0,"exports"],[46,31,212,0],[47,4,212,0,"enumerable"],[47,14,212,0],[48,4,212,0,"get"],[48,7,212,0],[48,18,212,0,"get"],[48,19,212,0],[49,6,212,0],[49,13,212,0,"AccessTokenRequest"],[49,31,212,0],[50,4,212,0],[51,2,212,0],[52,2,252,0,"Object"],[52,8,252,0],[52,9,252,0,"defineProperty"],[52,23,252,0],[52,24,252,0,"exports"],[52,31,252,0],[53,4,252,0,"enumerable"],[53,14,252,0],[54,4,252,0,"get"],[54,7,252,0],[54,18,252,0,"get"],[54,19,252,0],[55,6,252,0],[55,13,252,0,"RefreshTokenRequest"],[55,32,252,0],[56,4,252,0],[57,2,252,0],[58,2,282,0,"Object"],[58,8,282,0],[58,9,282,0,"defineProperty"],[58,23,282,0],[58,24,282,0,"exports"],[58,31,282,0],[59,4,282,0,"enumerable"],[59,14,282,0],[60,4,282,0,"get"],[60,7,282,0],[60,18,282,0,"get"],[60,19,282,0],[61,6,282,0],[61,13,282,0,"RevokeTokenRequest"],[61,31,282,0],[62,4,282,0],[63,2,282,0],[64,2,353,0,"exports"],[64,9,353,0],[64,10,353,0,"exchangeCodeAsync"],[64,27,353,0],[64,30,353,0,"exchangeCodeAsync"],[64,47,353,0],[65,2,370,0,"exports"],[65,9,370,0],[65,10,370,0,"refreshAsync"],[65,22,370,0],[65,25,370,0,"refreshAsync"],[65,37,370,0],[66,2,382,0,"exports"],[66,9,382,0],[66,10,382,0,"revokeAsync"],[66,21,382,0],[66,24,382,0,"revokeAsync"],[66,35,382,0],[67,2,394,0,"exports"],[67,9,394,0],[67,10,394,0,"fetchUserInfoAsync"],[67,28,394,0],[67,31,394,0,"fetchUserInfoAsync"],[67,49,394,0],[68,2,1,0],[68,6,1,0,"_invariant"],[68,16,1,0],[68,19,1,0,"require"],[68,26,1,0],[68,27,1,0,"_dependencyMap"],[68,41,1,0],[69,2,1,0],[69,6,1,0,"invariant"],[69,15,1,0],[69,18,1,0,"_interopDefault"],[69,33,1,0],[69,34,1,0,"_invariant"],[69,44,1,0],[70,2,1,34],[70,6,1,34,"_reactNativeWebDistExportsPlatform"],[70,40,1,34],[70,43,1,34,"require"],[70,50,1,34],[70,51,1,34,"_dependencyMap"],[70,65,1,34],[71,2,1,34],[71,6,1,34,"Platform"],[71,14,1,34],[71,17,1,34,"_interopDefault"],[71,32,1,34],[71,33,1,34,"_reactNativeWebDistExportsPlatform"],[71,67,1,34],[72,2,3,0],[72,6,3,0,"_Base"],[72,11,3,0],[72,14,3,0,"require"],[72,21,3,0],[72,22,3,0,"_dependencyMap"],[72,36,3,0],[73,2,3,0],[73,6,3,0,"Base64"],[73,12,3,0],[73,15,3,0,"_interopNamespace"],[73,32,3,0],[73,33,3,0,"_Base"],[73,38,3,0],[74,2,4,0],[74,6,4,0,"_Errors"],[74,13,4,0],[74,16,4,0,"require"],[74,23,4,0],[74,24,4,0,"_dependencyMap"],[74,38,4,0],[75,2,5,0],[75,6,5,0,"_Fetch"],[75,12,5,0],[75,15,5,0,"require"],[75,22,5,0],[75,23,5,0,"_dependencyMap"],[75,37,5,0],[76,2,6,0],[76,6,6,0,"_TokenRequestTypes"],[76,24,6,0],[76,27,6,0,"require"],[76,34,6,0],[76,35,6,0,"_dependencyMap"],[76,49,6,0],[77,2,7,0],[78,0,8,0],[79,0,9,0],[80,2,10,7],[80,11,10,16,"getCurrentTimeInSeconds"],[80,34,10,39,"getCurrentTimeInSeconds"],[80,35,10,39],[80,37,10,42],[81,4,11,4],[81,11,11,11,"Math"],[81,15,11,15],[81,16,11,16,"floor"],[81,21,11,21],[81,22,11,22,"Date"],[81,26,11,26],[81,27,11,27,"now"],[81,30,11,30],[81,31,11,31],[81,32,11,32],[81,35,11,35],[81,39,11,39],[81,40,11,40],[82,2,12,0],[83,2,13,0],[84,0,14,0],[85,0,15,0],[86,0,16,0],[87,0,17,0],[88,2,18,7],[88,8,18,13,"TokenResponse"],[88,21,18,26],[88,22,18,27],[89,4,19,4],[90,0,20,0],[91,0,21,0],[92,0,22,0],[93,0,23,0],[94,0,24,0],[95,4,25,4],[95,11,25,11,"isTokenFresh"],[95,23,25,23,"isTokenFresh"],[95,24,25,24,"token"],[95,29,25,29],[96,4,26,4],[97,0,27,0],[98,0,28,0],[99,4,29,4,"secondsMargin"],[99,17,29,17],[99,20,29,20],[99,22,29,22],[99,25,29,25],[99,27,29,27],[99,30,29,30],[99,31,29,31],[99,32,29,32],[99,34,29,34],[100,6,30,8],[100,10,30,12],[100,11,30,13,"token"],[100,16,30,18],[100,18,30,20],[101,8,31,12],[101,15,31,19],[101,20,31,24],[102,6,32,8],[103,6,33,8],[103,10,33,12,"token"],[103,15,33,17],[103,16,33,18,"expiresIn"],[103,25,33,27],[103,27,33,29],[104,8,34,12],[104,14,34,18,"now"],[104,17,34,21],[104,20,34,24,"getCurrentTimeInSeconds"],[104,43,34,47],[104,44,34,48],[104,45,34,49],[105,8,35,12],[105,15,35,19,"now"],[105,18,35,22],[105,21,35,25,"token"],[105,26,35,30],[105,27,35,31,"issuedAt"],[105,35,35,39],[105,38,35,42,"token"],[105,43,35,47],[105,44,35,48,"expiresIn"],[105,53,35,57],[105,56,35,60,"secondsMargin"],[105,69,35,73],[106,6,36,8],[107,6,37,8],[108,6,38,8],[108,13,38,15],[108,17,38,19],[109,4,39,4],[110,4,40,4],[111,0,41,0],[112,0,42,0],[113,0,43,0],[114,0,44,0],[115,4,45,4],[115,11,45,11,"fromQueryParams"],[115,26,45,26,"fromQueryParams"],[115,27,45,27,"params"],[115,33,45,33],[115,35,45,35],[116,6,46,8],[116,13,46,15],[116,17,46,19,"TokenResponse"],[116,30,46,32],[116,31,46,33],[117,8,47,12,"accessToken"],[117,19,47,23],[117,21,47,25,"params"],[117,27,47,31],[117,28,47,32,"access_token"],[117,40,47,44],[118,8,48,12,"refreshToken"],[118,20,48,24],[118,22,48,26,"params"],[118,28,48,32],[118,29,48,33,"refresh_token"],[118,42,48,46],[119,8,49,12,"scope"],[119,13,49,17],[119,15,49,19,"params"],[119,21,49,25],[119,22,49,26,"scope"],[119,27,49,31],[120,8,50,12,"state"],[120,13,50,17],[120,15,50,19,"params"],[120,21,50,25],[120,22,50,26,"state"],[120,27,50,31],[121,8,51,12,"idToken"],[121,15,51,19],[121,17,51,21,"params"],[121,23,51,27],[121,24,51,28,"id_token"],[121,32,51,36],[122,8,52,12,"tokenType"],[122,17,52,21],[122,19,52,23,"params"],[122,25,52,29],[122,26,52,30,"token_type"],[122,36,52,40],[123,8,53,12,"expiresIn"],[123,17,53,21],[123,19,53,23,"params"],[123,25,53,29],[123,26,53,30,"expires_in"],[123,36,53,40],[124,8,54,12,"issuedAt"],[124,16,54,20],[124,18,54,22,"params"],[124,24,54,28],[124,25,54,29,"issued_at"],[125,6,55,8],[125,7,55,9],[125,8,55,10],[126,4,56,4],[128,4,65,4],[129,0,66,0],[130,0,67,0],[132,4,69,4,"constructor"],[132,15,69,15,"constructor"],[132,16,69,16,"response"],[132,24,69,24],[132,26,69,26,"rawResponse"],[132,37,69,37],[132,39,69,39],[133,6,70,8],[133,10,70,12],[133,11,70,13,"rawResponse"],[133,22,70,24],[133,25,70,27,"rawResponse"],[133,36,70,38],[134,6,71,8],[134,10,71,12],[134,11,71,13,"accessToken"],[134,22,71,24],[134,25,71,27,"response"],[134,33,71,35],[134,34,71,36,"accessToken"],[134,45,71,47],[135,6,72,8],[135,10,72,12],[135,11,72,13,"tokenType"],[135,20,72,22],[135,23,72,25,"response"],[135,31,72,33],[135,32,72,34,"tokenType"],[135,41,72,43],[135,45,72,47],[135,53,72,55],[136,6,73,8],[136,10,73,12],[136,11,73,13,"expiresIn"],[136,20,73,22],[136,23,73,25,"response"],[136,31,73,33],[136,32,73,34,"expiresIn"],[136,41,73,43],[137,6,74,8],[137,10,74,12],[137,11,74,13,"refreshToken"],[137,23,74,25],[137,26,74,28,"response"],[137,34,74,36],[137,35,74,37,"refreshToken"],[137,47,74,49],[138,6,75,8],[138,10,75,12],[138,11,75,13,"scope"],[138,16,75,18],[138,19,75,21,"response"],[138,27,75,29],[138,28,75,30,"scope"],[138,33,75,35],[139,6,76,8],[139,10,76,12],[139,11,76,13,"state"],[139,16,76,18],[139,19,76,21,"response"],[139,27,76,29],[139,28,76,30,"state"],[139,33,76,35],[140,6,77,8],[140,10,77,12],[140,11,77,13,"idToken"],[140,18,77,20],[140,21,77,23,"response"],[140,29,77,31],[140,30,77,32,"idToken"],[140,37,77,39],[141,6,78,8],[141,10,78,12],[141,11,78,13,"issuedAt"],[141,19,78,21],[141,22,78,24,"response"],[141,30,78,32],[141,31,78,33,"issuedAt"],[141,39,78,41],[141,43,78,45,"getCurrentTimeInSeconds"],[141,66,78,68],[141,67,78,69],[141,68,78,70],[142,4,79,4],[143,4,80,4,"applyResponseConfig"],[143,23,80,23,"applyResponseConfig"],[143,24,80,24,"response"],[143,32,80,32],[143,34,80,34],[144,6,81,8],[144,10,81,12],[144,11,81,13,"accessToken"],[144,22,81,24],[144,25,81,27,"response"],[144,33,81,35],[144,34,81,36,"accessToken"],[144,45,81,47],[144,49,81,51],[144,53,81,55],[144,54,81,56,"accessToken"],[144,65,81,67],[145,6,82,8],[145,10,82,12],[145,11,82,13,"tokenType"],[145,20,82,22],[145,23,82,25,"response"],[145,31,82,33],[145,32,82,34,"tokenType"],[145,41,82,43],[145,45,82,47],[145,49,82,51],[145,50,82,52,"tokenType"],[145,59,82,61],[145,63,82,65],[145,71,82,73],[146,6,83,8],[146,10,83,12],[146,11,83,13,"expiresIn"],[146,20,83,22],[146,23,83,25,"response"],[146,31,83,33],[146,32,83,34,"expiresIn"],[146,41,83,43],[146,45,83,47],[146,49,83,51],[146,50,83,52,"expiresIn"],[146,59,83,61],[147,6,84,8],[147,10,84,12],[147,11,84,13,"refreshToken"],[147,23,84,25],[147,26,84,28,"response"],[147,34,84,36],[147,35,84,37,"refreshToken"],[147,47,84,49],[147,51,84,53],[147,55,84,57],[147,56,84,58,"refreshToken"],[147,68,84,70],[148,6,85,8],[148,10,85,12],[148,11,85,13,"scope"],[148,16,85,18],[148,19,85,21,"response"],[148,27,85,29],[148,28,85,30,"scope"],[148,33,85,35],[148,37,85,39],[148,41,85,43],[148,42,85,44,"scope"],[148,47,85,49],[149,6,86,8],[149,10,86,12],[149,11,86,13,"state"],[149,16,86,18],[149,19,86,21,"response"],[149,27,86,29],[149,28,86,30,"state"],[149,33,86,35],[149,37,86,39],[149,41,86,43],[149,42,86,44,"state"],[149,47,86,49],[150,6,87,8],[150,10,87,12],[150,11,87,13,"idToken"],[150,18,87,20],[150,21,87,23,"response"],[150,29,87,31],[150,30,87,32,"idToken"],[150,37,87,39],[150,41,87,43],[150,45,87,47],[150,46,87,48,"idToken"],[150,53,87,55],[151,6,88,8],[151,10,88,12],[151,11,88,13,"issuedAt"],[151,19,88,21],[151,22,88,24,"response"],[151,30,88,32],[151,31,88,33,"issuedAt"],[151,39,88,41],[151,43,88,45],[151,47,88,49],[151,48,88,50,"issuedAt"],[151,56,88,58],[151,60,88,62,"getCurrentTimeInSeconds"],[151,83,88,85],[151,84,88,86],[151,85,88,87],[152,4,89,4],[153,4,90,4,"getRequestConfig"],[153,20,90,20,"getRequestConfig"],[153,21,90,20],[153,23,90,23],[154,6,91,8],[154,13,91,15],[155,8,92,12,"accessToken"],[155,19,92,23],[155,21,92,25],[155,25,92,29],[155,26,92,30,"accessToken"],[155,37,92,41],[156,8,93,12,"idToken"],[156,15,93,19],[156,17,93,21],[156,21,93,25],[156,22,93,26,"idToken"],[156,29,93,33],[157,8,94,12,"refreshToken"],[157,20,94,24],[157,22,94,26],[157,26,94,30],[157,27,94,31,"refreshToken"],[157,39,94,43],[158,8,95,12,"scope"],[158,13,95,17],[158,15,95,19],[158,19,95,23],[158,20,95,24,"scope"],[158,25,95,29],[159,8,96,12,"state"],[159,13,96,17],[159,15,96,19],[159,19,96,23],[159,20,96,24,"state"],[159,25,96,29],[160,8,97,12,"tokenType"],[160,17,97,21],[160,19,97,23],[160,23,97,27],[160,24,97,28,"tokenType"],[160,33,97,37],[161,8,98,12,"issuedAt"],[161,16,98,20],[161,18,98,22],[161,22,98,26],[161,23,98,27,"issuedAt"],[161,31,98,35],[162,8,99,12,"expiresIn"],[162,17,99,21],[162,19,99,23],[162,23,99,27],[162,24,99,28,"expiresIn"],[163,6,100,8],[163,7,100,9],[164,4,101,4],[165,4,102,4],[165,10,102,10,"refreshAsync"],[165,22,102,22,"refreshAsync"],[165,23,102,23,"config"],[165,29,102,29],[165,31,102,31,"discovery"],[165,40,102,40],[165,42,102,42],[166,6,103,8],[166,12,103,14,"request"],[166,19,103,21],[166,22,103,24],[166,26,103,28,"RefreshTokenRequest"],[166,45,103,47],[166,46,103,48],[167,8,104,12],[167,11,104,15,"config"],[167,17,104,21],[168,8,105,12,"refreshToken"],[168,20,105,24],[168,22,105,26],[168,26,105,30],[168,27,105,31,"refreshToken"],[169,6,106,8],[169,7,106,9],[169,8,106,10],[170,6,107,8],[170,12,107,14,"response"],[170,20,107,22],[170,23,107,25],[170,29,107,31,"request"],[170,36,107,38],[170,37,107,39,"performAsync"],[170,49,107,51],[170,50,107,52,"discovery"],[170,59,107,61],[170,60,107,62],[171,6,108,8],[172,6,109,8,"response"],[172,14,109,16],[172,15,109,17,"refreshToken"],[172,27,109,29],[172,30,109,32,"response"],[172,38,109,40],[172,39,109,41,"refreshToken"],[172,51,109,53],[172,55,109,57],[172,59,109,61],[172,60,109,62,"refreshToken"],[172,72,109,74],[173,6,110,8],[173,12,110,14,"json"],[173,16,110,18],[173,19,110,21,"response"],[173,27,110,29],[173,28,110,30,"getRequestConfig"],[173,44,110,46],[173,45,110,47],[173,46,110,48],[174,6,111,8],[174,10,111,12],[174,11,111,13,"applyResponseConfig"],[174,30,111,32],[174,31,111,33,"json"],[174,35,111,37],[174,36,111,38],[175,6,112,8],[175,13,112,15],[175,17,112,19],[176,4,113,4],[177,4,114,4,"shouldRefresh"],[177,17,114,17,"shouldRefresh"],[177,18,114,17],[177,20,114,20],[178,6,115,8],[179,6,116,8],[179,13,116,15],[179,15,116,17,"TokenResponse"],[179,28,116,30],[179,29,116,31,"isTokenFresh"],[179,41,116,43],[179,42,116,44],[179,46,116,48],[179,47,116,49],[179,51,116,53],[179,52,116,54],[179,56,116,58],[179,57,116,59,"refreshToken"],[179,69,116,71],[179,70,116,72],[180,4,117,4],[181,2,118,0],[182,2,119,7],[182,8,119,13,"Request"],[182,15,119,20],[182,16,119,21],[183,4,121,4,"constructor"],[183,15,121,15,"constructor"],[183,16,121,16,"request"],[183,23,121,23],[183,25,121,25],[184,6,122,8],[184,10,122,12],[184,11,122,13,"request"],[184,18,122,20],[184,21,122,23,"request"],[184,28,122,30],[185,4,123,4],[186,4,124,4],[186,10,124,10,"performAsync"],[186,22,124,22,"performAsync"],[186,23,124,23,"discovery"],[186,32,124,32],[186,34,124,34],[187,6,125,8],[187,12,125,14],[187,16,125,18,"Error"],[187,21,125,23],[187,22,125,24],[187,53,125,55],[187,54,125,56],[188,4,126,4],[189,4,127,4,"getRequestConfig"],[189,20,127,20,"getRequestConfig"],[189,21,127,20],[189,23,127,23],[190,6,128,8],[190,12,128,14],[190,16,128,18,"Error"],[190,21,128,23],[190,22,128,24],[190,57,128,59],[190,58,128,60],[191,4,129,4],[192,4,130,4,"getQueryBody"],[192,16,130,16,"getQueryBody"],[192,17,130,16],[192,19,130,19],[193,6,131,8],[193,12,131,14],[193,16,131,18,"Error"],[193,21,131,23],[193,22,131,24],[193,53,131,55],[193,54,131,56],[194,4,132,4],[195,2,133,0],[196,2,134,0],[197,0,135,0],[198,0,136,0],[199,2,137,7],[199,8,137,13,"TokenRequest"],[199,20,137,25],[199,29,137,34,"Request"],[199,36,137,41],[199,37,137,42],[200,4,143,4,"constructor"],[200,15,143,15,"constructor"],[200,16,143,16,"request"],[200,23,143,23],[200,25,143,25,"grantType"],[200,34,143,34],[200,36,143,36],[201,6,144,8],[201,11,144,13],[201,12,144,14,"request"],[201,19,144,21],[201,20,144,22],[202,6,145,8],[202,10,145,12],[202,11,145,13,"grantType"],[202,20,145,22],[202,23,145,25,"grantType"],[202,32,145,34],[203,6,146,8],[203,10,146,12],[203,11,146,13,"clientId"],[203,19,146,21],[203,22,146,24,"request"],[203,29,146,31],[203,30,146,32,"clientId"],[203,38,146,40],[204,6,147,8],[204,10,147,12],[204,11,147,13,"clientSecret"],[204,23,147,25],[204,26,147,28,"request"],[204,33,147,35],[204,34,147,36,"clientSecret"],[204,46,147,48],[205,6,148,8],[205,10,148,12],[205,11,148,13,"extraParams"],[205,22,148,24],[205,25,148,27,"request"],[205,32,148,34],[205,33,148,35,"extraParams"],[205,44,148,46],[206,6,149,8],[206,10,149,12],[206,11,149,13,"scopes"],[206,17,149,19],[206,20,149,22,"request"],[206,27,149,29],[206,28,149,30,"scopes"],[206,34,149,36],[207,4,150,4],[208,4,151,4,"getHeaders"],[208,14,151,14,"getHeaders"],[208,15,151,14],[208,17,151,17],[209,6,152,8],[209,12,152,14,"headers"],[209,19,152,21],[209,22,152,24],[210,8,152,26],[210,22,152,40],[210,24,152,42],[211,6,152,78],[211,7,152,79],[212,6,153,8],[212,10,153,12],[212,17,153,19],[212,21,153,23],[212,22,153,24,"clientSecret"],[212,34,153,36],[212,39,153,41],[212,50,153,52],[212,52,153,54],[213,8,154,12],[214,8,155,12],[215,8,156,12],[215,14,156,18,"encodedClientId"],[215,29,156,33],[215,32,156,36,"encodeURIComponent"],[215,50,156,54],[215,51,156,55],[215,55,156,59],[215,56,156,60,"clientId"],[215,64,156,68],[215,65,156,69],[216,8,157,12],[216,14,157,18,"encodedClientSecret"],[216,33,157,37],[216,36,157,40,"encodeURIComponent"],[216,54,157,58],[216,55,157,59],[216,59,157,63],[216,60,157,64,"clientSecret"],[216,72,157,76],[216,73,157,77],[217,8,158,12],[217,14,158,18,"credentials"],[217,25,158,29],[217,28,158,32],[217,31,158,35,"encodedClientId"],[217,46,158,50],[217,50,158,54,"encodedClientSecret"],[217,69,158,73],[217,71,158,75],[218,8,159,12],[218,14,159,18,"basicAuth"],[218,23,159,27],[218,26,159,30,"Base64"],[218,32,159,36],[218,33,159,37,"encodeNoWrap"],[218,45,159,49],[218,46,159,50,"credentials"],[218,57,159,61],[218,58,159,62],[219,8,160,12,"headers"],[219,15,160,19],[219,16,160,20,"Authorization"],[219,29,160,33],[219,32,160,36],[219,41,160,45,"basicAuth"],[219,50,160,54],[219,52,160,56],[220,6,161,8],[221,6,162,8],[221,13,162,15,"headers"],[221,20,162,22],[222,4,163,4],[223,4,164,4],[223,10,164,10,"performAsync"],[223,22,164,22,"performAsync"],[223,23,164,23,"discovery"],[223,32,164,32],[223,34,164,34],[224,6,165,8],[225,6,166,8],[225,10,166,8,"invariant"],[225,19,166,17],[225,20,166,17,"default"],[225,27,166,17],[225,29,166,18,"discovery"],[225,38,166,27],[225,39,166,28,"tokenEndpoint"],[225,52,166,41],[225,54,166,43],[225,118,166,107],[225,119,166,108],[226,6,167,8],[226,12,167,14,"response"],[226,20,167,22],[226,23,167,25],[226,29,167,31],[226,33,167,31,"requestAsync"],[226,39,167,43],[226,40,167,43,"requestAsync"],[226,52,167,43],[226,54,167,44,"discovery"],[226,63,167,53],[226,64,167,54,"tokenEndpoint"],[226,77,167,67],[226,79,167,69],[227,8,168,12,"dataType"],[227,16,168,20],[227,18,168,22],[227,24,168,28],[228,8,169,12,"method"],[228,14,169,18],[228,16,169,20],[228,22,169,26],[229,8,170,12,"headers"],[229,15,170,19],[229,17,170,21],[229,21,170,25],[229,22,170,26,"getHeaders"],[229,32,170,36],[229,33,170,37],[229,34,170,38],[230,8,171,12,"body"],[230,12,171,16],[230,14,171,18],[230,18,171,22],[230,19,171,23,"getQueryBody"],[230,31,171,35],[230,32,171,36],[231,6,172,8],[231,7,172,9],[231,8,172,10],[232,6,173,8],[232,10,173,12],[232,17,173,19],[232,21,173,23,"response"],[232,29,173,31],[232,31,173,33],[233,8,174,12],[233,14,174,18],[233,18,174,22,"TokenError"],[233,25,174,32],[233,26,174,32,"TokenError"],[233,36,174,32],[233,37,174,33,"response"],[233,45,174,41],[233,46,174,42],[234,6,175,8],[235,6,176,8],[235,13,176,15],[235,17,176,19,"TokenResponse"],[235,30,176,32],[235,31,176,33],[236,8,177,12,"accessToken"],[236,19,177,23],[236,21,177,25,"response"],[236,29,177,33],[236,30,177,34,"access_token"],[236,42,177,46],[237,8,178,12,"tokenType"],[237,17,178,21],[237,19,178,23,"response"],[237,27,178,31],[237,28,178,32,"token_type"],[237,38,178,42],[238,8,179,12,"expiresIn"],[238,17,179,21],[238,19,179,23,"response"],[238,27,179,31],[238,28,179,32,"expires_in"],[238,38,179,42],[239,8,180,12,"refreshToken"],[239,20,180,24],[239,22,180,26,"response"],[239,30,180,34],[239,31,180,35,"refresh_token"],[239,44,180,48],[240,8,181,12,"scope"],[240,13,181,17],[240,15,181,19,"response"],[240,23,181,27],[240,24,181,28,"scope"],[240,29,181,33],[241,8,182,12,"idToken"],[241,15,182,19],[241,17,182,21,"response"],[241,25,182,29],[241,26,182,30,"id_token"],[241,34,182,38],[242,8,183,12,"issuedAt"],[242,16,183,20],[242,18,183,22,"response"],[242,26,183,30],[242,27,183,31,"issued_at"],[243,6,184,8],[243,7,184,9],[243,9,184,11,"response"],[243,17,184,19],[243,18,184,20],[244,4,185,4],[245,4,186,4,"getQueryBody"],[245,16,186,16,"getQueryBody"],[245,17,186,16],[245,19,186,19],[246,6,187,8],[246,12,187,14,"queryBody"],[246,21,187,23],[246,24,187,26],[247,8,188,12,"grant_type"],[247,18,188,22],[247,20,188,24],[247,24,188,28],[247,25,188,29,"grantType"],[248,6,189,8],[248,7,189,9],[249,6,190,8],[249,10,190,12],[249,11,190,13],[249,15,190,17],[249,16,190,18,"clientSecret"],[249,28,190,30],[249,30,190,32],[250,8,191,12],[251,8,192,12,"queryBody"],[251,17,192,21],[251,18,192,22,"client_id"],[251,27,192,31],[251,30,192,34],[251,34,192,38],[251,35,192,39,"clientId"],[251,43,192,47],[252,6,193,8],[253,6,194,8],[253,10,194,12],[253,14,194,16],[253,15,194,17,"scopes"],[253,21,194,23],[253,23,194,25],[254,8,195,12,"queryBody"],[254,17,195,21],[254,18,195,22,"scope"],[254,23,195,27],[254,26,195,30],[254,30,195,34],[254,31,195,35,"scopes"],[254,37,195,41],[254,38,195,42,"join"],[254,42,195,46],[254,43,195,47],[254,46,195,50],[254,47,195,51],[255,6,196,8],[256,6,197,8],[256,10,197,12],[256,14,197,16],[256,15,197,17,"extraParams"],[256,26,197,28],[256,28,197,30],[257,8,198,12],[257,13,198,17],[257,19,198,23,"extra"],[257,24,198,28],[257,28,198,32],[257,32,198,36],[257,33,198,37,"extraParams"],[257,44,198,48],[257,46,198,50],[258,10,199,16],[258,14,199,20,"extra"],[258,19,199,25],[258,23,199,29],[258,27,199,33],[258,28,199,34,"extraParams"],[258,39,199,45],[258,43,199,49],[258,45,199,51,"extra"],[258,50,199,56],[258,54,199,60,"queryBody"],[258,63,199,69],[258,64,199,70],[258,66,199,72],[259,12,200,20,"queryBody"],[259,21,200,29],[259,22,200,30,"extra"],[259,27,200,35],[259,28,200,36],[259,31,200,39],[259,35,200,43],[259,36,200,44,"extraParams"],[259,47,200,55],[259,48,200,56,"extra"],[259,53,200,61],[259,54,200,62],[260,10,201,16],[261,8,202,12],[262,6,203,8],[263,6,204,8],[263,13,204,15,"queryBody"],[263,22,204,24],[264,4,205,4],[265,2,206,0],[266,2,207,0],[267,0,208,0],[268,0,209,0],[269,0,210,0],[270,0,211,0],[271,2,212,7],[271,8,212,13,"AccessTokenRequest"],[271,26,212,31],[271,35,212,40,"TokenRequest"],[271,47,212,52],[271,48,212,53],[272,4,215,4,"constructor"],[272,15,215,15,"constructor"],[272,16,215,16,"options"],[272,23,215,23],[272,25,215,25],[273,6,216,8],[273,10,216,8,"invariant"],[273,19,216,17],[273,20,216,17,"default"],[273,27,216,17],[273,29,216,18,"options"],[273,36,216,25],[273,37,216,26,"redirectUri"],[273,48,216,37],[273,50,216,39],[273,173,216,162,"Platform"],[273,181,216,170],[273,182,216,170,"default"],[273,189,216,170],[273,190,216,171,"select"],[273,196,216,177],[273,197,216,178],[274,8,217,12,"web"],[274,11,217,15],[274,13,217,17],[274,47,217,51],[275,8,218,12,"default"],[275,15,218,19],[275,17,218,21],[276,6,219,8],[276,7,219,9],[276,8,219,10],[276,10,219,12],[276,11,219,13],[277,6,220,8],[277,10,220,8,"invariant"],[277,19,220,17],[277,20,220,17,"default"],[277,27,220,17],[277,29,220,18,"options"],[277,36,220,25],[277,37,220,26,"code"],[277,41,220,30],[277,43,220,32],[277,185,220,174],[277,186,220,175],[278,6,221,8],[278,11,221,13],[278,12,221,14,"options"],[278,19,221,21],[278,21,221,23,"GrantType"],[278,39,221,32],[278,40,221,32,"GrantType"],[278,49,221,32],[278,50,221,33,"AuthorizationCode"],[278,67,221,50],[278,68,221,51],[279,6,222,8],[279,10,222,12],[279,11,222,13,"code"],[279,15,222,17],[279,18,222,20,"options"],[279,25,222,27],[279,26,222,28,"code"],[279,30,222,32],[280,6,223,8],[280,10,223,12],[280,11,223,13,"redirectUri"],[280,22,223,24],[280,25,223,27,"options"],[280,32,223,34],[280,33,223,35,"redirectUri"],[280,44,223,46],[281,4,224,4],[282,4,225,4,"getQueryBody"],[282,16,225,16,"getQueryBody"],[282,17,225,16],[282,19,225,19],[283,6,226,8],[283,12,226,14,"queryBody"],[283,21,226,23],[283,24,226,26],[283,29,226,31],[283,30,226,32,"getQueryBody"],[283,42,226,44],[283,43,226,45],[283,44,226,46],[284,6,227,8],[284,10,227,12],[284,14,227,16],[284,15,227,17,"redirectUri"],[284,26,227,28],[284,28,227,30],[285,8,228,12,"queryBody"],[285,17,228,21],[285,18,228,22,"redirect_uri"],[285,30,228,34],[285,33,228,37],[285,37,228,41],[285,38,228,42,"redirectUri"],[285,49,228,53],[286,6,229,8],[287,6,230,8],[287,10,230,12],[287,14,230,16],[287,15,230,17,"code"],[287,19,230,21],[287,21,230,23],[288,8,231,12,"queryBody"],[288,17,231,21],[288,18,231,22,"code"],[288,22,231,26],[288,25,231,29],[288,29,231,33],[288,30,231,34,"code"],[288,34,231,38],[289,6,232,8],[290,6,233,8],[290,13,233,15,"queryBody"],[290,22,233,24],[291,4,234,4],[292,4,235,4,"getRequestConfig"],[292,20,235,20,"getRequestConfig"],[292,21,235,20],[292,23,235,23],[293,6,236,8],[293,13,236,15],[294,8,237,12,"clientId"],[294,16,237,20],[294,18,237,22],[294,22,237,26],[294,23,237,27,"clientId"],[294,31,237,35],[295,8,238,12,"clientSecret"],[295,20,238,24],[295,22,238,26],[295,26,238,30],[295,27,238,31,"clientSecret"],[295,39,238,43],[296,8,239,12,"grantType"],[296,17,239,21],[296,19,239,23],[296,23,239,27],[296,24,239,28,"grantType"],[296,33,239,37],[297,8,240,12,"code"],[297,12,240,16],[297,14,240,18],[297,18,240,22],[297,19,240,23,"code"],[297,23,240,27],[298,8,241,12,"redirectUri"],[298,19,241,23],[298,21,241,25],[298,25,241,29],[298,26,241,30,"redirectUri"],[298,37,241,41],[299,8,242,12,"extraParams"],[299,19,242,23],[299,21,242,25],[299,25,242,29],[299,26,242,30,"extraParams"],[299,37,242,41],[300,8,243,12,"scopes"],[300,14,243,18],[300,16,243,20],[300,20,243,24],[300,21,243,25,"scopes"],[301,6,244,8],[301,7,244,9],[302,4,245,4],[303,2,246,0],[304,2,247,0],[305,0,248,0],[306,0,249,0],[307,0,250,0],[308,0,251,0],[309,2,252,7],[309,8,252,13,"RefreshTokenRequest"],[309,27,252,32],[309,36,252,41,"TokenRequest"],[309,48,252,53],[309,49,252,54],[310,4,254,4,"constructor"],[310,15,254,15,"constructor"],[310,16,254,16,"options"],[310,23,254,23],[310,25,254,25],[311,6,255,8],[311,10,255,8,"invariant"],[311,19,255,17],[311,20,255,17,"default"],[311,27,255,17],[311,29,255,18,"options"],[311,36,255,25],[311,37,255,26,"refreshToken"],[311,49,255,38],[311,51,255,40],[311,111,255,100],[311,112,255,101],[312,6,256,8],[312,11,256,13],[312,12,256,14,"options"],[312,19,256,21],[312,21,256,23,"GrantType"],[312,39,256,32],[312,40,256,32,"GrantType"],[312,49,256,32],[312,50,256,33,"RefreshToken"],[312,62,256,45],[312,63,256,46],[313,6,257,8],[313,10,257,12],[313,11,257,13,"refreshToken"],[313,23,257,25],[313,26,257,28,"options"],[313,33,257,35],[313,34,257,36,"refreshToken"],[313,46,257,48],[314,4,258,4],[315,4,259,4,"getQueryBody"],[315,16,259,16,"getQueryBody"],[315,17,259,16],[315,19,259,19],[316,6,260,8],[316,12,260,14,"queryBody"],[316,21,260,23],[316,24,260,26],[316,29,260,31],[316,30,260,32,"getQueryBody"],[316,42,260,44],[316,43,260,45],[316,44,260,46],[317,6,261,8],[317,10,261,12],[317,14,261,16],[317,15,261,17,"refreshToken"],[317,27,261,29],[317,29,261,31],[318,8,262,12,"queryBody"],[318,17,262,21],[318,18,262,22,"refresh_token"],[318,31,262,35],[318,34,262,38],[318,38,262,42],[318,39,262,43,"refreshToken"],[318,51,262,55],[319,6,263,8],[320,6,264,8],[320,13,264,15,"queryBody"],[320,22,264,24],[321,4,265,4],[322,4,266,4,"getRequestConfig"],[322,20,266,20,"getRequestConfig"],[322,21,266,20],[322,23,266,23],[323,6,267,8],[323,13,267,15],[324,8,268,12,"clientId"],[324,16,268,20],[324,18,268,22],[324,22,268,26],[324,23,268,27,"clientId"],[324,31,268,35],[325,8,269,12,"clientSecret"],[325,20,269,24],[325,22,269,26],[325,26,269,30],[325,27,269,31,"clientSecret"],[325,39,269,43],[326,8,270,12,"grantType"],[326,17,270,21],[326,19,270,23],[326,23,270,27],[326,24,270,28,"grantType"],[326,33,270,37],[327,8,271,12,"refreshToken"],[327,20,271,24],[327,22,271,26],[327,26,271,30],[327,27,271,31,"refreshToken"],[327,39,271,43],[328,8,272,12,"extraParams"],[328,19,272,23],[328,21,272,25],[328,25,272,29],[328,26,272,30,"extraParams"],[328,37,272,41],[329,8,273,12,"scopes"],[329,14,273,18],[329,16,273,20],[329,20,273,24],[329,21,273,25,"scopes"],[330,6,274,8],[330,7,274,9],[331,4,275,4],[332,2,276,0],[333,2,277,0],[334,0,278,0],[335,0,279,0],[336,0,280,0],[337,0,281,0],[338,2,282,7],[338,8,282,13,"RevokeTokenRequest"],[338,26,282,31],[338,35,282,40,"Request"],[338,42,282,47],[338,43,282,48],[339,4,287,4,"constructor"],[339,15,287,15,"constructor"],[339,16,287,16,"request"],[339,23,287,23],[339,25,287,25],[340,6,288,8],[340,11,288,13],[340,12,288,14,"request"],[340,19,288,21],[340,20,288,22],[341,6,289,8],[341,10,289,8,"invariant"],[341,19,289,17],[341,20,289,17,"default"],[341,27,289,17],[341,29,289,18,"request"],[341,36,289,25],[341,37,289,26,"token"],[341,42,289,31],[341,44,289,33],[341,106,289,95],[341,107,289,96],[342,6,290,8],[342,10,290,12],[342,11,290,13,"clientId"],[342,19,290,21],[342,22,290,24,"request"],[342,29,290,31],[342,30,290,32,"clientId"],[342,38,290,40],[343,6,291,8],[343,10,291,12],[343,11,291,13,"clientSecret"],[343,23,291,25],[343,26,291,28,"request"],[343,33,291,35],[343,34,291,36,"clientSecret"],[343,46,291,48],[344,6,292,8],[344,10,292,12],[344,11,292,13,"token"],[344,16,292,18],[344,19,292,21,"request"],[344,26,292,28],[344,27,292,29,"token"],[344,32,292,34],[345,6,293,8],[345,10,293,12],[345,11,293,13,"tokenTypeHint"],[345,24,293,26],[345,27,293,29,"request"],[345,34,293,36],[345,35,293,37,"tokenTypeHint"],[345,48,293,50],[346,4,294,4],[347,4,295,4,"getHeaders"],[347,14,295,14,"getHeaders"],[347,15,295,14],[347,17,295,17],[348,6,296,8],[348,12,296,14,"headers"],[348,19,296,21],[348,22,296,24],[349,8,296,26],[349,22,296,40],[349,24,296,42],[350,6,296,78],[350,7,296,79],[351,6,297,8],[351,10,297,12],[351,17,297,19],[351,21,297,23],[351,22,297,24,"clientSecret"],[351,34,297,36],[351,39,297,41],[351,50,297,52],[351,54,297,56],[351,58,297,60],[351,59,297,61,"clientId"],[351,67,297,69],[351,69,297,71],[352,8,298,12],[353,8,299,12],[354,8,300,12],[354,14,300,18,"encodedClientId"],[354,29,300,33],[354,32,300,36,"encodeURIComponent"],[354,50,300,54],[354,51,300,55],[354,55,300,59],[354,56,300,60,"clientId"],[354,64,300,68],[354,65,300,69],[355,8,301,12],[355,14,301,18,"encodedClientSecret"],[355,33,301,37],[355,36,301,40,"encodeURIComponent"],[355,54,301,58],[355,55,301,59],[355,59,301,63],[355,60,301,64,"clientSecret"],[355,72,301,76],[355,73,301,77],[356,8,302,12],[356,14,302,18,"credentials"],[356,25,302,29],[356,28,302,32],[356,31,302,35,"encodedClientId"],[356,46,302,50],[356,50,302,54,"encodedClientSecret"],[356,69,302,73],[356,71,302,75],[357,8,303,12],[357,14,303,18,"basicAuth"],[357,23,303,27],[357,26,303,30,"Base64"],[357,32,303,36],[357,33,303,37,"encodeNoWrap"],[357,45,303,49],[357,46,303,50,"credentials"],[357,57,303,61],[357,58,303,62],[358,8,304,12,"headers"],[358,15,304,19],[358,16,304,20,"Authorization"],[358,29,304,33],[358,32,304,36],[358,41,304,45,"basicAuth"],[358,50,304,54],[358,52,304,56],[359,6,305,8],[360,6,306,8],[360,13,306,15,"headers"],[360,20,306,22],[361,4,307,4],[362,4,308,4],[363,0,309,0],[364,0,310,0],[365,0,311,0],[366,0,312,0],[367,4,313,4],[367,10,313,10,"performAsync"],[367,22,313,22,"performAsync"],[367,23,313,23,"discovery"],[367,32,313,32],[367,34,313,34],[368,6,314,8],[368,10,314,8,"invariant"],[368,19,314,17],[368,20,314,17,"default"],[368,27,314,17],[368,29,314,18,"discovery"],[368,38,314,27],[368,39,314,28,"revocationEndpoint"],[368,57,314,46],[368,59,314,48],[368,128,314,117],[368,129,314,118],[369,6,315,8],[369,12,315,14],[369,16,315,14,"requestAsync"],[369,22,315,26],[369,23,315,26,"requestAsync"],[369,35,315,26],[369,37,315,27,"discovery"],[369,46,315,36],[369,47,315,37,"revocationEndpoint"],[369,65,315,55],[369,67,315,57],[370,8,316,12,"method"],[370,14,316,18],[370,16,316,20],[370,22,316,26],[371,8,317,12,"headers"],[371,15,317,19],[371,17,317,21],[371,21,317,25],[371,22,317,26,"getHeaders"],[371,32,317,36],[371,33,317,37],[371,34,317,38],[372,8,318,12,"body"],[372,12,318,16],[372,14,318,18],[372,18,318,22],[372,19,318,23,"getQueryBody"],[372,31,318,35],[372,32,318,36],[373,6,319,8],[373,7,319,9],[373,8,319,10],[374,6,320,8],[374,13,320,15],[374,17,320,19],[375,4,321,4],[376,4,322,4,"getRequestConfig"],[376,20,322,20,"getRequestConfig"],[376,21,322,20],[376,23,322,23],[377,6,323,8],[377,13,323,15],[378,8,324,12,"clientId"],[378,16,324,20],[378,18,324,22],[378,22,324,26],[378,23,324,27,"clientId"],[378,31,324,35],[379,8,325,12,"clientSecret"],[379,20,325,24],[379,22,325,26],[379,26,325,30],[379,27,325,31,"clientSecret"],[379,39,325,43],[380,8,326,12,"token"],[380,13,326,17],[380,15,326,19],[380,19,326,23],[380,20,326,24,"token"],[380,25,326,29],[381,8,327,12,"tokenTypeHint"],[381,21,327,25],[381,23,327,27],[381,27,327,31],[381,28,327,32,"tokenTypeHint"],[382,6,328,8],[382,7,328,9],[383,4,329,4],[384,4,330,4,"getQueryBody"],[384,16,330,16,"getQueryBody"],[384,17,330,16],[384,19,330,19],[385,6,331,8],[385,12,331,14,"queryBody"],[385,21,331,23],[385,24,331,26],[386,8,331,28,"token"],[386,13,331,33],[386,15,331,35],[386,19,331,39],[386,20,331,40,"token"],[387,6,331,46],[387,7,331,47],[388,6,332,8],[388,10,332,12],[388,14,332,16],[388,15,332,17,"tokenTypeHint"],[388,28,332,30],[388,30,332,32],[389,8,333,12,"queryBody"],[389,17,333,21],[389,18,333,22,"token_type_hint"],[389,33,333,37],[389,36,333,40],[389,40,333,44],[389,41,333,45,"tokenTypeHint"],[389,54,333,58],[390,6,334,8],[391,6,335,8],[392,6,336,8],[392,10,336,12],[392,14,336,16],[392,15,336,17,"clientId"],[392,23,336,25],[392,25,336,27],[393,8,337,12,"queryBody"],[393,17,337,21],[393,18,337,22,"client_id"],[393,27,337,31],[393,30,337,34],[393,34,337,38],[393,35,337,39,"clientId"],[393,43,337,47],[394,6,338,8],[395,6,339,8],[395,10,339,12],[395,14,339,16],[395,15,339,17,"clientSecret"],[395,27,339,29],[395,29,339,31],[396,8,340,12,"queryBody"],[396,17,340,21],[396,18,340,22,"client_secret"],[396,31,340,35],[396,34,340,38],[396,38,340,42],[396,39,340,43,"clientSecret"],[396,51,340,55],[397,6,341,8],[398,6,342,8],[398,13,342,15,"queryBody"],[398,22,342,24],[399,4,343,4],[400,2,344,0],[401,2,345,0],[402,2,346,0],[403,0,347,0],[404,0,348,0],[405,0,349,0],[406,0,350,0],[407,0,351,0],[408,0,352,0],[409,2,353,7],[409,11,353,16,"exchangeCodeAsync"],[409,28,353,33,"exchangeCodeAsync"],[409,29,353,34,"config"],[409,35,353,40],[409,37,353,42,"discovery"],[409,46,353,51],[409,48,353,53],[410,4,354,4],[410,10,354,10,"request"],[410,17,354,17],[410,20,354,20],[410,24,354,24,"AccessTokenRequest"],[410,42,354,42],[410,43,354,43,"config"],[410,49,354,49],[410,50,354,50],[411,4,355,4],[411,11,355,11,"request"],[411,18,355,18],[411,19,355,19,"performAsync"],[411,31,355,31],[411,32,355,32,"discovery"],[411,41,355,41],[411,42,355,42],[412,2,356,0],[413,2,357,0],[414,2,358,0],[415,0,359,0],[416,0,360,0],[417,0,361,0],[418,0,362,0],[419,0,363,0],[420,0,364,0],[421,0,365,0],[422,0,366,0],[423,0,367,0],[424,0,368,0],[425,0,369,0],[426,2,370,7],[426,11,370,16,"refreshAsync"],[426,23,370,28,"refreshAsync"],[426,24,370,29,"config"],[426,30,370,35],[426,32,370,37,"discovery"],[426,41,370,46],[426,43,370,48],[427,4,371,4],[427,10,371,10,"request"],[427,17,371,17],[427,20,371,20],[427,24,371,24,"RefreshTokenRequest"],[427,43,371,43],[427,44,371,44,"config"],[427,50,371,50],[427,51,371,51],[428,4,372,4],[428,11,372,11,"request"],[428,18,372,18],[428,19,372,19,"performAsync"],[428,31,372,31],[428,32,372,32,"discovery"],[428,41,372,41],[428,42,372,42],[429,2,373,0],[430,2,374,0],[431,2,375,0],[432,0,376,0],[433,0,377,0],[434,0,378,0],[435,0,379,0],[436,0,380,0],[437,0,381,0],[438,2,382,7],[438,11,382,16,"revokeAsync"],[438,22,382,27,"revokeAsync"],[438,23,382,28,"config"],[438,29,382,34],[438,31,382,36,"discovery"],[438,40,382,45],[438,42,382,47],[439,4,383,4],[439,10,383,10,"request"],[439,17,383,17],[439,20,383,20],[439,24,383,24,"RevokeTokenRequest"],[439,42,383,42],[439,43,383,43,"config"],[439,49,383,49],[439,50,383,50],[440,4,384,4],[440,11,384,11,"request"],[440,18,384,18],[440,19,384,19,"performAsync"],[440,31,384,31],[440,32,384,32,"discovery"],[440,41,384,41],[440,42,384,42],[441,2,385,0],[442,2,386,0],[443,0,387,0],[444,0,388,0],[445,0,389,0],[446,0,390,0],[447,0,391,0],[448,0,392,0],[449,0,393,0],[450,2,394,7],[450,11,394,16,"fetchUserInfoAsync"],[450,29,394,34,"fetchUserInfoAsync"],[450,30,394,35,"config"],[450,36,394,41],[450,38,394,43,"discovery"],[450,47,394,52],[450,49,394,54],[451,4,395,4],[451,8,395,8],[451,9,395,9,"discovery"],[451,18,395,18],[451,19,395,19,"userInfoEndpoint"],[451,35,395,35],[451,37,395,37],[452,6,396,8],[452,12,396,14],[452,16,396,18,"Error"],[452,21,396,23],[452,22,396,24],[452,98,396,100],[452,99,396,101],[453,4,397,4],[454,4,398,4],[454,11,398,11],[454,15,398,11,"requestAsync"],[454,21,398,23],[454,22,398,23,"requestAsync"],[454,34,398,23],[454,36,398,24,"discovery"],[454,45,398,33],[454,46,398,34,"userInfoEndpoint"],[454,62,398,50],[454,64,398,52],[455,6,399,8,"headers"],[455,13,399,15],[455,15,399,17],[456,8,400,12],[456,22,400,26],[456,24,400,28],[456,59,400,63],[457,8,401,12,"Authorization"],[457,21,401,25],[457,23,401,27],[457,33,401,37,"config"],[457,39,401,43],[457,40,401,44,"accessToken"],[457,51,401,55],[458,6,402,8],[458,7,402,9],[459,6,403,8,"dataType"],[459,14,403,16],[459,16,403,18],[459,22,403,24],[460,6,404,8,"method"],[460,12,404,14],[460,14,404,16],[461,4,405,4],[461,5,405,5],[461,6,405,6],[462,2,406,0],[463,0,406,1],[463,3]],"functionMap":{"names":["<global>","getCurrentTimeInSeconds","TokenResponse","TokenResponse.isTokenFresh","TokenResponse.fromQueryParams","TokenResponse#constructor","TokenResponse#applyResponseConfig","TokenResponse#getRequestConfig","TokenResponse#refreshAsync","TokenResponse#shouldRefresh","Request","Request#constructor","Request#performAsync","Request#getRequestConfig","Request#getQueryBody","TokenRequest","constructor","getHeaders","performAsync","getQueryBody","AccessTokenRequest","AccessTokenRequest#constructor","AccessTokenRequest#getQueryBody","AccessTokenRequest#getRequestConfig","RefreshTokenRequest","RefreshTokenRequest#constructor","RefreshTokenRequest#getQueryBody","RefreshTokenRequest#getRequestConfig","RevokeTokenRequest","RevokeTokenRequest#constructor","RevokeTokenRequest#getHeaders","RevokeTokenRequest#performAsync","RevokeTokenRequest#getRequestConfig","RevokeTokenRequest#getQueryBody","exchangeCodeAsync","refreshAsync","revokeAsync","fetchUserInfoAsync"],"mappings":"AAA;OCS;CDE;OEM;ICO;KDc;IEM;KFW;IGa;KHU;IIC;KJS;IKC;KLW;IMC;KNW;IOC;KPG;CFC;OUC;ICE;KDE;IEC;KFE;IGC;KHE;IIC;KJE;CVC;OeI;ICM;KDO;IEC;KFY;IGC;KHqB;IIC;KJmB;CfC;OoBM;ICG;KDS;IEC;KFS;IGC;KHU;CpBC;OwBM;ICE;KDI;IEC;KFM;IGC;KHS;CxBC;O4BM;ICK;KDO;IEC;KFY;IGM;KHQ;IIC;KJO;IKC;KLa;C5BC;OkCS;ClCG;OmCc;CnCG;OoCS;CpCG;OqCS;CrCY"},"hasCjsExports":false},"type":"js/module"}]}