{"dependencies":[{"name":"expo-crypto","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":38,"index":38}}],"key":"+Akla+LrhuGGU54C9zXxLPlFUv4=","exportNames":["*"],"imports":1}},{"name":"invariant","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":39},"end":{"line":2,"column":34,"index":73}}],"key":"4HPAaDQ25ZwZ2dzTLatXuUucZUM=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.generateRandom = generateRandom;\n  exports.deriveChallengeAsync = deriveChallengeAsync;\n  exports.buildCodeAsync = buildCodeAsync;\n  exports.generateHexStringAsync = generateHexStringAsync;\n  var _expoCrypto = require(_dependencyMap[0], \"expo-crypto\");\n  var Crypto = _interopNamespace(_expoCrypto);\n  var _invariant = require(_dependencyMap[1], \"invariant\");\n  var invariant = _interopDefault(_invariant);\n  const CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  function convertBufferToString(buffer) {\n    const state = [];\n    for (let i = 0; i < buffer.byteLength; i += 1) {\n      const index = buffer[i] % CHARSET.length;\n      state.push(CHARSET[index]);\n    }\n    return state.join('');\n  }\n  function convertToUrlSafeString(b64) {\n    return b64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n  }\n  function generateRandom(size) {\n    const buffer = Crypto.getRandomValues(new Uint8Array(size));\n    return convertBufferToString(buffer);\n  }\n  /**\n   * Proof key for Code Exchange by OAuth Public Clients (RFC 7636), Section 4.1\n   * [Section 4.1](https://tools.ietf.org/html/rfc7636#section-4.1)\n   */\n  async function deriveChallengeAsync(code) {\n    // 43 is the minimum, and 128 is the maximum.\n    (0, invariant.default)(code.length > 42 && code.length < 129, 'Invalid code length for PKCE.');\n    const buffer = await Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, code, {\n      encoding: Crypto.CryptoEncoding.BASE64\n    });\n    return convertToUrlSafeString(buffer);\n  }\n  async function buildCodeAsync(size = 128) {\n    // This method needs to be resolved like all other native methods.\n    const codeVerifier = generateRandom(size);\n    const codeChallenge = await deriveChallengeAsync(codeVerifier);\n    return {\n      codeVerifier,\n      codeChallenge\n    };\n  }\n  /**\n   * Digest a random string with hex encoding, useful for creating `nonce`s.\n   */\n  async function generateHexStringAsync(size) {\n    const value = generateRandom(size);\n    const buffer = await Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, value, {\n      encoding: Crypto.CryptoEncoding.HEX\n    });\n    return convertToUrlSafeString(buffer);\n  }\n});","lineCount":82,"map":[[27,2,15,0,"exports"],[27,9,15,0],[27,10,15,0,"generateRandom"],[27,24,15,0],[27,27,15,0,"generateRandom"],[27,41,15,0],[28,2,23,0,"exports"],[28,9,23,0],[28,10,23,0,"deriveChallengeAsync"],[28,30,23,0],[28,33,23,0,"deriveChallengeAsync"],[28,53,23,0],[29,2,31,0,"exports"],[29,9,31,0],[29,10,31,0,"buildCodeAsync"],[29,24,31,0],[29,27,31,0,"buildCodeAsync"],[29,41,31,0],[30,2,40,0,"exports"],[30,9,40,0],[30,10,40,0,"generateHexStringAsync"],[30,32,40,0],[30,35,40,0,"generateHexStringAsync"],[30,57,40,0],[31,2,1,0],[31,6,1,0,"_expoCrypto"],[31,17,1,0],[31,20,1,0,"require"],[31,27,1,0],[31,28,1,0,"_dependencyMap"],[31,42,1,0],[32,2,1,0],[32,6,1,0,"Crypto"],[32,12,1,0],[32,15,1,0,"_interopNamespace"],[32,32,1,0],[32,33,1,0,"_expoCrypto"],[32,44,1,0],[33,2,2,0],[33,6,2,0,"_invariant"],[33,16,2,0],[33,19,2,0,"require"],[33,26,2,0],[33,27,2,0,"_dependencyMap"],[33,41,2,0],[34,2,2,0],[34,6,2,0,"invariant"],[34,15,2,0],[34,18,2,0,"_interopDefault"],[34,33,2,0],[34,34,2,0,"_invariant"],[34,44,2,0],[35,2,3,0],[35,8,3,6,"CHARSET"],[35,15,3,13],[35,18,3,16],[35,82,3,80],[36,2,4,0],[36,11,4,9,"convertBufferToString"],[36,32,4,30,"convertBufferToString"],[36,33,4,31,"buffer"],[36,39,4,37],[36,41,4,39],[37,4,5,4],[37,10,5,10,"state"],[37,15,5,15],[37,18,5,18],[37,20,5,20],[38,4,6,4],[38,9,6,9],[38,13,6,13,"i"],[38,14,6,14],[38,17,6,17],[38,18,6,18],[38,20,6,20,"i"],[38,21,6,21],[38,24,6,24,"buffer"],[38,30,6,30],[38,31,6,31,"byteLength"],[38,41,6,41],[38,43,6,43,"i"],[38,44,6,44],[38,48,6,48],[38,49,6,49],[38,51,6,51],[39,6,7,8],[39,12,7,14,"index"],[39,17,7,19],[39,20,7,22,"buffer"],[39,26,7,28],[39,27,7,29,"i"],[39,28,7,30],[39,29,7,31],[39,32,7,34,"CHARSET"],[39,39,7,41],[39,40,7,42,"length"],[39,46,7,48],[40,6,8,8,"state"],[40,11,8,13],[40,12,8,14,"push"],[40,16,8,18],[40,17,8,19,"CHARSET"],[40,24,8,26],[40,25,8,27,"index"],[40,30,8,32],[40,31,8,33],[40,32,8,34],[41,4,9,4],[42,4,10,4],[42,11,10,11,"state"],[42,16,10,16],[42,17,10,17,"join"],[42,21,10,21],[42,22,10,22],[42,24,10,24],[42,25,10,25],[43,2,11,0],[44,2,12,0],[44,11,12,9,"convertToUrlSafeString"],[44,33,12,31,"convertToUrlSafeString"],[44,34,12,32,"b64"],[44,37,12,35],[44,39,12,37],[45,4,13,4],[45,11,13,11,"b64"],[45,14,13,14],[45,15,13,15,"replace"],[45,22,13,22],[45,23,13,23],[45,28,13,28],[45,30,13,30],[45,33,13,33],[45,34,13,34],[45,35,13,35,"replace"],[45,42,13,42],[45,43,13,43],[45,48,13,48],[45,50,13,50],[45,53,13,53],[45,54,13,54],[45,55,13,55,"replace"],[45,62,13,62],[45,63,13,63],[45,67,13,67],[45,69,13,69],[45,71,13,71],[45,72,13,72],[46,2,14,0],[47,2,15,7],[47,11,15,16,"generateRandom"],[47,25,15,30,"generateRandom"],[47,26,15,31,"size"],[47,30,15,35],[47,32,15,37],[48,4,16,4],[48,10,16,10,"buffer"],[48,16,16,16],[48,19,16,19,"Crypto"],[48,25,16,25],[48,26,16,26,"getRandomValues"],[48,41,16,41],[48,42,16,42],[48,46,16,46,"Uint8Array"],[48,56,16,56],[48,57,16,57,"size"],[48,61,16,61],[48,62,16,62],[48,63,16,63],[49,4,17,4],[49,11,17,11,"convertBufferToString"],[49,32,17,32],[49,33,17,33,"buffer"],[49,39,17,39],[49,40,17,40],[50,2,18,0],[51,2,19,0],[52,0,20,0],[53,0,21,0],[54,0,22,0],[55,2,23,7],[55,17,23,22,"deriveChallengeAsync"],[55,37,23,42,"deriveChallengeAsync"],[55,38,23,43,"code"],[55,42,23,47],[55,44,23,49],[56,4,24,4],[57,4,25,4],[57,8,25,4,"invariant"],[57,17,25,13],[57,18,25,13,"default"],[57,25,25,13],[57,27,25,14,"code"],[57,31,25,18],[57,32,25,19,"length"],[57,38,25,25],[57,41,25,28],[57,43,25,30],[57,47,25,34,"code"],[57,51,25,38],[57,52,25,39,"length"],[57,58,25,45],[57,61,25,48],[57,64,25,51],[57,66,25,53],[57,97,25,84],[57,98,25,85],[58,4,26,4],[58,10,26,10,"buffer"],[58,16,26,16],[58,19,26,19],[58,25,26,25,"Crypto"],[58,31,26,31],[58,32,26,32,"digestStringAsync"],[58,49,26,49],[58,50,26,50,"Crypto"],[58,56,26,56],[58,57,26,57,"CryptoDigestAlgorithm"],[58,78,26,78],[58,79,26,79,"SHA256"],[58,85,26,85],[58,87,26,87,"code"],[58,91,26,91],[58,93,26,93],[59,6,27,8,"encoding"],[59,14,27,16],[59,16,27,18,"Crypto"],[59,22,27,24],[59,23,27,25,"CryptoEncoding"],[59,37,27,39],[59,38,27,40,"BASE64"],[60,4,28,4],[60,5,28,5],[60,6,28,6],[61,4,29,4],[61,11,29,11,"convertToUrlSafeString"],[61,33,29,33],[61,34,29,34,"buffer"],[61,40,29,40],[61,41,29,41],[62,2,30,0],[63,2,31,7],[63,17,31,22,"buildCodeAsync"],[63,31,31,36,"buildCodeAsync"],[63,32,31,37,"size"],[63,36,31,41],[63,39,31,44],[63,42,31,47],[63,44,31,49],[64,4,32,4],[65,4,33,4],[65,10,33,10,"codeVerifier"],[65,22,33,22],[65,25,33,25,"generateRandom"],[65,39,33,39],[65,40,33,40,"size"],[65,44,33,44],[65,45,33,45],[66,4,34,4],[66,10,34,10,"codeChallenge"],[66,23,34,23],[66,26,34,26],[66,32,34,32,"deriveChallengeAsync"],[66,52,34,52],[66,53,34,53,"codeVerifier"],[66,65,34,65],[66,66,34,66],[67,4,35,4],[67,11,35,11],[68,6,35,13,"codeVerifier"],[68,18,35,25],[69,6,35,27,"codeChallenge"],[70,4,35,41],[70,5,35,42],[71,2,36,0],[72,2,37,0],[73,0,38,0],[74,0,39,0],[75,2,40,7],[75,17,40,22,"generateHexStringAsync"],[75,39,40,44,"generateHexStringAsync"],[75,40,40,45,"size"],[75,44,40,49],[75,46,40,51],[76,4,41,4],[76,10,41,10,"value"],[76,15,41,15],[76,18,41,18,"generateRandom"],[76,32,41,32],[76,33,41,33,"size"],[76,37,41,37],[76,38,41,38],[77,4,42,4],[77,10,42,10,"buffer"],[77,16,42,16],[77,19,42,19],[77,25,42,25,"Crypto"],[77,31,42,31],[77,32,42,32,"digestStringAsync"],[77,49,42,49],[77,50,42,50,"Crypto"],[77,56,42,56],[77,57,42,57,"CryptoDigestAlgorithm"],[77,78,42,78],[77,79,42,79,"SHA256"],[77,85,42,85],[77,87,42,87,"value"],[77,92,42,92],[77,94,42,94],[78,6,43,8,"encoding"],[78,14,43,16],[78,16,43,18,"Crypto"],[78,22,43,24],[78,23,43,25,"CryptoEncoding"],[78,37,43,39],[78,38,43,40,"HEX"],[79,4,44,4],[79,5,44,5],[79,6,44,6],[80,4,45,4],[80,11,45,11,"convertToUrlSafeString"],[80,33,45,33],[80,34,45,34,"buffer"],[80,40,45,40],[80,41,45,41],[81,2,46,0],[82,0,46,1],[82,3]],"functionMap":{"names":["<global>","convertBufferToString","convertToUrlSafeString","generateRandom","deriveChallengeAsync","buildCodeAsync","generateHexStringAsync"],"mappings":"AAA;ACG;CDO;AEC;CFE;OGC;CHG;OIK;CJO;OKC;CLK;OMI;CNM"},"hasCjsExports":false},"type":"js/module"}]}