{"dependencies":[{"name":"../../common","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":55,"index":70}}],"key":"IDJz4HWb8BkS18xB4AVSbpQcs+Y=","exportNames":["*"],"imports":1}},{"name":"../constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":71},"end":{"line":4,"column":48,"index":119}}],"key":"eTOOXVNPpMK2U8dOAmBWjbEJ4yE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"ERROR_MESSAGES\", {\n    enumerable: true,\n    get: function () {\n      return ERROR_MESSAGES;\n    }\n  });\n  Object.defineProperty(exports, \"WARN_MESSAGES\", {\n    enumerable: true,\n    get: function () {\n      return WARN_MESSAGES;\n    }\n  });\n  Object.defineProperty(exports, \"LinearEasing\", {\n    enumerable: true,\n    get: function () {\n      return LinearEasing;\n    }\n  });\n  var _common = require(_dependencyMap[0], \"../../common\");\n  var _constants = require(_dependencyMap[1], \"../constants\");\n  const ERROR_MESSAGES = {\n    invalidPointsCount: () => `Invalid linear easing points count. There should be at least two points`,\n    invalidInputProgressValue: inputProgress => `Invalid input progress ${inputProgress} value, it should be a percentage between 0% and 100%`\n  };\n  const WARN_MESSAGES = {\n    inputProgressLessThanPrecedingPoint: (x, precedingX) => `Linear easing point x value ${x} is less than value of the preceding control point ${precedingX}. Value will be overridden by ${precedingX}`\n  };\n  const parsePercentage = percentage => {\n    let result;\n    if (typeof percentage === 'number') {\n      result = percentage;\n    } else if (_constants.PERCENTAGE_REGEX.test(percentage)) {\n      result = parseFloat(percentage) / 100;\n    }\n    if (result === undefined || result < 0 || result > 1) {\n      throw new _common.ReanimatedError(ERROR_MESSAGES.invalidInputProgressValue(percentage));\n    }\n    return result;\n  };\n  const extrapolate = (x, point1, point2) => {\n    const slope = (point2.y - point1.y) / (point2.x - point1.x);\n    return point1.y + slope * (x - point1.x);\n  };\n  class LinearEasing {\n    static easingName = 'linear';\n    constructor(points) {\n      if (points.length < 2) {\n        throw new _common.ReanimatedError(ERROR_MESSAGES.invalidPointsCount());\n      }\n      this.points = points.map(p => Array.isArray(p) && p.length === 1 ? p[0] : p);\n    }\n    toString() {\n      return `${LinearEasing.easingName}(${this.points.map(point => Array.isArray(point) ? `[${point.map(p => typeof p === 'string' ? `\"${p}\"` : p).join(', ')}]` : point).join(', ')})`;\n    }\n    normalize() {\n      const points = this.canonicalize();\n\n      // Extrapolate points if the input progress of the first one is greater than 0\n      // or the input progress of the last one is less than 1\n      if (points[0].x > 0) {\n        points.unshift({\n          x: 0,\n          y: extrapolate(0, points[0], points[1])\n        });\n      }\n      if (points[points.length - 1].x < 1) {\n        points.push({\n          x: 1,\n          y: extrapolate(1, points[points.length - 2], points[points.length - 1])\n        });\n      }\n      return {\n        name: LinearEasing.easingName,\n        points\n      };\n    }\n    canonicalize() {\n      const result = this.points.flatMap(point => Array.isArray(point) ? point.slice(1).map(x => ({\n        x: parsePercentage(x),\n        y: point[0]\n      })) : [{\n        y: point\n      }]);\n\n      // 1. If the first control point lacks an input progress value,\n      // set its input progress value to 0.\n      if (result[0].x === undefined) {\n        result[0].x = 0;\n      }\n\n      // 2.If the last control point lacks an input progress value,\n      // set its input progress value to 1.\n      if (result[result.length - 1].x === undefined) {\n        result[result.length - 1].x = 1;\n      }\n\n      // 3. If any control point has an input progress value that is less\n      // than the input progress value of any preceding control point, set\n      // its input progress value to the largest input progress value of\n      // any preceding control point.\n      let maxPrecedingX = 0;\n      for (let i = 1; i < result.length - 1; i++) {\n        const x = result[i].x;\n        if (x !== undefined) {\n          if (x < maxPrecedingX) {\n            _common.logger.warn(WARN_MESSAGES.inputProgressLessThanPrecedingPoint(x, maxPrecedingX));\n            result[i].x = maxPrecedingX;\n          } else {\n            maxPrecedingX = x;\n          }\n        }\n      }\n\n      // 4. If any control point still lacks an input progress value, then\n      // for each contiguous run of such control points, set their input\n      // progress values so that they are evenly spaced between the preceding\n      // and following control points with input progress values.\n      let precedingX = result[0].x;\n      let missingCount = 0;\n      for (let i = 1; i < result.length; i++) {\n        const x = result[i].x;\n        if (x === undefined) {\n          missingCount++;\n          continue;\n        }\n        if (missingCount > 0) {\n          const range = x - precedingX;\n          for (let j = 0; j < missingCount; j++) {\n            result[i - missingCount + j].x = precedingX + range * (j + 1) / (missingCount + 1);\n          }\n        }\n        precedingX = x;\n        missingCount = 0;\n      }\n      return result;\n    }\n  }\n});","lineCount":144,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,5,0,"Object"],[7,8,5,0],[7,9,5,0,"defineProperty"],[7,23,5,0],[7,24,5,0,"exports"],[7,31,5,0],[8,4,5,0,"enumerable"],[8,14,5,0],[9,4,5,0,"get"],[9,7,5,0],[9,18,5,0,"get"],[9,19,5,0],[10,6,5,0],[10,13,5,0,"ERROR_MESSAGES"],[10,27,5,0],[11,4,5,0],[12,2,5,0],[13,2,9,0,"Object"],[13,8,9,0],[13,9,9,0,"defineProperty"],[13,23,9,0],[13,24,9,0,"exports"],[13,31,9,0],[14,4,9,0,"enumerable"],[14,14,9,0],[15,4,9,0,"get"],[15,7,9,0],[15,18,9,0,"get"],[15,19,9,0],[16,6,9,0],[16,13,9,0,"WARN_MESSAGES"],[16,26,9,0],[17,4,9,0],[18,2,9,0],[19,2,28,0,"Object"],[19,8,28,0],[19,9,28,0,"defineProperty"],[19,23,28,0],[19,24,28,0,"exports"],[19,31,28,0],[20,4,28,0,"enumerable"],[20,14,28,0],[21,4,28,0,"get"],[21,7,28,0],[21,18,28,0,"get"],[21,19,28,0],[22,6,28,0],[22,13,28,0,"LinearEasing"],[22,25,28,0],[23,4,28,0],[24,2,28,0],[25,2,3,0],[25,6,3,0,"_common"],[25,13,3,0],[25,16,3,0,"require"],[25,23,3,0],[25,24,3,0,"_dependencyMap"],[25,38,3,0],[26,2,4,0],[26,6,4,0,"_constants"],[26,16,4,0],[26,19,4,0,"require"],[26,26,4,0],[26,27,4,0,"_dependencyMap"],[26,41,4,0],[27,2,5,7],[27,8,5,13,"ERROR_MESSAGES"],[27,22,5,27],[27,25,5,30],[28,4,6,2,"invalidPointsCount"],[28,22,6,20],[28,24,6,22,"invalidPointsCount"],[28,25,6,22],[28,30,6,28],[28,103,6,101],[29,4,7,2,"invalidInputProgressValue"],[29,29,7,27],[29,31,7,29,"inputProgress"],[29,44,7,42],[29,48,7,46],[29,74,7,72,"inputProgress"],[29,87,7,85],[30,2,8,0],[30,3,8,1],[31,2,9,7],[31,8,9,13,"WARN_MESSAGES"],[31,21,9,26],[31,24,9,29],[32,4,10,2,"inputProgressLessThanPrecedingPoint"],[32,39,10,37],[32,41,10,39,"inputProgressLessThanPrecedingPoint"],[32,42,10,40,"x"],[32,43,10,41],[32,45,10,43,"precedingX"],[32,55,10,53],[32,60,10,58],[32,91,10,89,"x"],[32,92,10,90],[32,146,10,144,"precedingX"],[32,156,10,154],[32,189,10,187,"precedingX"],[32,199,10,197],[33,2,11,0],[33,3,11,1],[34,2,12,0],[34,8,12,6,"parsePercentage"],[34,23,12,21],[34,26,12,24,"percentage"],[34,36,12,34],[34,40,12,38],[35,4,13,2],[35,8,13,6,"result"],[35,14,13,12],[36,4,14,2],[36,8,14,6],[36,15,14,13,"percentage"],[36,25,14,23],[36,30,14,28],[36,38,14,36],[36,40,14,38],[37,6,15,4,"result"],[37,12,15,10],[37,15,15,13,"percentage"],[37,25,15,23],[38,4,16,2],[38,5,16,3],[38,11,16,9],[38,15,16,13,"PERCENTAGE_REGEX"],[38,25,16,29],[38,26,16,29,"PERCENTAGE_REGEX"],[38,42,16,29],[38,43,16,30,"test"],[38,47,16,34],[38,48,16,35,"percentage"],[38,58,16,45],[38,59,16,46],[38,61,16,48],[39,6,17,4,"result"],[39,12,17,10],[39,15,17,13,"parseFloat"],[39,25,17,23],[39,26,17,24,"percentage"],[39,36,17,34],[39,37,17,35],[39,40,17,38],[39,43,17,41],[40,4,18,2],[41,4,19,2],[41,8,19,6,"result"],[41,14,19,12],[41,19,19,17,"undefined"],[41,28,19,26],[41,32,19,30,"result"],[41,38,19,36],[41,41,19,39],[41,42,19,40],[41,46,19,44,"result"],[41,52,19,50],[41,55,19,53],[41,56,19,54],[41,58,19,56],[42,6,20,4],[42,12,20,10],[42,16,20,14,"ReanimatedError"],[42,23,20,29],[42,24,20,29,"ReanimatedError"],[42,39,20,29],[42,40,20,30,"ERROR_MESSAGES"],[42,54,20,44],[42,55,20,45,"invalidInputProgressValue"],[42,80,20,70],[42,81,20,71,"percentage"],[42,91,20,81],[42,92,20,82],[42,93,20,83],[43,4,21,2],[44,4,22,2],[44,11,22,9,"result"],[44,17,22,15],[45,2,23,0],[45,3,23,1],[46,2,24,0],[46,8,24,6,"extrapolate"],[46,19,24,17],[46,22,24,20,"extrapolate"],[46,23,24,21,"x"],[46,24,24,22],[46,26,24,24,"point1"],[46,32,24,30],[46,34,24,32,"point2"],[46,40,24,38],[46,45,24,43],[47,4,25,2],[47,10,25,8,"slope"],[47,15,25,13],[47,18,25,16],[47,19,25,17,"point2"],[47,25,25,23],[47,26,25,24,"y"],[47,27,25,25],[47,30,25,28,"point1"],[47,36,25,34],[47,37,25,35,"y"],[47,38,25,36],[47,43,25,41,"point2"],[47,49,25,47],[47,50,25,48,"x"],[47,51,25,49],[47,54,25,52,"point1"],[47,60,25,58],[47,61,25,59,"x"],[47,62,25,60],[47,63,25,61],[48,4,26,2],[48,11,26,9,"point1"],[48,17,26,15],[48,18,26,16,"y"],[48,19,26,17],[48,22,26,20,"slope"],[48,27,26,25],[48,31,26,29,"x"],[48,32,26,30],[48,35,26,33,"point1"],[48,41,26,39],[48,42,26,40,"x"],[48,43,26,41],[48,44,26,42],[49,2,27,0],[49,3,27,1],[50,2,28,7],[50,8,28,13,"LinearEasing"],[50,20,28,25],[50,21,28,26],[51,4,29,2],[51,11,29,9,"easingName"],[51,21,29,19],[51,24,29,22],[51,32,29,30],[52,4,30,2,"constructor"],[52,15,30,13,"constructor"],[52,16,30,14,"points"],[52,22,30,20],[52,24,30,22],[53,6,31,4],[53,10,31,8,"points"],[53,16,31,14],[53,17,31,15,"length"],[53,23,31,21],[53,26,31,24],[53,27,31,25],[53,29,31,27],[54,8,32,6],[54,14,32,12],[54,18,32,16,"ReanimatedError"],[54,25,32,31],[54,26,32,31,"ReanimatedError"],[54,41,32,31],[54,42,32,32,"ERROR_MESSAGES"],[54,56,32,46],[54,57,32,47,"invalidPointsCount"],[54,75,32,65],[54,76,32,66],[54,77,32,67],[54,78,32,68],[55,6,33,4],[56,6,34,4],[56,10,34,8],[56,11,34,9,"points"],[56,17,34,15],[56,20,34,18,"points"],[56,26,34,24],[56,27,34,25,"map"],[56,30,34,28],[56,31,34,29,"p"],[56,32,34,30],[56,36,34,34,"Array"],[56,41,34,39],[56,42,34,40,"isArray"],[56,49,34,47],[56,50,34,48,"p"],[56,51,34,49],[56,52,34,50],[56,56,34,54,"p"],[56,57,34,55],[56,58,34,56,"length"],[56,64,34,62],[56,69,34,67],[56,70,34,68],[56,73,34,71,"p"],[56,74,34,72],[56,75,34,73],[56,76,34,74],[56,77,34,75],[56,80,34,78,"p"],[56,81,34,79],[56,82,34,80],[57,4,35,2],[58,4,36,2,"toString"],[58,12,36,10,"toString"],[58,13,36,10],[58,15,36,13],[59,6,37,4],[59,13,37,11],[59,16,37,14,"LinearEasing"],[59,28,37,26],[59,29,37,27,"easingName"],[59,39,37,37],[59,43,37,41],[59,47,37,45],[59,48,37,46,"points"],[59,54,37,52],[59,55,37,53,"map"],[59,58,37,56],[59,59,37,57,"point"],[59,64,37,62],[59,68,37,66,"Array"],[59,73,37,71],[59,74,37,72,"isArray"],[59,81,37,79],[59,82,37,80,"point"],[59,87,37,85],[59,88,37,86],[59,91,37,89],[59,95,37,93,"point"],[59,100,37,98],[59,101,37,99,"map"],[59,104,37,102],[59,105,37,103,"p"],[59,106,37,104],[59,110,37,108],[59,117,37,115,"p"],[59,118,37,116],[59,123,37,121],[59,131,37,129],[59,134,37,132],[59,138,37,136,"p"],[59,139,37,137],[59,142,37,140],[59,145,37,143,"p"],[59,146,37,144],[59,147,37,145],[59,148,37,146,"join"],[59,152,37,150],[59,153,37,151],[59,157,37,155],[59,158,37,156],[59,161,37,159],[59,164,37,162,"point"],[59,169,37,167],[59,170,37,168],[59,171,37,169,"join"],[59,175,37,173],[59,176,37,174],[59,180,37,178],[59,181,37,179],[59,184,37,182],[60,4,38,2],[61,4,39,2,"normalize"],[61,13,39,11,"normalize"],[61,14,39,11],[61,16,39,14],[62,6,40,4],[62,12,40,10,"points"],[62,18,40,16],[62,21,40,19],[62,25,40,23],[62,26,40,24,"canonicalize"],[62,38,40,36],[62,39,40,37],[62,40,40,38],[64,6,42,4],[65,6,43,4],[66,6,44,4],[66,10,44,8,"points"],[66,16,44,14],[66,17,44,15],[66,18,44,16],[66,19,44,17],[66,20,44,18,"x"],[66,21,44,19],[66,24,44,22],[66,25,44,23],[66,27,44,25],[67,8,45,6,"points"],[67,14,45,12],[67,15,45,13,"unshift"],[67,22,45,20],[67,23,45,21],[68,10,46,8,"x"],[68,11,46,9],[68,13,46,11],[68,14,46,12],[69,10,47,8,"y"],[69,11,47,9],[69,13,47,11,"extrapolate"],[69,24,47,22],[69,25,47,23],[69,26,47,24],[69,28,47,26,"points"],[69,34,47,32],[69,35,47,33],[69,36,47,34],[69,37,47,35],[69,39,47,37,"points"],[69,45,47,43],[69,46,47,44],[69,47,47,45],[69,48,47,46],[70,8,48,6],[70,9,48,7],[70,10,48,8],[71,6,49,4],[72,6,50,4],[72,10,50,8,"points"],[72,16,50,14],[72,17,50,15,"points"],[72,23,50,21],[72,24,50,22,"length"],[72,30,50,28],[72,33,50,31],[72,34,50,32],[72,35,50,33],[72,36,50,34,"x"],[72,37,50,35],[72,40,50,38],[72,41,50,39],[72,43,50,41],[73,8,51,6,"points"],[73,14,51,12],[73,15,51,13,"push"],[73,19,51,17],[73,20,51,18],[74,10,52,8,"x"],[74,11,52,9],[74,13,52,11],[74,14,52,12],[75,10,53,8,"y"],[75,11,53,9],[75,13,53,11,"extrapolate"],[75,24,53,22],[75,25,53,23],[75,26,53,24],[75,28,53,26,"points"],[75,34,53,32],[75,35,53,33,"points"],[75,41,53,39],[75,42,53,40,"length"],[75,48,53,46],[75,51,53,49],[75,52,53,50],[75,53,53,51],[75,55,53,53,"points"],[75,61,53,59],[75,62,53,60,"points"],[75,68,53,66],[75,69,53,67,"length"],[75,75,53,73],[75,78,53,76],[75,79,53,77],[75,80,53,78],[76,8,54,6],[76,9,54,7],[76,10,54,8],[77,6,55,4],[78,6,56,4],[78,13,56,11],[79,8,57,6,"name"],[79,12,57,10],[79,14,57,12,"LinearEasing"],[79,26,57,24],[79,27,57,25,"easingName"],[79,37,57,35],[80,8,58,6,"points"],[81,6,59,4],[81,7,59,5],[82,4,60,2],[83,4,61,2,"canonicalize"],[83,16,61,14,"canonicalize"],[83,17,61,14],[83,19,61,17],[84,6,62,4],[84,12,62,10,"result"],[84,18,62,16],[84,21,62,19],[84,25,62,23],[84,26,62,24,"points"],[84,32,62,30],[84,33,62,31,"flatMap"],[84,40,62,38],[84,41,62,39,"point"],[84,46,62,44],[84,50,62,48,"Array"],[84,55,62,53],[84,56,62,54,"isArray"],[84,63,62,61],[84,64,62,62,"point"],[84,69,62,67],[84,70,62,68],[84,73,62,71,"point"],[84,78,62,76],[84,79,62,77,"slice"],[84,84,62,82],[84,85,62,83],[84,86,62,84],[84,87,62,85],[84,88,62,86,"map"],[84,91,62,89],[84,92,62,90,"x"],[84,93,62,91],[84,98,62,96],[85,8,63,6,"x"],[85,9,63,7],[85,11,63,9,"parsePercentage"],[85,26,63,24],[85,27,63,25,"x"],[85,28,63,26],[85,29,63,27],[86,8,64,6,"y"],[86,9,64,7],[86,11,64,9,"point"],[86,16,64,14],[86,17,64,15],[86,18,64,16],[87,6,65,4],[87,7,65,5],[87,8,65,6],[87,9,65,7],[87,12,65,10],[87,13,65,11],[88,8,66,6,"y"],[88,9,66,7],[88,11,66,9,"point"],[89,6,67,4],[89,7,67,5],[89,8,67,6],[89,9,67,7],[91,6,69,4],[92,6,70,4],[93,6,71,4],[93,10,71,8,"result"],[93,16,71,14],[93,17,71,15],[93,18,71,16],[93,19,71,17],[93,20,71,18,"x"],[93,21,71,19],[93,26,71,24,"undefined"],[93,35,71,33],[93,37,71,35],[94,8,72,6,"result"],[94,14,72,12],[94,15,72,13],[94,16,72,14],[94,17,72,15],[94,18,72,16,"x"],[94,19,72,17],[94,22,72,20],[94,23,72,21],[95,6,73,4],[97,6,75,4],[98,6,76,4],[99,6,77,4],[99,10,77,8,"result"],[99,16,77,14],[99,17,77,15,"result"],[99,23,77,21],[99,24,77,22,"length"],[99,30,77,28],[99,33,77,31],[99,34,77,32],[99,35,77,33],[99,36,77,34,"x"],[99,37,77,35],[99,42,77,40,"undefined"],[99,51,77,49],[99,53,77,51],[100,8,78,6,"result"],[100,14,78,12],[100,15,78,13,"result"],[100,21,78,19],[100,22,78,20,"length"],[100,28,78,26],[100,31,78,29],[100,32,78,30],[100,33,78,31],[100,34,78,32,"x"],[100,35,78,33],[100,38,78,36],[100,39,78,37],[101,6,79,4],[103,6,81,4],[104,6,82,4],[105,6,83,4],[106,6,84,4],[107,6,85,4],[107,10,85,8,"maxPrecedingX"],[107,23,85,21],[107,26,85,24],[107,27,85,25],[108,6,86,4],[108,11,86,9],[108,15,86,13,"i"],[108,16,86,14],[108,19,86,17],[108,20,86,18],[108,22,86,20,"i"],[108,23,86,21],[108,26,86,24,"result"],[108,32,86,30],[108,33,86,31,"length"],[108,39,86,37],[108,42,86,40],[108,43,86,41],[108,45,86,43,"i"],[108,46,86,44],[108,48,86,46],[108,50,86,48],[109,8,87,6],[109,14,87,12,"x"],[109,15,87,13],[109,18,87,16,"result"],[109,24,87,22],[109,25,87,23,"i"],[109,26,87,24],[109,27,87,25],[109,28,87,26,"x"],[109,29,87,27],[110,8,88,6],[110,12,88,10,"x"],[110,13,88,11],[110,18,88,16,"undefined"],[110,27,88,25],[110,29,88,27],[111,10,89,8],[111,14,89,12,"x"],[111,15,89,13],[111,18,89,16,"maxPrecedingX"],[111,31,89,29],[111,33,89,31],[112,12,90,10,"logger"],[112,19,90,16],[112,20,90,16,"logger"],[112,26,90,16],[112,27,90,17,"warn"],[112,31,90,21],[112,32,90,22,"WARN_MESSAGES"],[112,45,90,35],[112,46,90,36,"inputProgressLessThanPrecedingPoint"],[112,81,90,71],[112,82,90,72,"x"],[112,83,90,73],[112,85,90,75,"maxPrecedingX"],[112,98,90,88],[112,99,90,89],[112,100,90,90],[113,12,91,10,"result"],[113,18,91,16],[113,19,91,17,"i"],[113,20,91,18],[113,21,91,19],[113,22,91,20,"x"],[113,23,91,21],[113,26,91,24,"maxPrecedingX"],[113,39,91,37],[114,10,92,8],[114,11,92,9],[114,17,92,15],[115,12,93,10,"maxPrecedingX"],[115,25,93,23],[115,28,93,26,"x"],[115,29,93,27],[116,10,94,8],[117,8,95,6],[118,6,96,4],[120,6,98,4],[121,6,99,4],[122,6,100,4],[123,6,101,4],[124,6,102,4],[124,10,102,8,"precedingX"],[124,20,102,18],[124,23,102,21,"result"],[124,29,102,27],[124,30,102,28],[124,31,102,29],[124,32,102,30],[124,33,102,31,"x"],[124,34,102,32],[125,6,103,4],[125,10,103,8,"missingCount"],[125,22,103,20],[125,25,103,23],[125,26,103,24],[126,6,104,4],[126,11,104,9],[126,15,104,13,"i"],[126,16,104,14],[126,19,104,17],[126,20,104,18],[126,22,104,20,"i"],[126,23,104,21],[126,26,104,24,"result"],[126,32,104,30],[126,33,104,31,"length"],[126,39,104,37],[126,41,104,39,"i"],[126,42,104,40],[126,44,104,42],[126,46,104,44],[127,8,105,6],[127,14,105,12,"x"],[127,15,105,13],[127,18,105,16,"result"],[127,24,105,22],[127,25,105,23,"i"],[127,26,105,24],[127,27,105,25],[127,28,105,26,"x"],[127,29,105,27],[128,8,106,6],[128,12,106,10,"x"],[128,13,106,11],[128,18,106,16,"undefined"],[128,27,106,25],[128,29,106,27],[129,10,107,8,"missingCount"],[129,22,107,20],[129,24,107,22],[130,10,108,8],[131,8,109,6],[132,8,110,6],[132,12,110,10,"missingCount"],[132,24,110,22],[132,27,110,25],[132,28,110,26],[132,30,110,28],[133,10,111,8],[133,16,111,14,"range"],[133,21,111,19],[133,24,111,22,"x"],[133,25,111,23],[133,28,111,26,"precedingX"],[133,38,111,36],[134,10,112,8],[134,15,112,13],[134,19,112,17,"j"],[134,20,112,18],[134,23,112,21],[134,24,112,22],[134,26,112,24,"j"],[134,27,112,25],[134,30,112,28,"missingCount"],[134,42,112,40],[134,44,112,42,"j"],[134,45,112,43],[134,47,112,45],[134,49,112,47],[135,12,113,10,"result"],[135,18,113,16],[135,19,113,17,"i"],[135,20,113,18],[135,23,113,21,"missingCount"],[135,35,113,33],[135,38,113,36,"j"],[135,39,113,37],[135,40,113,38],[135,41,113,39,"x"],[135,42,113,40],[135,45,113,43,"precedingX"],[135,55,113,53],[135,58,113,56,"range"],[135,63,113,61],[135,67,113,65,"j"],[135,68,113,66],[135,71,113,69],[135,72,113,70],[135,73,113,71],[135,77,113,75,"missingCount"],[135,89,113,87],[135,92,113,90],[135,93,113,91],[135,94,113,92],[136,10,114,8],[137,8,115,6],[138,8,116,6,"precedingX"],[138,18,116,16],[138,21,116,19,"x"],[138,22,116,20],[139,8,117,6,"missingCount"],[139,20,117,18],[139,23,117,21],[139,24,117,22],[140,6,118,4],[141,6,119,4],[141,13,119,11,"result"],[141,19,119,17],[142,4,120,2],[143,2,121,0],[144,0,121,1],[144,3]],"functionMap":{"names":["<global>","ERROR_MESSAGES.invalidPointsCount","ERROR_MESSAGES.invalidInputProgressValue","WARN_MESSAGES.inputProgressLessThanPrecedingPoint","parsePercentage","extrapolate","LinearEasing","LinearEasing#constructor","points.map$argument_0","LinearEasing#toString","point.map$argument_0","LinearEasing#normalize","LinearEasing#canonicalize","points.flatMap$argument_0","point.slice.map$argument_0"],"mappings":"AAA;sBCK,+ED;6BEC,+GF;uCGG,gKH;wBIE;CJW;oBKC;CLG;OMC;ECE;6BCI,kDD;GDC;EGC;yDDC,8CE,yCF,uBC;GHC;EKC;GLqB;EMC;uCCC,mDC;MDG;MDE;GNqD;CNC"},"hasCjsExports":false},"type":"js/module"}]}