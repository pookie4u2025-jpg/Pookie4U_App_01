{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":86,"index":86}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./AudioAvailability","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":87},"end":{"line":2,"column":61,"index":148}}],"key":"bSBjZOQMb5YC9PXMSfyUskC29qA=","exportNames":["*"],"imports":1}},{"name":"../AV","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":149},"end":{"line":3,"column":135,"index":284}}],"key":"CKKx7GRKZ+dPvq8Nb7FmQZUl2kI=","exportNames":["*"],"imports":1}},{"name":"../ExponentAV","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":285},"end":{"line":4,"column":39,"index":324}}],"key":"EFxOD5hqmWNncIOpuO+BTl9k+bk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _Sound;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"Sound\", {\n    enumerable: true,\n    get: function () {\n      return Sound;\n    }\n  });\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0]);\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[1]);\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[2]);\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[3]);\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _expoModulesCore = require(_dependencyMap[4]);\n  var _AudioAvailability = require(_dependencyMap[5]);\n  var _AV = require(_dependencyMap[6]);\n  var _ExponentAV = require(_dependencyMap[7]);\n  var ExponentAV = _interopDefault(_ExponentAV);\n  // @needsAudit\n  /**\n   * This class represents a sound corresponding to an Asset or URL.\n   * @return A newly constructed instance of `Audio.Sound`.\n   *\n   * @example\n   * ```ts\n   * const sound = new Audio.Sound();\n   * try {\n   *   await sound.loadAsync(require('./assets/sounds/hello.mp3'));\n   *   await sound.playAsync();\n   *   // Your sound is playing!\n   *\n   *   // Don't forget to unload the sound from memory\n   *   // when you are done using the Sound object\n   *   await sound.unloadAsync();\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * > Method not described below and the rest of the API for `Audio.Sound` is the same as the imperative playback API for `Video`.\n   * > See the [AV documentation](/versions/latest/sdk/av) for further information.\n   */\n  var Sound = /*#__PURE__*/function () {\n    function Sound() {\n      var _this = this;\n      (0, _classCallCheck.default)(this, Sound);\n      this._loaded = false;\n      this._loading = false;\n      this._key = null;\n      this._lastStatusUpdate = null;\n      this._lastStatusUpdateTime = null;\n      this._subscriptions = [];\n      this._eventEmitter = new _expoModulesCore.LegacyEventEmitter(ExponentAV.default);\n      this._coalesceStatusUpdatesInMillis = 100;\n      this._onPlaybackStatusUpdate = null;\n      this._onMetadataUpdate = null;\n      this._onAudioSampleReceived = null;\n      this._internalStatusUpdateCallback = _ref => {\n        var key = _ref.key,\n          status = _ref.status;\n        if (this._key === key) {\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n        }\n      };\n      this._internalMetadataUpdateCallback = _ref2 => {\n        var key = _ref2.key,\n          metadata = _ref2.metadata;\n        if (this._key === key) {\n          this._onMetadataUpdate?.(metadata);\n        }\n      };\n      this._internalErrorCallback = _ref3 => {\n        var key = _ref3.key,\n          error = _ref3.error;\n        if (this._key === key) {\n          this._errorCallback(error);\n        }\n      };\n      this._errorCallback = error => {\n        this._clearSubscriptions();\n        this._loaded = false;\n        this._key = null;\n        this._callOnPlaybackStatusUpdateForNewStatus((0, _AV.getUnloadedStatus)(error));\n      };\n      // ### Unified playback API ### (consistent with Video.js)\n      // All calls automatically call onPlaybackStatusUpdate as a side effect.\n      // Get status API\n      this.getStatusAsync = /*#__PURE__*/(0, _asyncToGenerator.default)(function* () {\n        if (_this._loaded) {\n          return _this._performOperationAndHandleStatusAsync(() => ExponentAV.default.getStatusForSound(_this._key));\n        }\n        var status = (0, _AV.getUnloadedStatus)();\n        _this._callOnPlaybackStatusUpdateForNewStatus(status);\n        return status;\n      });\n    }\n    return (0, _createClass.default)(Sound, [{\n      key: \"_callOnPlaybackStatusUpdateForNewStatus\",\n      value:\n      // Internal methods\n      function _callOnPlaybackStatusUpdateForNewStatus(status) {\n        var shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n        if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n          this._onPlaybackStatusUpdate(status);\n          this._lastStatusUpdateTime = new Date();\n          this._lastStatusUpdate = JSON.stringify(status);\n        }\n      }\n    }, {\n      key: \"_performOperationAndHandleStatusAsync\",\n      value: function () {\n        var _performOperationAndHandleStatusAsync2 = (0, _asyncToGenerator.default)(function* (operation) {\n          (0, _AudioAvailability.throwIfAudioIsDisabled)();\n          if (this._loaded) {\n            var status = yield operation();\n            this._callOnPlaybackStatusUpdateForNewStatus(status);\n            return status;\n          } else {\n            throw new Error('Cannot complete operation because sound is not loaded.');\n          }\n        });\n        function _performOperationAndHandleStatusAsync(_x) {\n          return _performOperationAndHandleStatusAsync2.apply(this, arguments);\n        }\n        return _performOperationAndHandleStatusAsync;\n      }()\n    }, {\n      key: \"_updateAudioSampleReceivedCallback\",\n      value: function _updateAudioSampleReceivedCallback() {\n        if (globalThis.__EXAV_setOnAudioSampleReceivedCallback == null) {\n          {\n            console.warn(\"expo-av: Failed to set up Audio Sample Buffer callback. Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.\");\n            return;\n          }\n        }\n        if (this._key == null) {\n          throw new Error('Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!');\n        }\n        if (typeof this._key !== 'number') {\n          throw new Error(`Cannot set Audio Sample Buffer callback when Sound instance key is of type ${typeof this._key}! (expected: number)`);\n        }\n        globalThis.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);\n      }\n    }, {\n      key: \"_subscribeToNativeEvents\",\n      value:\n      // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n      function _subscribeToNativeEvents() {\n        if (this._loaded) {\n          this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback), this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback));\n          this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback));\n        }\n      }\n    }, {\n      key: \"_clearSubscriptions\",\n      value: function _clearSubscriptions() {\n        this._subscriptions.forEach(e => e.remove());\n        this._subscriptions = [];\n      }\n    }, {\n      key: \"setOnPlaybackStatusUpdate\",\n      value:\n      /**\n       * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n       *\n       * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n       * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n       * while the media is in the loaded state.\n       *\n       * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n       * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n       *\n       * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n       */\n      function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n        this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n        this.getStatusAsync();\n      }\n      /**\n       * Sets a function to be called whenever the metadata of the sound object changes, if one is set.\n       * @param onMetadataUpdate A function taking a single object of type `AVMetadata` as a parameter.\n       * @platform ios\n       */\n    }, {\n      key: \"setOnMetadataUpdate\",\n      value: function setOnMetadataUpdate(onMetadataUpdate) {\n        this._onMetadataUpdate = onMetadataUpdate;\n      }\n      /**\n       * Sets a function to be called during playback, receiving the audio sample as parameter.\n       * @param callback A function taking the `AudioSampleCallback` as parameter.\n       */\n    }, {\n      key: \"setOnAudioSampleReceived\",\n      value: function setOnAudioSampleReceived(callback) {\n        this._onAudioSampleReceived = callback;\n        if (this._key != null) {\n          this._updateAudioSampleReceivedCallback();\n        }\n      }\n      // Loading / unloading API\n    }, {\n      key: \"loadAsync\",\n      value: function () {\n        var _loadAsync = (0, _asyncToGenerator.default)(function* (source) {\n          var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          var downloadFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n          (0, _AudioAvailability.throwIfAudioIsDisabled)();\n          if (this._loading) {\n            throw new Error('The Sound is already loading.');\n          }\n          if (!this._loaded) {\n            this._loading = true;\n            var _yield$getNativeSourc = yield (0, _AV.getNativeSourceAndFullInitialStatusForLoadAsync)(source, initialStatus, downloadFirst),\n              nativeSource = _yield$getNativeSourc.nativeSource,\n              fullInitialStatus = _yield$getNativeSourc.fullInitialStatus;\n            // This is a workaround, since using load with resolve / reject seems to not work.\n            return new Promise((resolve, reject) => {\n              var loadSuccess = result => {\n                var _result = (0, _slicedToArray.default)(result, 2),\n                  key = _result[0],\n                  status = _result[1];\n                this._key = key;\n                this._loaded = true;\n                this._loading = false;\n                this._subscribeToNativeEvents();\n                this._callOnPlaybackStatusUpdateForNewStatus(status);\n                resolve(status);\n              };\n              var loadError = error => {\n                this._loading = false;\n                reject(error);\n              };\n              ExponentAV.default.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n            });\n          } else {\n            throw new Error('The Sound is already loaded.');\n          }\n        });\n        function loadAsync(_x2) {\n          return _loadAsync.apply(this, arguments);\n        }\n        return loadAsync;\n      }()\n    }, {\n      key: \"unloadAsync\",\n      value: function () {\n        var _unloadAsync = (0, _asyncToGenerator.default)(function* () {\n          if (this._loaded) {\n            this._loaded = false;\n            var key = this._key;\n            this._key = null;\n            var status = yield ExponentAV.default.unloadForSound(key);\n            this._callOnPlaybackStatusUpdateForNewStatus(status);\n            this._clearSubscriptions();\n            return status;\n          } else {\n            return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n          }\n        });\n        function unloadAsync() {\n          return _unloadAsync.apply(this, arguments);\n        }\n        return unloadAsync;\n      }() // Set status API (only available while isLoaded = true)\n    }, {\n      key: \"setStatusAsync\",\n      value: function () {\n        var _setStatusAsync = (0, _asyncToGenerator.default)(function* (status) {\n          (0, _AV.assertStatusValuesInBounds)(status);\n          return this._performOperationAndHandleStatusAsync(() => ExponentAV.default.setStatusForSound(this._key, status));\n        });\n        function setStatusAsync(_x3) {\n          return _setStatusAsync.apply(this, arguments);\n        }\n        return setStatusAsync;\n      }()\n    }, {\n      key: \"replayAsync\",\n      value: function () {\n        var _replayAsync = (0, _asyncToGenerator.default)(function* () {\n          var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          if (status.positionMillis && status.positionMillis !== 0) {\n            throw new Error('Requested position after replay has to be 0.');\n          }\n          return this._performOperationAndHandleStatusAsync(() => ExponentAV.default.replaySound(this._key, {\n            ...status,\n            positionMillis: 0,\n            shouldPlay: true\n          }));\n        });\n        function replayAsync() {\n          return _replayAsync.apply(this, arguments);\n        }\n        return replayAsync;\n      }() // Methods of the Playback interface that are set via PlaybackMixin\n    }]);\n  }();\n  _Sound = Sound;\n  /** @deprecated Use `Sound.createAsync()` instead */\n  Sound.create = /*#__PURE__*/function () {\n    var _ref5 = (0, _asyncToGenerator.default)(function* (source) {\n      var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var onPlaybackStatusUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var downloadFirst = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      console.warn(`Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`);\n      return _Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n    });\n    return function (_x4) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  /**\n   * Creates and loads a sound from source.\n   *\n   * ```ts\n   * const { sound } = await Audio.Sound.createAsync(\n   *   source,\n   *   initialStatus,\n   *   onPlaybackStatusUpdate,\n   *   downloadFirst\n   * );\n   *\n   * // Which is equivalent to the following:\n   * const sound = new Audio.Sound();\n   * sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n   * await sound.loadAsync(source, initialStatus, downloadFirst);\n   * ```\n   *\n   * @param source The source of the sound. See the [AV documentation](/versions/latest/sdk/av/#playback-api) for details on the possible `source` values.\n   *\n   * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n   * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet` and the default\n   * initial playback status.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n   * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n   *\n   * @param downloadFirst If set to true, the system will attempt to download the resource to the device before loading. This value defaults to `true`.\n   * Note that at the moment, this will only work for `source`s of the form `require('path/to/file')` or `Asset` objects.\n   *\n   * @example\n   * ```ts\n   * try {\n   *   const { sound: soundObject, status } = await Audio.Sound.createAsync(\n   *     require('./assets/sounds/hello.mp3'),\n   *     { shouldPlay: true }\n   *   );\n   *   // Your sound is playing!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject` if creation succeeded.\n   */\n  Sound.createAsync = /*#__PURE__*/function () {\n    var _ref6 = (0, _asyncToGenerator.default)(function* (source) {\n      var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var onPlaybackStatusUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var downloadFirst = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var sound = new _Sound();\n      sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n      var status = yield sound.loadAsync(source, initialStatus, downloadFirst);\n      return {\n        sound,\n        status\n      };\n    });\n    return function (_x5) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  Object.assign(Sound.prototype, _AV.PlaybackMixin);\n});","lineCount":388,"map":[[13,2,29,0,"Object"],[13,8,29,0],[13,9,29,0,"defineProperty"],[13,23,29,0],[13,24,29,0,"exports"],[13,31,29,0],[14,4,29,0,"enumerable"],[14,14,29,0],[15,4,29,0,"get"],[15,7,29,0],[15,18,29,0,"get"],[15,19,29,0],[16,6,29,0],[16,13,29,0,"Sound"],[16,18,29,0],[17,4,29,0],[18,2,29,0],[19,2,287,1],[19,6,287,1,"_babelRuntimeHelpersSlicedToArray"],[19,39,287,1],[19,42,287,1,"require"],[19,49,287,1],[19,50,287,1,"_dependencyMap"],[19,64,287,1],[20,2,287,1],[20,6,287,1,"_slicedToArray"],[20,20,287,1],[20,23,287,1,"_interopDefault"],[20,38,287,1],[20,39,287,1,"_babelRuntimeHelpersSlicedToArray"],[20,72,287,1],[21,2,287,1],[21,6,287,1,"_babelRuntimeHelpersAsyncToGenerator"],[21,42,287,1],[21,45,287,1,"require"],[21,52,287,1],[21,53,287,1,"_dependencyMap"],[21,67,287,1],[22,2,287,1],[22,6,287,1,"_asyncToGenerator"],[22,23,287,1],[22,26,287,1,"_interopDefault"],[22,41,287,1],[22,42,287,1,"_babelRuntimeHelpersAsyncToGenerator"],[22,78,287,1],[23,2,287,1],[23,6,287,1,"_babelRuntimeHelpersClassCallCheck"],[23,40,287,1],[23,43,287,1,"require"],[23,50,287,1],[23,51,287,1,"_dependencyMap"],[23,65,287,1],[24,2,287,1],[24,6,287,1,"_classCallCheck"],[24,21,287,1],[24,24,287,1,"_interopDefault"],[24,39,287,1],[24,40,287,1,"_babelRuntimeHelpersClassCallCheck"],[24,74,287,1],[25,2,287,1],[25,6,287,1,"_babelRuntimeHelpersCreateClass"],[25,37,287,1],[25,40,287,1,"require"],[25,47,287,1],[25,48,287,1,"_dependencyMap"],[25,62,287,1],[26,2,287,1],[26,6,287,1,"_createClass"],[26,18,287,1],[26,21,287,1,"_interopDefault"],[26,36,287,1],[26,37,287,1,"_babelRuntimeHelpersCreateClass"],[26,68,287,1],[27,2,1,0],[27,6,1,0,"_expoModulesCore"],[27,22,1,0],[27,25,1,0,"require"],[27,32,1,0],[27,33,1,0,"_dependencyMap"],[27,47,1,0],[28,2,2,0],[28,6,2,0,"_AudioAvailability"],[28,24,2,0],[28,27,2,0,"require"],[28,34,2,0],[28,35,2,0,"_dependencyMap"],[28,49,2,0],[29,2,3,0],[29,6,3,0,"_AV"],[29,9,3,0],[29,12,3,0,"require"],[29,19,3,0],[29,20,3,0,"_dependencyMap"],[29,34,3,0],[30,2,4,0],[30,6,4,0,"_ExponentAV"],[30,17,4,0],[30,20,4,0,"require"],[30,27,4,0],[30,28,4,0,"_dependencyMap"],[30,42,4,0],[31,2,4,0],[31,6,4,0,"ExponentAV"],[31,16,4,0],[31,19,4,0,"_interopDefault"],[31,34,4,0],[31,35,4,0,"_ExponentAV"],[31,46,4,0],[32,2,5,0],[33,2,6,0],[34,0,7,0],[35,0,8,0],[36,0,9,0],[37,0,10,0],[38,0,11,0],[39,0,12,0],[40,0,13,0],[41,0,14,0],[42,0,15,0],[43,0,16,0],[44,0,17,0],[45,0,18,0],[46,0,19,0],[47,0,20,0],[48,0,21,0],[49,0,22,0],[50,0,23,0],[51,0,24,0],[52,0,25,0],[53,0,26,0],[54,0,27,0],[55,0,28,0],[56,2,6,0],[56,6,29,13,"Sound"],[56,11,29,18],[57,4,29,18],[57,13,29,18,"Sound"],[57,19,29,18],[58,6,29,18],[58,10,29,18,"_this"],[58,15,29,18],[59,6,29,18],[59,10,29,18,"_classCallCheck"],[59,25,29,18],[59,26,29,18,"default"],[59,33,29,18],[59,41,29,18,"Sound"],[59,46,29,18],[60,6,29,18],[60,11,30,4,"_loaded"],[60,18,30,11],[60,21,30,14],[60,26,30,19],[61,6,30,19],[61,11,31,4,"_loading"],[61,19,31,12],[61,22,31,15],[61,27,31,20],[62,6,31,20],[62,11,32,4,"_key"],[62,15,32,8],[62,18,32,11],[62,22,32,15],[63,6,32,15],[63,11,33,4,"_lastStatusUpdate"],[63,28,33,21],[63,31,33,24],[63,35,33,28],[64,6,33,28],[64,11,34,4,"_lastStatusUpdateTime"],[64,32,34,25],[64,35,34,28],[64,39,34,32],[65,6,34,32],[65,11,35,4,"_subscriptions"],[65,25,35,18],[65,28,35,21],[65,30,35,23],[66,6,35,23],[66,11,36,4,"_eventEmitter"],[66,24,36,17],[66,27,36,20],[66,31,36,24,"LegacyEventEmitter"],[66,47,36,42],[66,48,36,42,"LegacyEventEmitter"],[66,66,36,42],[66,67,36,43,"ExponentAV"],[66,77,36,53],[66,78,36,53,"default"],[66,85,36,53],[66,86,36,54],[67,6,36,54],[67,11,37,4,"_coalesceStatusUpdatesInMillis"],[67,41,37,34],[67,44,37,37],[67,47,37,40],[68,6,37,40],[68,11,38,4,"_onPlaybackStatusUpdate"],[68,34,38,27],[68,37,38,30],[68,41,38,34],[69,6,38,34],[69,11,39,4,"_onMetadataUpdate"],[69,28,39,21],[69,31,39,24],[69,35,39,28],[70,6,39,28],[70,11,40,4,"_onAudioSampleReceived"],[70,33,40,26],[70,36,40,29],[70,40,40,33],[71,6,40,33],[71,11,139,4,"_internalStatusUpdateCallback"],[71,40,139,33],[71,43,139,36,"_ref"],[71,47,139,36],[71,51,139,58],[72,8,139,58],[72,12,139,39,"key"],[72,15,139,42],[72,18,139,42,"_ref"],[72,22,139,42],[72,23,139,39,"key"],[72,26,139,42],[73,10,139,44,"status"],[73,16,139,50],[73,19,139,50,"_ref"],[73,23,139,50],[73,24,139,44,"status"],[73,30,139,50],[74,8,140,8],[74,12,140,12],[74,16,140,16],[74,17,140,17,"_key"],[74,21,140,21],[74,26,140,26,"key"],[74,29,140,29],[74,31,140,31],[75,10,141,12],[75,14,141,16],[75,15,141,17,"_callOnPlaybackStatusUpdateForNewStatus"],[75,54,141,56],[75,55,141,57,"status"],[75,61,141,63],[75,62,141,64],[76,8,142,8],[77,6,143,4],[77,7,143,5],[78,6,143,5],[78,11,144,4,"_internalMetadataUpdateCallback"],[78,42,144,35],[78,45,144,38,"_ref2"],[78,50,144,38],[78,54,144,62],[79,8,144,62],[79,12,144,41,"key"],[79,15,144,44],[79,18,144,44,"_ref2"],[79,23,144,44],[79,24,144,41,"key"],[79,27,144,44],[80,10,144,46,"metadata"],[80,18,144,54],[80,21,144,54,"_ref2"],[80,26,144,54],[80,27,144,46,"metadata"],[80,35,144,54],[81,8,145,8],[81,12,145,12],[81,16,145,16],[81,17,145,17,"_key"],[81,21,145,21],[81,26,145,26,"key"],[81,29,145,29],[81,31,145,31],[82,10,146,12],[82,14,146,16],[82,15,146,17,"_onMetadataUpdate"],[82,32,146,34],[82,35,146,37,"metadata"],[82,43,146,45],[82,44,146,46],[83,8,147,8],[84,6,148,4],[84,7,148,5],[85,6,148,5],[85,11,149,4,"_internalErrorCallback"],[85,33,149,26],[85,36,149,29,"_ref3"],[85,41,149,29],[85,45,149,49],[86,8,149,49],[86,12,149,32,"key"],[86,15,149,35],[86,18,149,35,"_ref3"],[86,23,149,35],[86,24,149,32,"key"],[86,27,149,35],[87,10,149,37,"error"],[87,15,149,42],[87,18,149,42,"_ref3"],[87,23,149,42],[87,24,149,37,"error"],[87,29,149,42],[88,8,150,8],[88,12,150,12],[88,16,150,16],[88,17,150,17,"_key"],[88,21,150,21],[88,26,150,26,"key"],[88,29,150,29],[88,31,150,31],[89,10,151,12],[89,14,151,16],[89,15,151,17,"_errorCallback"],[89,29,151,31],[89,30,151,32,"error"],[89,35,151,37],[89,36,151,38],[90,8,152,8],[91,6,153,4],[91,7,153,5],[92,6,153,5],[92,11,165,4,"_errorCallback"],[92,25,165,18],[92,28,165,22,"error"],[92,33,165,27],[92,37,165,32],[93,8,166,8],[93,12,166,12],[93,13,166,13,"_clearSubscriptions"],[93,32,166,32],[93,33,166,33],[93,34,166,34],[94,8,167,8],[94,12,167,12],[94,13,167,13,"_loaded"],[94,20,167,20],[94,23,167,23],[94,28,167,28],[95,8,168,8],[95,12,168,12],[95,13,168,13,"_key"],[95,17,168,17],[95,20,168,20],[95,24,168,24],[96,8,169,8],[96,12,169,12],[96,13,169,13,"_callOnPlaybackStatusUpdateForNewStatus"],[96,52,169,52],[96,53,169,53],[96,57,169,53,"getUnloadedStatus"],[96,60,169,70],[96,61,169,70,"getUnloadedStatus"],[96,78,169,70],[96,80,169,71,"error"],[96,85,169,76],[96,86,169,77],[96,87,169,78],[97,6,170,4],[97,7,170,5],[98,6,171,4],[99,6,172,4],[100,6,173,4],[101,6,173,4],[101,11,174,4,"getStatusAsync"],[101,25,174,18],[101,45,174,18,"_asyncToGenerator"],[101,62,174,18],[101,63,174,18,"default"],[101,70,174,18],[101,72,174,21],[101,85,174,33],[102,8,175,8],[102,12,175,12,"_this"],[102,17,175,16],[102,18,175,17,"_loaded"],[102,25,175,24],[102,27,175,26],[103,10,176,12],[103,17,176,19,"_this"],[103,22,176,23],[103,23,176,24,"_performOperationAndHandleStatusAsync"],[103,60,176,61],[103,61,176,62],[103,67,176,68,"ExponentAV"],[103,77,176,78],[103,78,176,78,"default"],[103,85,176,78],[103,86,176,79,"getStatusForSound"],[103,103,176,96],[103,104,176,97,"_this"],[103,109,176,101],[103,110,176,102,"_key"],[103,114,176,106],[103,115,176,107],[103,116,176,108],[104,8,177,8],[105,8,178,8],[105,12,178,14,"status"],[105,18,178,20],[105,21,178,23],[105,25,178,23,"getUnloadedStatus"],[105,28,178,40],[105,29,178,40,"getUnloadedStatus"],[105,46,178,40],[105,48,178,41],[105,49,178,42],[106,8,179,8,"_this"],[106,13,179,12],[106,14,179,13,"_callOnPlaybackStatusUpdateForNewStatus"],[106,53,179,52],[106,54,179,53,"status"],[106,60,179,59],[106,61,179,60],[107,8,180,8],[107,15,180,15,"status"],[107,21,180,21],[108,6,181,4],[108,7,181,5],[109,4,181,5],[110,4,181,5],[110,15,181,5,"_createClass"],[110,27,181,5],[110,28,181,5,"default"],[110,35,181,5],[110,37,181,5,"Sound"],[110,42,181,5],[111,6,181,5,"key"],[111,9,181,5],[112,6,181,5,"value"],[112,11,181,5],[113,6,96,4],[114,6,97,4],[114,15,97,4,"_callOnPlaybackStatusUpdateForNewStatus"],[114,54,97,43,"_callOnPlaybackStatusUpdateForNewStatus"],[114,55,97,44,"status"],[114,61,97,50],[114,63,97,52],[115,8,98,8],[115,12,98,14,"shouldDismissBasedOnCoalescing"],[115,42,98,44],[115,45,98,47],[115,49,98,51],[115,50,98,52,"_lastStatusUpdateTime"],[115,71,98,73],[115,75,99,12,"JSON"],[115,79,99,16],[115,80,99,17,"stringify"],[115,89,99,26],[115,90,99,27,"status"],[115,96,99,33],[115,97,99,34],[115,102,99,39],[115,106,99,43],[115,107,99,44,"_lastStatusUpdate"],[115,124,99,61],[115,128,100,12,"Date"],[115,132,100,16],[115,133,100,17,"now"],[115,136,100,20],[115,137,100,21],[115,138,100,22],[115,141,100,25],[115,145,100,29],[115,146,100,30,"_lastStatusUpdateTime"],[115,167,100,51],[115,168,100,52,"getTime"],[115,175,100,59],[115,176,100,60],[115,177,100,61],[115,180,100,64],[115,184,100,68],[115,185,100,69,"_coalesceStatusUpdatesInMillis"],[115,215,100,99],[116,8,101,8],[116,12,101,12],[116,16,101,16],[116,17,101,17,"_onPlaybackStatusUpdate"],[116,40,101,40],[116,44,101,44],[116,48,101,48],[116,52,101,52],[116,53,101,53,"shouldDismissBasedOnCoalescing"],[116,83,101,83],[116,85,101,85],[117,10,102,12],[117,14,102,16],[117,15,102,17,"_onPlaybackStatusUpdate"],[117,38,102,40],[117,39,102,41,"status"],[117,45,102,47],[117,46,102,48],[118,10,103,12],[118,14,103,16],[118,15,103,17,"_lastStatusUpdateTime"],[118,36,103,38],[118,39,103,41],[118,43,103,45,"Date"],[118,47,103,49],[118,48,103,50],[118,49,103,51],[119,10,104,12],[119,14,104,16],[119,15,104,17,"_lastStatusUpdate"],[119,32,104,34],[119,35,104,37,"JSON"],[119,39,104,41],[119,40,104,42,"stringify"],[119,49,104,51],[119,50,104,52,"status"],[119,56,104,58],[119,57,104,59],[120,8,105,8],[121,6,106,4],[122,4,106,5],[123,6,106,5,"key"],[123,9,106,5],[124,6,106,5,"value"],[124,11,106,5],[125,8,106,5],[125,12,106,5,"_performOperationAndHandleStatusAsync2"],[125,50,106,5],[125,57,106,5,"_asyncToGenerator"],[125,74,106,5],[125,75,106,5,"default"],[125,82,106,5],[125,84,107,4],[125,95,107,48,"operation"],[125,104,107,57],[125,106,107,59],[126,10,108,8],[126,14,108,8,"throwIfAudioIsDisabled"],[126,32,108,30],[126,33,108,30,"throwIfAudioIsDisabled"],[126,55,108,30],[126,57,108,31],[126,58,108,32],[127,10,109,8],[127,14,109,12],[127,18,109,16],[127,19,109,17,"_loaded"],[127,26,109,24],[127,28,109,26],[128,12,110,12],[128,16,110,18,"status"],[128,22,110,24],[128,31,110,33,"operation"],[128,40,110,42],[128,41,110,43],[128,42,110,44],[129,12,111,12],[129,16,111,16],[129,17,111,17,"_callOnPlaybackStatusUpdateForNewStatus"],[129,56,111,56],[129,57,111,57,"status"],[129,63,111,63],[129,64,111,64],[130,12,112,12],[130,19,112,19,"status"],[130,25,112,25],[131,10,113,8],[131,11,113,9],[131,17,114,13],[132,12,115,12],[132,18,115,18],[132,22,115,22,"Error"],[132,27,115,27],[132,28,115,28],[132,84,115,84],[132,85,115,85],[133,10,116,8],[134,8,117,4],[134,9,117,5],[135,8,117,5],[135,17,107,10,"_performOperationAndHandleStatusAsync"],[135,54,107,47,"_performOperationAndHandleStatusAsync"],[135,55,107,47,"_x"],[135,57,107,47],[136,10,107,47],[136,17,107,47,"_performOperationAndHandleStatusAsync2"],[136,55,107,47],[136,56,107,47,"apply"],[136,61,107,47],[136,68,107,47,"arguments"],[136,77,107,47],[137,8,107,47],[138,8,107,47],[138,15,107,10,"_performOperationAndHandleStatusAsync"],[138,52,107,47],[139,6,107,47],[140,4,107,47],[141,6,107,47,"key"],[141,9,107,47],[142,6,107,47,"value"],[142,11,107,47],[142,13,118,4],[142,22,118,4,"_updateAudioSampleReceivedCallback"],[142,56,118,38,"_updateAudioSampleReceivedCallback"],[142,57,118,38],[142,59,118,41],[143,8,119,8],[143,12,119,12,"globalThis"],[143,22,119,22],[143,23,119,23,"__EXAV_setOnAudioSampleReceivedCallback"],[143,62,119,62],[143,66,119,66],[143,70,119,70],[143,72,119,72],[144,10,120,68],[145,12,121,16,"console"],[145,19,121,23],[145,20,121,24,"warn"],[145,24,121,28],[145,313,123,140],[145,314,123,141],[146,12,124,16],[147,10,125,12],[148,8,129,8],[149,8,130,8],[149,12,130,12],[149,16,130,16],[149,17,130,17,"_key"],[149,21,130,21],[149,25,130,25],[149,29,130,29],[149,31,130,31],[150,10,131,12],[150,16,131,18],[150,20,131,22,"Error"],[150,25,131,27],[150,26,131,28],[150,137,131,139],[150,138,131,140],[151,8,132,8],[152,8,133,8],[152,12,133,12],[152,19,133,19],[152,23,133,23],[152,24,133,24,"_key"],[152,28,133,28],[152,33,133,33],[152,41,133,41],[152,43,133,43],[153,10,134,12],[153,16,134,18],[153,20,134,22,"Error"],[153,25,134,27],[153,26,134,28],[153,104,134,106],[153,111,134,113],[153,115,134,117],[153,116,135,17,"_key"],[153,120,135,21],[153,142,135,43],[153,143,135,44],[154,8,136,8],[155,8,137,8,"globalThis"],[155,18,137,18],[155,19,137,19,"__EXAV_setOnAudioSampleReceivedCallback"],[155,58,137,58],[155,59,137,59],[155,63,137,63],[155,64,137,64,"_key"],[155,68,137,68],[155,70,137,70],[155,74,137,74],[155,75,137,75,"_onAudioSampleReceived"],[155,97,137,97],[155,98,137,98],[156,6,138,4],[157,4,138,5],[158,6,138,5,"key"],[158,9,138,5],[159,6,138,5,"value"],[159,11,138,5],[160,6,154,4],[161,6,155,4],[161,15,155,4,"_subscribeToNativeEvents"],[161,39,155,28,"_subscribeToNativeEvents"],[161,40,155,28],[161,42,155,31],[162,8,156,8],[162,12,156,12],[162,16,156,16],[162,17,156,17,"_loaded"],[162,24,156,24],[162,26,156,26],[163,10,157,12],[163,14,157,16],[163,15,157,17,"_subscriptions"],[163,29,157,31],[163,30,157,32,"push"],[163,34,157,36],[163,35,157,37],[163,39,157,41],[163,40,157,42,"_eventEmitter"],[163,53,157,55],[163,54,157,56,"addListener"],[163,65,157,67],[163,66,157,68],[163,91,157,93],[163,93,157,95],[163,97,157,99],[163,98,157,100,"_internalStatusUpdateCallback"],[163,127,157,129],[163,128,157,130],[163,130,157,132],[163,134,157,136],[163,135,157,137,"_eventEmitter"],[163,148,157,150],[163,149,157,151,"addListener"],[163,160,157,162],[163,161,157,163],[163,180,157,182],[163,182,157,184],[163,186,157,188],[163,187,157,189,"_internalMetadataUpdateCallback"],[163,218,157,220],[163,219,157,221],[163,220,157,222],[164,10,158,12],[164,14,158,16],[164,15,158,17,"_subscriptions"],[164,29,158,31],[164,30,158,32,"push"],[164,34,158,36],[164,35,158,37],[164,39,158,41],[164,40,158,42,"_eventEmitter"],[164,53,158,55],[164,54,158,56,"addListener"],[164,65,158,67],[164,66,158,68],[164,86,158,88],[164,88,158,90],[164,92,158,94],[164,93,158,95,"_internalErrorCallback"],[164,115,158,117],[164,116,158,118],[164,117,158,119],[165,8,159,8],[166,6,160,4],[167,4,160,5],[168,6,160,5,"key"],[168,9,160,5],[169,6,160,5,"value"],[169,11,160,5],[169,13,161,4],[169,22,161,4,"_clearSubscriptions"],[169,41,161,23,"_clearSubscriptions"],[169,42,161,23],[169,44,161,26],[170,8,162,8],[170,12,162,12],[170,13,162,13,"_subscriptions"],[170,27,162,27],[170,28,162,28,"forEach"],[170,35,162,35],[170,36,162,37,"e"],[170,37,162,38],[170,41,162,43,"e"],[170,42,162,44],[170,43,162,45,"remove"],[170,49,162,51],[170,50,162,52],[170,51,162,53],[170,52,162,54],[171,8,163,8],[171,12,163,12],[171,13,163,13,"_subscriptions"],[171,27,163,27],[171,30,163,30],[171,32,163,32],[172,6,164,4],[173,4,164,5],[174,6,164,5,"key"],[174,9,164,5],[175,6,164,5,"value"],[175,11,164,5],[176,6,182,4],[177,0,183,0],[178,0,184,0],[179,0,185,0],[180,0,186,0],[181,0,187,0],[182,0,188,0],[183,0,189,0],[184,0,190,0],[185,0,191,0],[186,0,192,0],[187,0,193,0],[188,6,194,4],[188,15,194,4,"setOnPlaybackStatusUpdate"],[188,40,194,29,"setOnPlaybackStatusUpdate"],[188,41,194,30,"onPlaybackStatusUpdate"],[188,63,194,52],[188,65,194,54],[189,8,195,8],[189,12,195,12],[189,13,195,13,"_onPlaybackStatusUpdate"],[189,36,195,36],[189,39,195,39,"onPlaybackStatusUpdate"],[189,61,195,61],[190,8,196,8],[190,12,196,12],[190,13,196,13,"getStatusAsync"],[190,27,196,27],[190,28,196,28],[190,29,196,29],[191,6,197,4],[192,6,198,4],[193,0,199,0],[194,0,200,0],[195,0,201,0],[196,0,202,0],[197,4,198,4],[198,6,198,4,"key"],[198,9,198,4],[199,6,198,4,"value"],[199,11,198,4],[199,13,203,4],[199,22,203,4,"setOnMetadataUpdate"],[199,41,203,23,"setOnMetadataUpdate"],[199,42,203,24,"onMetadataUpdate"],[199,58,203,40],[199,60,203,42],[200,8,204,8],[200,12,204,12],[200,13,204,13,"_onMetadataUpdate"],[200,30,204,30],[200,33,204,33,"onMetadataUpdate"],[200,49,204,49],[201,6,205,4],[202,6,206,4],[203,0,207,0],[204,0,208,0],[205,0,209,0],[206,4,206,4],[207,6,206,4,"key"],[207,9,206,4],[208,6,206,4,"value"],[208,11,206,4],[208,13,210,4],[208,22,210,4,"setOnAudioSampleReceived"],[208,46,210,28,"setOnAudioSampleReceived"],[208,47,210,29,"callback"],[208,55,210,37],[208,57,210,39],[209,8,211,8],[209,12,211,12],[209,13,211,13,"_onAudioSampleReceived"],[209,35,211,35],[209,38,211,38,"callback"],[209,46,211,46],[210,8,212,8],[210,12,212,12],[210,16,212,16],[210,17,212,17,"_key"],[210,21,212,21],[210,25,212,25],[210,29,212,29],[210,31,212,31],[211,10,213,12],[211,14,213,16],[211,15,213,17,"_updateAudioSampleReceivedCallback"],[211,49,213,51],[211,50,213,52],[211,51,213,53],[212,8,214,8],[213,6,215,4],[214,6,216,4],[215,4,216,4],[216,6,216,4,"key"],[216,9,216,4],[217,6,216,4,"value"],[217,11,216,4],[218,8,216,4],[218,12,216,4,"_loadAsync"],[218,22,216,4],[218,29,216,4,"_asyncToGenerator"],[218,46,216,4],[218,47,216,4,"default"],[218,54,216,4],[218,56,217,4],[218,67,217,20,"source"],[218,73,217,26],[218,75,217,70],[219,10,217,70],[219,14,217,28,"initialStatus"],[219,27,217,41],[219,30,217,41,"arguments"],[219,39,217,41],[219,40,217,41,"length"],[219,46,217,41],[219,54,217,41,"arguments"],[219,63,217,41],[219,71,217,41,"undefined"],[219,80,217,41],[219,83,217,41,"arguments"],[219,92,217,41],[219,98,217,44],[219,99,217,45],[219,100,217,46],[220,10,217,46],[220,14,217,48,"downloadFirst"],[220,27,217,61],[220,30,217,61,"arguments"],[220,39,217,61],[220,40,217,61,"length"],[220,46,217,61],[220,54,217,61,"arguments"],[220,63,217,61],[220,71,217,61,"undefined"],[220,80,217,61],[220,83,217,61,"arguments"],[220,92,217,61],[220,98,217,64],[220,102,217,68],[221,10,218,8],[221,14,218,8,"throwIfAudioIsDisabled"],[221,32,218,30],[221,33,218,30,"throwIfAudioIsDisabled"],[221,55,218,30],[221,57,218,31],[221,58,218,32],[222,10,219,8],[222,14,219,12],[222,18,219,16],[222,19,219,17,"_loading"],[222,27,219,25],[222,29,219,27],[223,12,220,12],[223,18,220,18],[223,22,220,22,"Error"],[223,27,220,27],[223,28,220,28],[223,59,220,59],[223,60,220,60],[224,10,221,8],[225,10,222,8],[225,14,222,12],[225,15,222,13],[225,19,222,17],[225,20,222,18,"_loaded"],[225,27,222,25],[225,29,222,27],[226,12,223,12],[226,16,223,16],[226,17,223,17,"_loading"],[226,25,223,25],[226,28,223,28],[226,32,223,32],[227,12,224,12],[227,16,224,12,"_yield$getNativeSourc"],[227,37,224,12],[227,46,224,62],[227,50,224,62,"getNativeSourceAndFullInitialStatusForLoadAsync"],[227,53,224,109],[227,54,224,109,"getNativeSourceAndFullInitialStatusForLoadAsync"],[227,101,224,109],[227,103,224,110,"source"],[227,109,224,116],[227,111,224,118,"initialStatus"],[227,124,224,131],[227,126,224,133,"downloadFirst"],[227,139,224,146],[227,140,224,147],[228,14,224,20,"nativeSource"],[228,26,224,32],[228,29,224,32,"_yield$getNativeSourc"],[228,50,224,32],[228,51,224,20,"nativeSource"],[228,63,224,32],[229,14,224,34,"fullInitialStatus"],[229,31,224,51],[229,34,224,51,"_yield$getNativeSourc"],[229,55,224,51],[229,56,224,34,"fullInitialStatus"],[229,73,224,51],[230,12,225,12],[231,12,226,12],[231,19,226,19],[231,23,226,23,"Promise"],[231,30,226,30],[231,31,226,31],[231,32,226,32,"resolve"],[231,39,226,39],[231,41,226,41,"reject"],[231,47,226,47],[231,52,226,52],[232,14,227,16],[232,18,227,22,"loadSuccess"],[232,29,227,33],[232,32,227,37,"result"],[232,38,227,43],[232,42,227,48],[233,16,228,20],[233,20,228,20,"_result"],[233,27,228,20],[233,34,228,20,"_slicedToArray"],[233,48,228,20],[233,49,228,20,"default"],[233,56,228,20],[233,58,228,42,"result"],[233,64,228,48],[234,18,228,27,"key"],[234,21,228,30],[234,24,228,30,"_result"],[234,31,228,30],[235,18,228,32,"status"],[235,24,228,38],[235,27,228,38,"_result"],[235,34,228,38],[236,16,229,20],[236,20,229,24],[236,21,229,25,"_key"],[236,25,229,29],[236,28,229,32,"key"],[236,31,229,35],[237,16,230,20],[237,20,230,24],[237,21,230,25,"_loaded"],[237,28,230,32],[237,31,230,35],[237,35,230,39],[238,16,231,20],[238,20,231,24],[238,21,231,25,"_loading"],[238,29,231,33],[238,32,231,36],[238,37,231,41],[239,16,232,20],[239,20,232,24],[239,21,232,25,"_subscribeToNativeEvents"],[239,45,232,49],[239,46,232,50],[239,47,232,51],[240,16,233,20],[240,20,233,24],[240,21,233,25,"_callOnPlaybackStatusUpdateForNewStatus"],[240,60,233,64],[240,61,233,65,"status"],[240,67,233,71],[240,68,233,72],[241,16,234,20,"resolve"],[241,23,234,27],[241,24,234,28,"status"],[241,30,234,34],[241,31,234,35],[242,14,235,16],[242,15,235,17],[243,14,236,16],[243,18,236,22,"loadError"],[243,27,236,31],[243,30,236,35,"error"],[243,35,236,40],[243,39,236,45],[244,16,237,20],[244,20,237,24],[244,21,237,25,"_loading"],[244,29,237,33],[244,32,237,36],[244,37,237,41],[245,16,238,20,"reject"],[245,22,238,26],[245,23,238,27,"error"],[245,28,238,32],[245,29,238,33],[246,14,239,16],[246,15,239,17],[247,14,240,16,"ExponentAV"],[247,24,240,26],[247,25,240,26,"default"],[247,32,240,26],[247,33,240,27,"loadForSound"],[247,45,240,39],[247,46,240,40,"nativeSource"],[247,58,240,52],[247,60,240,54,"fullInitialStatus"],[247,77,240,71],[247,78,240,72],[247,79,240,73,"then"],[247,83,240,77],[247,84,240,78,"loadSuccess"],[247,95,240,89],[247,96,240,90],[247,97,240,91,"catch"],[247,102,240,96],[247,103,240,97,"loadError"],[247,112,240,106],[247,113,240,107],[248,12,241,12],[248,13,241,13],[248,14,241,14],[249,10,242,8],[249,11,242,9],[249,17,243,13],[250,12,244,12],[250,18,244,18],[250,22,244,22,"Error"],[250,27,244,27],[250,28,244,28],[250,58,244,58],[250,59,244,59],[251,10,245,8],[252,8,246,4],[252,9,246,5],[253,8,246,5],[253,17,217,10,"loadAsync"],[253,26,217,19,"loadAsync"],[253,27,217,19,"_x2"],[253,30,217,19],[254,10,217,19],[254,17,217,19,"_loadAsync"],[254,27,217,19],[254,28,217,19,"apply"],[254,33,217,19],[254,40,217,19,"arguments"],[254,49,217,19],[255,8,217,19],[256,8,217,19],[256,15,217,10,"loadAsync"],[256,24,217,19],[257,6,217,19],[258,4,217,19],[259,6,217,19,"key"],[259,9,217,19],[260,6,217,19,"value"],[260,11,217,19],[261,8,217,19],[261,12,217,19,"_unloadAsync"],[261,24,217,19],[261,31,217,19,"_asyncToGenerator"],[261,48,217,19],[261,49,217,19,"default"],[261,56,217,19],[261,58,247,4],[261,71,247,24],[262,10,248,8],[262,14,248,12],[262,18,248,16],[262,19,248,17,"_loaded"],[262,26,248,24],[262,28,248,26],[263,12,249,12],[263,16,249,16],[263,17,249,17,"_loaded"],[263,24,249,24],[263,27,249,27],[263,32,249,32],[264,12,250,12],[264,16,250,18,"key"],[264,19,250,21],[264,22,250,24],[264,26,250,28],[264,27,250,29,"_key"],[264,31,250,33],[265,12,251,12],[265,16,251,16],[265,17,251,17,"_key"],[265,21,251,21],[265,24,251,24],[265,28,251,28],[266,12,252,12],[266,16,252,18,"status"],[266,22,252,24],[266,31,252,33,"ExponentAV"],[266,41,252,43],[266,42,252,43,"default"],[266,49,252,43],[266,50,252,44,"unloadForSound"],[266,64,252,58],[266,65,252,59,"key"],[266,68,252,62],[266,69,252,63],[267,12,253,12],[267,16,253,16],[267,17,253,17,"_callOnPlaybackStatusUpdateForNewStatus"],[267,56,253,56],[267,57,253,57,"status"],[267,63,253,63],[267,64,253,64],[268,12,254,12],[268,16,254,16],[268,17,254,17,"_clearSubscriptions"],[268,36,254,36],[268,37,254,37],[268,38,254,38],[269,12,255,12],[269,19,255,19,"status"],[269,25,255,25],[270,10,256,8],[270,11,256,9],[270,17,257,13],[271,12,258,12],[271,19,258,19],[271,23,258,23],[271,24,258,24,"getStatusAsync"],[271,38,258,38],[271,39,258,39],[271,40,258,40],[271,41,258,41],[271,42,258,42],[272,10,259,8],[273,8,260,4],[273,9,260,5],[274,8,260,5],[274,17,247,10,"unloadAsync"],[274,28,247,21,"unloadAsync"],[274,29,247,21],[275,10,247,21],[275,17,247,21,"_unloadAsync"],[275,29,247,21],[275,30,247,21,"apply"],[275,35,247,21],[275,42,247,21,"arguments"],[275,51,247,21],[276,8,247,21],[277,8,247,21],[277,15,247,10,"unloadAsync"],[277,26,247,21],[278,6,247,21],[278,10,261,4],[279,4,261,4],[280,6,261,4,"key"],[280,9,261,4],[281,6,261,4,"value"],[281,11,261,4],[282,8,261,4],[282,12,261,4,"_setStatusAsync"],[282,27,261,4],[282,34,261,4,"_asyncToGenerator"],[282,51,261,4],[282,52,261,4,"default"],[282,59,261,4],[282,61,262,4],[282,72,262,25,"status"],[282,78,262,31],[282,80,262,33],[283,10,263,8],[283,14,263,8,"assertStatusValuesInBounds"],[283,17,263,34],[283,18,263,34,"assertStatusValuesInBounds"],[283,44,263,34],[283,46,263,35,"status"],[283,52,263,41],[283,53,263,42],[284,10,264,8],[284,17,264,15],[284,21,264,19],[284,22,264,20,"_performOperationAndHandleStatusAsync"],[284,59,264,57],[284,60,264,58],[284,66,264,64,"ExponentAV"],[284,76,264,74],[284,77,264,74,"default"],[284,84,264,74],[284,85,264,75,"setStatusForSound"],[284,102,264,92],[284,103,264,93],[284,107,264,97],[284,108,264,98,"_key"],[284,112,264,102],[284,114,264,104,"status"],[284,120,264,110],[284,121,264,111],[284,122,264,112],[285,8,265,4],[285,9,265,5],[286,8,265,5],[286,17,262,10,"setStatusAsync"],[286,31,262,24,"setStatusAsync"],[286,32,262,24,"_x3"],[286,35,262,24],[287,10,262,24],[287,17,262,24,"_setStatusAsync"],[287,32,262,24],[287,33,262,24,"apply"],[287,38,262,24],[287,45,262,24,"arguments"],[287,54,262,24],[288,8,262,24],[289,8,262,24],[289,15,262,10,"setStatusAsync"],[289,29,262,24],[290,6,262,24],[291,4,262,24],[292,6,262,24,"key"],[292,9,262,24],[293,6,262,24,"value"],[293,11,262,24],[294,8,262,24],[294,12,262,24,"_replayAsync"],[294,24,262,24],[294,31,262,24,"_asyncToGenerator"],[294,48,262,24],[294,49,262,24,"default"],[294,56,262,24],[294,58,266,4],[294,71,266,35],[295,10,266,35],[295,14,266,22,"status"],[295,20,266,28],[295,23,266,28,"arguments"],[295,32,266,28],[295,33,266,28,"length"],[295,39,266,28],[295,47,266,28,"arguments"],[295,56,266,28],[295,64,266,28,"undefined"],[295,73,266,28],[295,76,266,28,"arguments"],[295,85,266,28],[295,91,266,31],[295,92,266,32],[295,93,266,33],[296,10,267,8],[296,14,267,12,"status"],[296,20,267,18],[296,21,267,19,"positionMillis"],[296,35,267,33],[296,39,267,37,"status"],[296,45,267,43],[296,46,267,44,"positionMillis"],[296,60,267,58],[296,65,267,63],[296,66,267,64],[296,68,267,66],[297,12,268,12],[297,18,268,18],[297,22,268,22,"Error"],[297,27,268,27],[297,28,268,28],[297,74,268,74],[297,75,268,75],[298,10,269,8],[299,10,270,8],[299,17,270,15],[299,21,270,19],[299,22,270,20,"_performOperationAndHandleStatusAsync"],[299,59,270,57],[299,60,270,58],[299,66,270,64,"ExponentAV"],[299,76,270,74],[299,77,270,74,"default"],[299,84,270,74],[299,85,270,75,"replaySound"],[299,96,270,86],[299,97,270,87],[299,101,270,91],[299,102,270,92,"_key"],[299,106,270,96],[299,108,270,98],[300,12,271,12],[300,15,271,15,"status"],[300,21,271,21],[301,12,272,12,"positionMillis"],[301,26,272,26],[301,28,272,28],[301,29,272,29],[302,12,273,12,"shouldPlay"],[302,22,273,22],[302,24,273,24],[303,10,274,8],[303,11,274,9],[303,12,274,10],[303,13,274,11],[304,8,275,4],[304,9,275,5],[305,8,275,5],[305,17,266,10,"replayAsync"],[305,28,266,21,"replayAsync"],[305,29,266,21],[306,10,266,21],[306,17,266,21,"_replayAsync"],[306,29,266,21],[306,30,266,21,"apply"],[306,35,266,21],[306,42,266,21,"arguments"],[306,51,266,21],[307,8,266,21],[308,8,266,21],[308,15,266,10,"replayAsync"],[308,26,266,21],[309,6,266,21],[309,10,276,4],[310,4,276,4],[311,2,276,4],[312,2,276,4,"_Sound"],[312,8,276,4],[312,11,29,13,"Sound"],[312,16,29,18],[313,2,41,4],[314,2,29,13,"Sound"],[314,7,29,18],[314,8,42,11,"create"],[314,14,42,17],[315,4,42,17],[315,8,42,17,"_ref5"],[315,13,42,17],[315,20,42,17,"_asyncToGenerator"],[315,37,42,17],[315,38,42,17,"default"],[315,45,42,17],[315,47,42,20],[315,58,42,27,"source"],[315,64,42,33],[315,66,42,111],[316,6,42,111],[316,10,42,35,"initialStatus"],[316,23,42,48],[316,26,42,48,"arguments"],[316,35,42,48],[316,36,42,48,"length"],[316,42,42,48],[316,50,42,48,"arguments"],[316,59,42,48],[316,67,42,48,"undefined"],[316,76,42,48],[316,79,42,48,"arguments"],[316,88,42,48],[316,94,42,51],[316,95,42,52],[316,96,42,53],[317,6,42,53],[317,10,42,55,"onPlaybackStatusUpdate"],[317,32,42,77],[317,35,42,77,"arguments"],[317,44,42,77],[317,45,42,77,"length"],[317,51,42,77],[317,59,42,77,"arguments"],[317,68,42,77],[317,76,42,77,"undefined"],[317,85,42,77],[317,88,42,77,"arguments"],[317,97,42,77],[317,103,42,80],[317,107,42,84],[318,6,42,84],[318,10,42,86,"downloadFirst"],[318,23,42,99],[318,26,42,99,"arguments"],[318,35,42,99],[318,36,42,99,"length"],[318,42,42,99],[318,50,42,99,"arguments"],[318,59,42,99],[318,67,42,99,"undefined"],[318,76,42,99],[318,79,42,99,"arguments"],[318,88,42,99],[318,94,42,102],[318,98,42,106],[319,6,43,8,"console"],[319,13,43,15],[319,14,43,16,"warn"],[319,18,43,20],[319,19,43,21],[319,126,43,128],[319,127,43,129],[320,6,44,8],[320,13,44,15,"Sound"],[320,19,44,20],[320,20,44,21,"createAsync"],[320,31,44,32],[320,32,44,33,"source"],[320,38,44,39],[320,40,44,41,"initialStatus"],[320,53,44,54],[320,55,44,56,"onPlaybackStatusUpdate"],[320,77,44,78],[320,79,44,80,"downloadFirst"],[320,92,44,93],[320,93,44,94],[321,4,45,4],[321,5,45,5],[322,4,45,5],[322,21,45,5,"_x4"],[322,24,45,5],[323,6,45,5],[323,13,45,5,"_ref5"],[323,18,45,5],[323,19,45,5,"apply"],[323,24,45,5],[323,31,45,5,"arguments"],[323,40,45,5],[324,4,45,5],[325,2,45,5],[326,2,46,4],[327,0,47,0],[328,0,48,0],[329,0,49,0],[330,0,50,0],[331,0,51,0],[332,0,52,0],[333,0,53,0],[334,0,54,0],[335,0,55,0],[336,0,56,0],[337,0,57,0],[338,0,58,0],[339,0,59,0],[340,0,60,0],[341,0,61,0],[342,0,62,0],[343,0,63,0],[344,0,64,0],[345,0,65,0],[346,0,66,0],[347,0,67,0],[348,0,68,0],[349,0,69,0],[350,0,70,0],[351,0,71,0],[352,0,72,0],[353,0,73,0],[354,0,74,0],[355,0,75,0],[356,0,76,0],[357,0,77,0],[358,0,78,0],[359,0,79,0],[360,0,80,0],[361,0,81,0],[362,0,82,0],[363,0,83,0],[364,0,84,0],[365,0,85,0],[366,0,86,0],[367,0,87,0],[368,0,88,0],[369,0,89,0],[370,2,29,13,"Sound"],[370,7,29,18],[370,8,90,11,"createAsync"],[370,19,90,22],[371,4,90,22],[371,8,90,22,"_ref6"],[371,13,90,22],[371,20,90,22,"_asyncToGenerator"],[371,37,90,22],[371,38,90,22,"default"],[371,45,90,22],[371,47,90,25],[371,58,90,32,"source"],[371,64,90,38],[371,66,90,116],[372,6,90,116],[372,10,90,40,"initialStatus"],[372,23,90,53],[372,26,90,53,"arguments"],[372,35,90,53],[372,36,90,53,"length"],[372,42,90,53],[372,50,90,53,"arguments"],[372,59,90,53],[372,67,90,53,"undefined"],[372,76,90,53],[372,79,90,53,"arguments"],[372,88,90,53],[372,94,90,56],[372,95,90,57],[372,96,90,58],[373,6,90,58],[373,10,90,60,"onPlaybackStatusUpdate"],[373,32,90,82],[373,35,90,82,"arguments"],[373,44,90,82],[373,45,90,82,"length"],[373,51,90,82],[373,59,90,82,"arguments"],[373,68,90,82],[373,76,90,82,"undefined"],[373,85,90,82],[373,88,90,82,"arguments"],[373,97,90,82],[373,103,90,85],[373,107,90,89],[374,6,90,89],[374,10,90,91,"downloadFirst"],[374,23,90,104],[374,26,90,104,"arguments"],[374,35,90,104],[374,36,90,104,"length"],[374,42,90,104],[374,50,90,104,"arguments"],[374,59,90,104],[374,67,90,104,"undefined"],[374,76,90,104],[374,79,90,104,"arguments"],[374,88,90,104],[374,94,90,107],[374,98,90,111],[375,6,91,8],[375,10,91,14,"sound"],[375,15,91,19],[375,18,91,22],[375,22,91,26,"Sound"],[375,28,91,31],[375,29,91,32],[375,30,91,33],[376,6,92,8,"sound"],[376,11,92,13],[376,12,92,14,"setOnPlaybackStatusUpdate"],[376,37,92,39],[376,38,92,40,"onPlaybackStatusUpdate"],[376,60,92,62],[376,61,92,63],[377,6,93,8],[377,10,93,14,"status"],[377,16,93,20],[377,25,93,29,"sound"],[377,30,93,34],[377,31,93,35,"loadAsync"],[377,40,93,44],[377,41,93,45,"source"],[377,47,93,51],[377,49,93,53,"initialStatus"],[377,62,93,66],[377,64,93,68,"downloadFirst"],[377,77,93,81],[377,78,93,82],[378,6,94,8],[378,13,94,15],[379,8,94,17,"sound"],[379,13,94,22],[380,8,94,24,"status"],[381,6,94,31],[381,7,94,32],[382,4,95,4],[382,5,95,5],[383,4,95,5],[383,21,95,5,"_x5"],[383,24,95,5],[384,6,95,5],[384,13,95,5,"_ref6"],[384,18,95,5],[384,19,95,5,"apply"],[384,24,95,5],[384,31,95,5,"arguments"],[384,40,95,5],[385,4,95,5],[386,2,95,5],[387,2,288,0,"Object"],[387,8,288,6],[387,9,288,7,"assign"],[387,15,288,13],[387,16,288,14,"Sound"],[387,21,288,19],[387,22,288,20,"prototype"],[387,31,288,29],[387,33,288,31,"PlaybackMixin"],[387,36,288,44],[387,37,288,44,"PlaybackMixin"],[387,50,288,44],[387,51,288,45],[388,0,288,46],[388,3]],"functionMap":{"names":["<global>","Sound","create","createAsync","_callOnPlaybackStatusUpdateForNewStatus","_performOperationAndHandleStatusAsync","_updateAudioSampleReceivedCallback","_internalStatusUpdateCallback","_internalMetadataUpdateCallback","_internalErrorCallback","_subscribeToNativeEvents","_clearSubscriptions","_subscriptions.forEach$argument_0","_errorCallback","getStatusAsync","_performOperationAndHandleStatusAsync$argument_0","setOnPlaybackStatusUpdate","setOnMetadataUpdate","setOnAudioSampleReceived","loadAsync","Promise$argument_0","loadSuccess","loadError","unloadAsync","setStatusAsync","replayAsync"],"mappings":"AAA;OC4B;oBCa;KDG;yBE6C;KFK;IGE;KHS;IIC;KJU;IKC;KLoB;oCMC;KNI;sCOC;KPI;6BQC;KRI;ISE;KTK;IUC;oCCC,iBD;KVE;qBYC;KZK;qBaI;8DCE,6CD;KbK;Iea;KfG;IgBM;KhBE;IiBK;KjBK;IkBE;+BCS;oCCC;iBDQ;kCEC;iBFG;aDE;KlBK;IsBC;KtBa;IuBE;0DTE,qDS;KvBC;IwBC;0DVI;UUI;KxBC;CDY"},"hasCjsExports":false},"type":"js/module"}]}