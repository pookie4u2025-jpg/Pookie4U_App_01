{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"zustand","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":33,"index":33}}],"key":"POPvx7yS3Y3wz+S/9OAefiXNs0Q=","exportNames":["*"],"imports":1}},{"name":"../utils/HapticsManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":34},"end":{"line":2,"column":77,"index":111}}],"key":"nBdnSRqGBBV35N8QrGTTDbqVGgg=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":21,"column":33,"index":719},"end":{"line":21,"column":85,"index":771}}],"key":"lV14QuoELkLKy4kI0aEcfvvcE84=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"AVAILABLE_BADGES\", {\n    enumerable: true,\n    get: function () {\n      return AVAILABLE_BADGES;\n    }\n  });\n  Object.defineProperty(exports, \"useGameStore\", {\n    enumerable: true,\n    get: function () {\n      return useGameStore;\n    }\n  });\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _zustand = require(_dependencyMap[1], \"zustand\");\n  var _utilsHapticsManager = require(_dependencyMap[2], \"../utils/HapticsManager\");\n  // Conditional AsyncStorage import to handle web/SSR environments\n  var AsyncStorage = null;\n\n  // Helper function to safely get AsyncStorage\n  var getAsyncStorage = () => {\n    // Always return null during SSR or when window is not available\n    if (typeof window === 'undefined') {\n      return null;\n    }\n\n    // Return cached AsyncStorage if available\n    if (AsyncStorage) return AsyncStorage;\n\n    // Only try to load AsyncStorage in browser environment\n    try {\n      // Check if require is available and we're in the right environment\n      if (typeof require === 'function') {\n        var AsyncStorageModule = require(_dependencyMap[3], \"@react-native-async-storage/async-storage\");\n        AsyncStorage = AsyncStorageModule.default || AsyncStorageModule;\n        return AsyncStorage;\n      }\n    } catch (error) {\n      // Silently fail and return null\n      console.log('AsyncStorage not available:', error.message);\n    }\n    return null;\n  };\n  // Level progression: exponential growth\n  var calculateLevelUpPoints = level => {\n    return Math.floor(100 * Math.pow(1.5, level - 1));\n  };\n\n  // Generate level thresholds up to level 50\n  var generateLevelThresholds = () => {\n    var thresholds = [0]; // Level 1 starts at 0\n    for (var i = 1; i <= 50; i++) {\n      thresholds.push(thresholds[i - 1] + calculateLevelUpPoints(i));\n    }\n    return thresholds;\n  };\n  var LEVEL_THRESHOLDS = generateLevelThresholds();\n  var STORAGE_KEY = '@pookie4u_game_data';\n\n  // Available badges\n  var AVAILABLE_BADGES = {\n    FIRST_TASK: 'first_task',\n    WEEK_WARRIOR: 'week_warrior',\n    // 7-day streak\n    MONTH_MASTER: 'month_master',\n    // 30-day streak\n    HUNDRED_CLUB: 'hundred_club',\n    // 100 tasks\n    ROMANCE_EXPERT: 'romance_expert',\n    // Level 5\n    LOVE_GURU: 'love_guru',\n    // Level 10\n    RELATIONSHIP_CHAMPION: 'relationship_champion',\n    // Level 20\n    STREAK_LEGEND: 'streak_legend',\n    // 50-day streak\n    POINTS_MASTER: 'points_master',\n    // 1000 points\n    DEDICATION_AWARD: 'dedication_award' // 100 days active\n  };\n  var useGameStore = (0, _zustand.create)((set, get) => ({\n    // Initial state\n    totalPoints: 0,\n    currentLevel: 1,\n    currentStreak: 0,\n    longestStreak: 0,\n    tasksCompleted: 0,\n    badges: [],\n    lastActiveDate: null,\n    levelUpPoints: LEVEL_THRESHOLDS,\n    // Load persisted data from AsyncStorage\n    loadPersistedData: function () {\n      var _ref = (0, _asyncToGenerator.default)(function* () {\n        // Always set fallback values first to ensure UI works\n        var fallbackState = {\n          totalPoints: 35,\n          currentLevel: 1,\n          currentStreak: 7,\n          // Test value to verify streak display works\n          longestStreak: 10,\n          // Test value to verify longest streak works\n          tasksCompleted: 5,\n          // Test value to verify tasks completed display works\n          badges: [AVAILABLE_BADGES.FIRST_TASK, AVAILABLE_BADGES.ROMANCE_EXPERT],\n          // Test badges\n          lastActiveDate: new Date().toISOString()\n        };\n        try {\n          // Check if AsyncStorage is available (not on web during SSR)\n          var storage = getAsyncStorage();\n          if (!storage) {\n            console.log('AsyncStorage not available, using fallback values');\n            set(fallbackState);\n            return;\n          }\n          var stored = yield storage.getItem(STORAGE_KEY);\n          if (stored) {\n            var data = JSON.parse(stored);\n            set({\n              totalPoints: data.totalPoints || 0,\n              currentLevel: data.currentLevel || 1,\n              currentStreak: data.currentStreak || 0,\n              longestStreak: data.longestStreak || 0,\n              tasksCompleted: data.tasksCompleted || 0,\n              badges: data.badges || [],\n              lastActiveDate: data.lastActiveDate || null\n            });\n\n            // Check if streak needs to be broken due to inactivity\n            if (data.lastActiveDate) {\n              var lastDate = new Date(data.lastActiveDate);\n              var today = new Date();\n              var diffTime = today.getTime() - lastDate.getTime();\n              var diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n\n              // If more than 1 day has passed, break the streak\n              if (diffDays > 1) {\n                yield get().breakStreak();\n              }\n            }\n          } else {\n            // First time user - set initial test data to verify UI\n            console.log('No stored data found, setting initial test data');\n            set(fallbackState);\n          }\n        } catch (error) {\n          console.error('Failed to load game data:', error);\n          // Always set fallback values on any error\n          set(fallbackState);\n        }\n      });\n      return function loadPersistedData() {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    // Persist current state to AsyncStorage\n    persistData: function () {\n      var _ref2 = (0, _asyncToGenerator.default)(function* (updatedState) {\n        try {\n          // Check if AsyncStorage is available\n          var storage = getAsyncStorage();\n          if (!storage) {\n            console.log('AsyncStorage not available, skipping data persistence');\n            return;\n          }\n          var currentState = get();\n          var dataToStore = {\n            totalPoints: updatedState.totalPoints ?? currentState.totalPoints,\n            currentLevel: updatedState.currentLevel ?? currentState.currentLevel,\n            currentStreak: updatedState.currentStreak ?? currentState.currentStreak,\n            longestStreak: updatedState.longestStreak ?? currentState.longestStreak,\n            tasksCompleted: updatedState.tasksCompleted ?? currentState.tasksCompleted,\n            badges: updatedState.badges ?? currentState.badges,\n            lastActiveDate: updatedState.lastActiveDate ?? currentState.lastActiveDate ?? new Date().toISOString()\n          };\n          yield storage.setItem(STORAGE_KEY, JSON.stringify(dataToStore));\n        } catch (error) {\n          console.error('Failed to persist game data:', error);\n        }\n      });\n      return function persistData(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    // Add experience points with level progression\n    addExperience: function () {\n      var _ref3 = (0, _asyncToGenerator.default)(function* (points) {\n        var state = get();\n        var newPoints = state.totalPoints + points;\n\n        // Calculate new level\n        var newLevel = state.currentLevel;\n        while (newLevel < LEVEL_THRESHOLDS.length - 1 && newPoints >= LEVEL_THRESHOLDS[newLevel]) {\n          newLevel++;\n        }\n        var leveledUp = newLevel > state.currentLevel;\n\n        // Update state\n        var updatedState = {\n          totalPoints: newPoints,\n          currentLevel: newLevel\n        };\n        set(updatedState);\n\n        // Persist immediately\n        yield get().persistData(updatedState);\n\n        // Haptic feedback for level up\n        if (leveledUp) {\n          yield (0, _utilsHapticsManager.levelUp)();\n\n          // Award level-based badges\n          if (newLevel === 5) {\n            yield get().addBadge(AVAILABLE_BADGES.ROMANCE_EXPERT);\n          } else if (newLevel === 10) {\n            yield get().addBadge(AVAILABLE_BADGES.LOVE_GURU);\n          } else if (newLevel === 20) {\n            yield get().addBadge(AVAILABLE_BADGES.RELATIONSHIP_CHAMPION);\n          }\n        }\n\n        // Check for points-based badges\n        if (newPoints >= 1000 && !state.badges.includes(AVAILABLE_BADGES.POINTS_MASTER)) {\n          yield get().addBadge(AVAILABLE_BADGES.POINTS_MASTER);\n        }\n      });\n      return function addExperience(_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    // Complete a task (combines points and task completion)\n    completeTask: function () {\n      var _ref4 = (0, _asyncToGenerator.default)(function* (taskPoints) {\n        var state = get();\n        var newTasksCompleted = state.tasksCompleted + 1;\n\n        // Update state\n        var updatedState = {\n          tasksCompleted: newTasksCompleted\n        };\n        set(updatedState);\n\n        // Add experience points\n        yield get().addExperience(taskPoints);\n\n        // Update streak\n        yield get().updateStreak();\n\n        // Persist task completion\n        yield get().persistData(updatedState);\n\n        // Task completion haptic feedback\n        yield (0, _utilsHapticsManager.taskComplete)();\n\n        // Check for task-based badges\n        if (newTasksCompleted === 1) {\n          yield get().addBadge(AVAILABLE_BADGES.FIRST_TASK);\n        } else if (newTasksCompleted === 100) {\n          yield get().addBadge(AVAILABLE_BADGES.HUNDRED_CLUB);\n        }\n      });\n      return function completeTask(_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }(),\n    // Update daily streak (Snapchat-style)\n    updateStreak: function () {\n      var _ref5 = (0, _asyncToGenerator.default)(function* () {\n        var state = get();\n        var today = new Date();\n        var todayString = today.toDateString();\n\n        // If no last active date, this is the first task - start streak at 1\n        if (!state.lastActiveDate) {\n          var _updatedState = {\n            currentStreak: 1,\n            longestStreak: Math.max(1, state.longestStreak),\n            lastActiveDate: today.toISOString()\n          };\n          set(_updatedState);\n          yield get().persistData(_updatedState);\n\n          // Check for first task badge\n          if (state.currentStreak === 0) {\n            yield get().addBadge(AVAILABLE_BADGES.FIRST_TASK);\n          }\n          return;\n        }\n        var lastActiveDate = new Date(state.lastActiveDate);\n        var lastActiveDateString = lastActiveDate.toDateString();\n\n        // If already updated today, don't update again\n        if (lastActiveDateString === todayString) {\n          return;\n        }\n\n        // Calculate days difference\n        var diffTime = today.getTime() - lastActiveDate.getTime();\n        var diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n        var newStreak;\n        var newLongestStreak;\n        if (diffDays === 1) {\n          // Consecutive day - increment streak\n          newStreak = state.currentStreak + 1;\n          newLongestStreak = Math.max(newStreak, state.longestStreak);\n        } else if (diffDays > 1) {\n          // Missed day(s) - reset streak to 1 (starting fresh)\n          newStreak = 1;\n          newLongestStreak = state.longestStreak; // Keep longest streak\n        } else {\n          // Same day (shouldn't happen but safety check)\n          return;\n        }\n        var updatedState = {\n          currentStreak: newStreak,\n          longestStreak: newLongestStreak,\n          lastActiveDate: today.toISOString()\n        };\n        set(updatedState);\n\n        // Persist immediately\n        yield get().persistData(updatedState);\n\n        // Check for streak-based badges\n        if (newStreak === 7) {\n          yield get().addBadge(AVAILABLE_BADGES.WEEK_WARRIOR);\n        } else if (newStreak === 30) {\n          yield get().addBadge(AVAILABLE_BADGES.MONTH_MASTER);\n        } else if (newStreak === 50) {\n          yield get().addBadge(AVAILABLE_BADGES.STREAK_LEGEND);\n        }\n      });\n      return function updateStreak() {\n        return _ref5.apply(this, arguments);\n      };\n    }(),\n    // Break current streak\n    breakStreak: function () {\n      var _ref6 = (0, _asyncToGenerator.default)(function* () {\n        var updatedState = {\n          currentStreak: 0\n        };\n        set(updatedState);\n        yield get().persistData(updatedState);\n      });\n      return function breakStreak() {\n        return _ref6.apply(this, arguments);\n      };\n    }(),\n    // Add a new badge\n    addBadge: function () {\n      var _ref7 = (0, _asyncToGenerator.default)(function* (badge) {\n        var state = get();\n        if (!state.badges.includes(badge)) {\n          var updatedState = {\n            badges: [...state.badges, badge]\n          };\n          set(updatedState);\n          yield get().persistData(updatedState);\n\n          // Achievement haptic feedback\n          yield (0, _utilsHapticsManager.achievement)();\n        }\n      });\n      return function addBadge(_x4) {\n        return _ref7.apply(this, arguments);\n      };\n    }(),\n    // Reset all progress (for testing or account reset)\n    resetProgress: function () {\n      var _ref8 = (0, _asyncToGenerator.default)(function* () {\n        var resetState = {\n          totalPoints: 0,\n          currentLevel: 1,\n          currentStreak: 0,\n          longestStreak: 0,\n          tasksCompleted: 0,\n          badges: [],\n          lastActiveDate: null\n        };\n        set(resetState);\n\n        // Clear from storage\n        try {\n          // Check if AsyncStorage is available\n          var storage = getAsyncStorage();\n          if (storage) {\n            yield storage.removeItem(STORAGE_KEY);\n          } else {\n            console.log('AsyncStorage not available, skipping data clearing');\n          }\n        } catch (error) {\n          console.error('Failed to clear game data:', error);\n        }\n      });\n      return function resetProgress() {\n        return _ref8.apply(this, arguments);\n      };\n    }(),\n    // Computed getters\n    getExperienceForNextLevel: () => {\n      var state = get();\n      if (state.currentLevel >= LEVEL_THRESHOLDS.length - 1) {\n        return 0; // Max level reached\n      }\n      return LEVEL_THRESHOLDS[state.currentLevel] - state.totalPoints;\n    },\n    getProgressPercentage: () => {\n      var state = get();\n      if (state.currentLevel >= LEVEL_THRESHOLDS.length - 1) {\n        return 100; // Max level\n      }\n      var currentLevelStart = LEVEL_THRESHOLDS[state.currentLevel - 1];\n      var nextLevelStart = LEVEL_THRESHOLDS[state.currentLevel];\n      var currentProgress = state.totalPoints - currentLevelStart;\n      var totalNeeded = nextLevelStart - currentLevelStart;\n      return Math.floor(currentProgress / totalNeeded * 100);\n    },\n    shouldLevelUp: () => {\n      var state = get();\n      return state.currentLevel < LEVEL_THRESHOLDS.length - 1 && state.totalPoints >= LEVEL_THRESHOLDS[state.currentLevel];\n    }\n  }));\n\n  // Store will be initialized when first used in components\n});","lineCount":437,"map":[[12,2,79,0,"Object"],[12,8,79,0],[12,9,79,0,"defineProperty"],[12,23,79,0],[12,24,79,0,"exports"],[12,31,79,0],[13,4,79,0,"enumerable"],[13,14,79,0],[14,4,79,0,"get"],[14,7,79,0],[14,18,79,0,"get"],[14,19,79,0],[15,6,79,0],[15,13,79,0,"AVAILABLE_BADGES"],[15,29,79,0],[16,4,79,0],[17,2,79,0],[18,2,425,0,"Object"],[18,8,425,0],[18,9,425,0,"defineProperty"],[18,23,425,0],[18,24,425,0,"exports"],[18,31,425,0],[19,4,425,0,"enumerable"],[19,14,425,0],[20,4,425,0,"get"],[20,7,425,0],[20,18,425,0,"get"],[20,19,425,0],[21,6,425,0],[21,13,425,9,"useGameStore"],[21,25,425,21],[22,4,425,21],[23,2,425,21],[24,2,425,24],[24,6,425,24,"_babelRuntimeHelpersAsyncToGenerator"],[24,42,425,24],[24,45,425,24,"require"],[24,52,425,24],[24,53,425,24,"_dependencyMap"],[24,67,425,24],[25,2,425,24],[25,6,425,24,"_asyncToGenerator"],[25,23,425,24],[25,26,425,24,"_interopDefault"],[25,41,425,24],[25,42,425,24,"_babelRuntimeHelpersAsyncToGenerator"],[25,78,425,24],[26,2,1,0],[26,6,1,0,"_zustand"],[26,14,1,0],[26,17,1,0,"require"],[26,24,1,0],[26,25,1,0,"_dependencyMap"],[26,39,1,0],[27,2,2,0],[27,6,2,0,"_utilsHapticsManager"],[27,26,2,0],[27,29,2,0,"require"],[27,36,2,0],[27,37,2,0,"_dependencyMap"],[27,51,2,0],[28,2,4,0],[29,2,5,0],[29,6,5,4,"AsyncStorage"],[29,18,5,21],[29,21,5,24],[29,25,5,28],[31,2,7,0],[32,2,8,0],[32,6,8,6,"getAsyncStorage"],[32,21,8,21],[32,24,8,24,"getAsyncStorage"],[32,25,8,24],[32,30,8,30],[33,4,9,2],[34,4,10,2],[34,8,10,6],[34,15,10,13,"window"],[34,21,10,19],[34,26,10,24],[34,37,10,35],[34,39,10,37],[35,6,11,4],[35,13,11,11],[35,17,11,15],[36,4,12,2],[38,4,14,2],[39,4,15,2],[39,8,15,6,"AsyncStorage"],[39,20,15,18],[39,22,15,20],[39,29,15,27,"AsyncStorage"],[39,41,15,39],[41,4,17,2],[42,4,18,2],[42,8,18,6],[43,6,19,4],[44,6,20,4],[44,10,20,8],[44,17,20,15,"require"],[44,24,20,22],[44,29,20,27],[44,39,20,37],[44,41,20,39],[45,8,21,6],[45,12,21,12,"AsyncStorageModule"],[45,30,21,30],[45,33,21,33,"require"],[45,40,21,40],[45,41,21,40,"_dependencyMap"],[45,55,21,40],[45,103,21,84],[45,104,21,85],[46,8,22,6,"AsyncStorage"],[46,20,22,18],[46,23,22,21,"AsyncStorageModule"],[46,41,22,39],[46,42,22,40,"default"],[46,49,22,47],[46,53,22,51,"AsyncStorageModule"],[46,71,22,69],[47,8,23,6],[47,15,23,13,"AsyncStorage"],[47,27,23,25],[48,6,24,4],[49,4,25,2],[49,5,25,3],[49,6,25,4],[49,13,25,11,"error"],[49,18,25,16],[49,20,25,18],[50,6,26,4],[51,6,27,4,"console"],[51,13,27,11],[51,14,27,12,"log"],[51,17,27,15],[51,18,27,16],[51,47,27,45],[51,49,27,47,"error"],[51,54,27,52],[51,55,27,53,"message"],[51,62,27,60],[51,63,27,61],[52,4,28,2],[53,4,30,2],[53,11,30,9],[53,15,30,13],[54,2,31,0],[54,3,31,1],[55,2,61,0],[56,2,62,0],[56,6,62,6,"calculateLevelUpPoints"],[56,28,62,28],[56,31,62,32,"level"],[56,36,62,45],[56,40,62,58],[57,4,63,2],[57,11,63,9,"Math"],[57,15,63,13],[57,16,63,14,"floor"],[57,21,63,19],[57,22,63,20],[57,25,63,23],[57,28,63,26,"Math"],[57,32,63,30],[57,33,63,31,"pow"],[57,36,63,34],[57,37,63,35],[57,40,63,38],[57,42,63,40,"level"],[57,47,63,45],[57,50,63,48],[57,51,63,49],[57,52,63,50],[57,53,63,51],[58,2,64,0],[58,3,64,1],[60,2,66,0],[61,2,67,0],[61,6,67,6,"generateLevelThresholds"],[61,29,67,29],[61,32,67,32,"generateLevelThresholds"],[61,33,67,32],[61,38,67,48],[62,4,68,2],[62,8,68,8,"thresholds"],[62,18,68,18],[62,21,68,21],[62,22,68,22],[62,23,68,23],[62,24,68,24],[62,25,68,25],[62,26,68,26],[63,4,69,2],[63,9,69,7],[63,13,69,11,"i"],[63,14,69,12],[63,17,69,15],[63,18,69,16],[63,20,69,18,"i"],[63,21,69,19],[63,25,69,23],[63,27,69,25],[63,29,69,27,"i"],[63,30,69,28],[63,32,69,30],[63,34,69,32],[64,6,70,4,"thresholds"],[64,16,70,14],[64,17,70,15,"push"],[64,21,70,19],[64,22,70,20,"thresholds"],[64,32,70,30],[64,33,70,31,"i"],[64,34,70,32],[64,37,70,35],[64,38,70,36],[64,39,70,37],[64,42,70,40,"calculateLevelUpPoints"],[64,64,70,62],[64,65,70,63,"i"],[64,66,70,64],[64,67,70,65],[64,68,70,66],[65,4,71,2],[66,4,72,2],[66,11,72,9,"thresholds"],[66,21,72,19],[67,2,73,0],[67,3,73,1],[68,2,75,0],[68,6,75,6,"LEVEL_THRESHOLDS"],[68,22,75,22],[68,25,75,25,"generateLevelThresholds"],[68,48,75,48],[68,49,75,49],[68,50,75,50],[69,2,76,0],[69,6,76,6,"STORAGE_KEY"],[69,17,76,17],[69,20,76,20],[69,41,76,41],[71,2,78,0],[72,2,79,7],[72,6,79,13,"AVAILABLE_BADGES"],[72,22,79,29],[72,25,79,32],[73,4,80,2,"FIRST_TASK"],[73,14,80,12],[73,16,80,14],[73,28,80,26],[74,4,81,2,"WEEK_WARRIOR"],[74,16,81,14],[74,18,81,16],[74,32,81,30],[75,4,81,32],[76,4,82,2,"MONTH_MASTER"],[76,16,82,14],[76,18,82,16],[76,32,82,30],[77,4,82,32],[78,4,83,2,"HUNDRED_CLUB"],[78,16,83,14],[78,18,83,16],[78,32,83,30],[79,4,83,32],[80,4,84,2,"ROMANCE_EXPERT"],[80,18,84,16],[80,20,84,18],[80,36,84,34],[81,4,84,36],[82,4,85,2,"LOVE_GURU"],[82,13,85,11],[82,15,85,13],[82,26,85,24],[83,4,85,26],[84,4,86,2,"RELATIONSHIP_CHAMPION"],[84,25,86,23],[84,27,86,25],[84,50,86,48],[85,4,86,50],[86,4,87,2,"STREAK_LEGEND"],[86,17,87,15],[86,19,87,17],[86,34,87,32],[87,4,87,34],[88,4,88,2,"POINTS_MASTER"],[88,17,88,15],[88,19,88,17],[88,34,88,32],[89,4,88,34],[90,4,89,2,"DEDICATION_AWARD"],[90,20,89,18],[90,22,89,20],[90,40,89,38],[90,41,89,40],[91,2,90,0],[91,3,90,1],[92,2,92,0],[92,6,92,6,"useGameStore"],[92,18,92,18],[92,21,92,21],[92,25,92,21,"create"],[92,33,92,27],[92,34,92,27,"create"],[92,40,92,27],[92,42,92,39],[92,43,92,40,"set"],[92,46,92,43],[92,48,92,45,"get"],[92,51,92,48],[92,57,92,54],[93,4,93,2],[94,4,94,2,"totalPoints"],[94,15,94,13],[94,17,94,15],[94,18,94,16],[95,4,95,2,"currentLevel"],[95,16,95,14],[95,18,95,16],[95,19,95,17],[96,4,96,2,"currentStreak"],[96,17,96,15],[96,19,96,17],[96,20,96,18],[97,4,97,2,"longestStreak"],[97,17,97,15],[97,19,97,17],[97,20,97,18],[98,4,98,2,"tasksCompleted"],[98,18,98,16],[98,20,98,18],[98,21,98,19],[99,4,99,2,"badges"],[99,10,99,8],[99,12,99,10],[99,14,99,12],[100,4,100,2,"lastActiveDate"],[100,18,100,16],[100,20,100,18],[100,24,100,22],[101,4,101,2,"levelUpPoints"],[101,17,101,15],[101,19,101,17,"LEVEL_THRESHOLDS"],[101,35,101,33],[102,4,103,2],[103,4,104,2,"loadPersistedData"],[103,21,104,19],[104,6,104,19],[104,10,104,19,"_ref"],[104,14,104,19],[104,21,104,19,"_asyncToGenerator"],[104,38,104,19],[104,39,104,19,"default"],[104,46,104,19],[104,48,104,21],[104,61,104,33],[105,8,105,4],[106,8,106,4],[106,12,106,10,"fallbackState"],[106,25,106,23],[106,28,106,26],[107,10,107,6,"totalPoints"],[107,21,107,17],[107,23,107,19],[107,25,107,21],[108,10,108,6,"currentLevel"],[108,22,108,18],[108,24,108,20],[108,25,108,21],[109,10,109,6,"currentStreak"],[109,23,109,19],[109,25,109,21],[109,26,109,22],[110,10,109,24],[111,10,110,6,"longestStreak"],[111,23,110,19],[111,25,110,21],[111,27,110,23],[112,10,110,25],[113,10,111,6,"tasksCompleted"],[113,24,111,20],[113,26,111,22],[113,27,111,23],[114,10,111,25],[115,10,112,6,"badges"],[115,16,112,12],[115,18,112,14],[115,19,112,15,"AVAILABLE_BADGES"],[115,35,112,31],[115,36,112,32,"FIRST_TASK"],[115,46,112,42],[115,48,112,44,"AVAILABLE_BADGES"],[115,64,112,60],[115,65,112,61,"ROMANCE_EXPERT"],[115,79,112,75],[115,80,112,76],[116,10,112,78],[117,10,113,6,"lastActiveDate"],[117,24,113,20],[117,26,113,22],[117,30,113,26,"Date"],[117,34,113,30],[117,35,113,31],[117,36,113,32],[117,37,113,33,"toISOString"],[117,48,113,44],[117,49,113,45],[118,8,114,4],[118,9,114,5],[119,8,116,4],[119,12,116,8],[120,10,117,6],[121,10,118,6],[121,14,118,12,"storage"],[121,21,118,19],[121,24,118,22,"getAsyncStorage"],[121,39,118,37],[121,40,118,38],[121,41,118,39],[122,10,119,6],[122,14,119,10],[122,15,119,11,"storage"],[122,22,119,18],[122,24,119,20],[123,12,120,8,"console"],[123,19,120,15],[123,20,120,16,"log"],[123,23,120,19],[123,24,120,20],[123,75,120,71],[123,76,120,72],[124,12,121,8,"set"],[124,15,121,11],[124,16,121,12,"fallbackState"],[124,29,121,25],[124,30,121,26],[125,12,122,8],[126,10,123,6],[127,10,125,6],[127,14,125,12,"stored"],[127,20,125,18],[127,29,125,27,"storage"],[127,36,125,34],[127,37,125,35,"getItem"],[127,44,125,42],[127,45,125,43,"STORAGE_KEY"],[127,56,125,54],[127,57,125,55],[128,10,126,6],[128,14,126,10,"stored"],[128,20,126,16],[128,22,126,18],[129,12,127,8],[129,16,127,14,"data"],[129,20,127,18],[129,23,127,21,"JSON"],[129,27,127,25],[129,28,127,26,"parse"],[129,33,127,31],[129,34,127,32,"stored"],[129,40,127,38],[129,41,127,39],[130,12,128,8,"set"],[130,15,128,11],[130,16,128,12],[131,14,129,10,"totalPoints"],[131,25,129,21],[131,27,129,23,"data"],[131,31,129,27],[131,32,129,28,"totalPoints"],[131,43,129,39],[131,47,129,43],[131,48,129,44],[132,14,130,10,"currentLevel"],[132,26,130,22],[132,28,130,24,"data"],[132,32,130,28],[132,33,130,29,"currentLevel"],[132,45,130,41],[132,49,130,45],[132,50,130,46],[133,14,131,10,"currentStreak"],[133,27,131,23],[133,29,131,25,"data"],[133,33,131,29],[133,34,131,30,"currentStreak"],[133,47,131,43],[133,51,131,47],[133,52,131,48],[134,14,132,10,"longestStreak"],[134,27,132,23],[134,29,132,25,"data"],[134,33,132,29],[134,34,132,30,"longestStreak"],[134,47,132,43],[134,51,132,47],[134,52,132,48],[135,14,133,10,"tasksCompleted"],[135,28,133,24],[135,30,133,26,"data"],[135,34,133,30],[135,35,133,31,"tasksCompleted"],[135,49,133,45],[135,53,133,49],[135,54,133,50],[136,14,134,10,"badges"],[136,20,134,16],[136,22,134,18,"data"],[136,26,134,22],[136,27,134,23,"badges"],[136,33,134,29],[136,37,134,33],[136,39,134,35],[137,14,135,10,"lastActiveDate"],[137,28,135,24],[137,30,135,26,"data"],[137,34,135,30],[137,35,135,31,"lastActiveDate"],[137,49,135,45],[137,53,135,49],[138,12,136,8],[138,13,136,9],[138,14,136,10],[140,12,138,8],[141,12,139,8],[141,16,139,12,"data"],[141,20,139,16],[141,21,139,17,"lastActiveDate"],[141,35,139,31],[141,37,139,33],[142,14,140,10],[142,18,140,16,"lastDate"],[142,26,140,24],[142,29,140,27],[142,33,140,31,"Date"],[142,37,140,35],[142,38,140,36,"data"],[142,42,140,40],[142,43,140,41,"lastActiveDate"],[142,57,140,55],[142,58,140,56],[143,14,141,10],[143,18,141,16,"today"],[143,23,141,21],[143,26,141,24],[143,30,141,28,"Date"],[143,34,141,32],[143,35,141,33],[143,36,141,34],[144,14,142,10],[144,18,142,16,"diffTime"],[144,26,142,24],[144,29,142,27,"today"],[144,34,142,32],[144,35,142,33,"getTime"],[144,42,142,40],[144,43,142,41],[144,44,142,42],[144,47,142,45,"lastDate"],[144,55,142,53],[144,56,142,54,"getTime"],[144,63,142,61],[144,64,142,62],[144,65,142,63],[145,14,143,10],[145,18,143,16,"diffDays"],[145,26,143,24],[145,29,143,27,"Math"],[145,33,143,31],[145,34,143,32,"floor"],[145,39,143,37],[145,40,143,38,"diffTime"],[145,48,143,46],[145,52,143,50],[145,56,143,54],[145,59,143,57],[145,61,143,59],[145,64,143,62],[145,66,143,64],[145,69,143,67],[145,71,143,69],[145,72,143,70],[145,73,143,71],[147,14,145,10],[148,14,146,10],[148,18,146,14,"diffDays"],[148,26,146,22],[148,29,146,25],[148,30,146,26],[148,32,146,28],[149,16,147,12],[149,22,147,18,"get"],[149,25,147,21],[149,26,147,22],[149,27,147,23],[149,28,147,24,"breakStreak"],[149,39,147,35],[149,40,147,36],[149,41,147,37],[150,14,148,10],[151,12,149,8],[152,10,150,6],[152,11,150,7],[152,17,150,13],[153,12,151,8],[154,12,152,8,"console"],[154,19,152,15],[154,20,152,16,"log"],[154,23,152,19],[154,24,152,20],[154,73,152,69],[154,74,152,70],[155,12,153,8,"set"],[155,15,153,11],[155,16,153,12,"fallbackState"],[155,29,153,25],[155,30,153,26],[156,10,154,6],[157,8,155,4],[157,9,155,5],[157,10,155,6],[157,17,155,13,"error"],[157,22,155,18],[157,24,155,20],[158,10,156,6,"console"],[158,17,156,13],[158,18,156,14,"error"],[158,23,156,19],[158,24,156,20],[158,51,156,47],[158,53,156,49,"error"],[158,58,156,54],[158,59,156,55],[159,10,157,6],[160,10,158,6,"set"],[160,13,158,9],[160,14,158,10,"fallbackState"],[160,27,158,23],[160,28,158,24],[161,8,159,4],[162,6,160,2],[162,7,160,3],[163,6,160,3],[163,22,104,2,"loadPersistedData"],[163,39,104,19,"loadPersistedData"],[163,40,104,19],[164,8,104,19],[164,15,104,19,"_ref"],[164,19,104,19],[164,20,104,19,"apply"],[164,25,104,19],[164,32,104,19,"arguments"],[164,41,104,19],[165,6,104,19],[166,4,104,19],[166,7,160,3],[167,4,162,2],[168,4,163,2,"persistData"],[168,15,163,13],[169,6,163,13],[169,10,163,13,"_ref2"],[169,15,163,13],[169,22,163,13,"_asyncToGenerator"],[169,39,163,13],[169,40,163,13,"default"],[169,47,163,13],[169,49,163,15],[169,60,163,22,"updatedState"],[169,72,163,54],[169,74,163,59],[170,8,164,4],[170,12,164,8],[171,10,165,6],[172,10,166,6],[172,14,166,12,"storage"],[172,21,166,19],[172,24,166,22,"getAsyncStorage"],[172,39,166,37],[172,40,166,38],[172,41,166,39],[173,10,167,6],[173,14,167,10],[173,15,167,11,"storage"],[173,22,167,18],[173,24,167,20],[174,12,168,8,"console"],[174,19,168,15],[174,20,168,16,"log"],[174,23,168,19],[174,24,168,20],[174,79,168,75],[174,80,168,76],[175,12,169,8],[176,10,170,6],[177,10,172,6],[177,14,172,12,"currentState"],[177,26,172,24],[177,29,172,27,"get"],[177,32,172,30],[177,33,172,31],[177,34,172,32],[178,10,173,6],[178,14,173,12,"dataToStore"],[178,25,173,23],[178,28,173,26],[179,12,174,8,"totalPoints"],[179,23,174,19],[179,25,174,21,"updatedState"],[179,37,174,33],[179,38,174,34,"totalPoints"],[179,49,174,45],[179,53,174,49,"currentState"],[179,65,174,61],[179,66,174,62,"totalPoints"],[179,77,174,73],[180,12,175,8,"currentLevel"],[180,24,175,20],[180,26,175,22,"updatedState"],[180,38,175,34],[180,39,175,35,"currentLevel"],[180,51,175,47],[180,55,175,51,"currentState"],[180,67,175,63],[180,68,175,64,"currentLevel"],[180,80,175,76],[181,12,176,8,"currentStreak"],[181,25,176,21],[181,27,176,23,"updatedState"],[181,39,176,35],[181,40,176,36,"currentStreak"],[181,53,176,49],[181,57,176,53,"currentState"],[181,69,176,65],[181,70,176,66,"currentStreak"],[181,83,176,79],[182,12,177,8,"longestStreak"],[182,25,177,21],[182,27,177,23,"updatedState"],[182,39,177,35],[182,40,177,36,"longestStreak"],[182,53,177,49],[182,57,177,53,"currentState"],[182,69,177,65],[182,70,177,66,"longestStreak"],[182,83,177,79],[183,12,178,8,"tasksCompleted"],[183,26,178,22],[183,28,178,24,"updatedState"],[183,40,178,36],[183,41,178,37,"tasksCompleted"],[183,55,178,51],[183,59,178,55,"currentState"],[183,71,178,67],[183,72,178,68,"tasksCompleted"],[183,86,178,82],[184,12,179,8,"badges"],[184,18,179,14],[184,20,179,16,"updatedState"],[184,32,179,28],[184,33,179,29,"badges"],[184,39,179,35],[184,43,179,39,"currentState"],[184,55,179,51],[184,56,179,52,"badges"],[184,62,179,58],[185,12,180,8,"lastActiveDate"],[185,26,180,22],[185,28,180,24,"updatedState"],[185,40,180,36],[185,41,180,37,"lastActiveDate"],[185,55,180,51],[185,59,180,55,"currentState"],[185,71,180,67],[185,72,180,68,"lastActiveDate"],[185,86,180,82],[185,90,180,86],[185,94,180,90,"Date"],[185,98,180,94],[185,99,180,95],[185,100,180,96],[185,101,180,97,"toISOString"],[185,112,180,108],[185,113,180,109],[186,10,181,6],[186,11,181,7],[187,10,183,6],[187,16,183,12,"storage"],[187,23,183,19],[187,24,183,20,"setItem"],[187,31,183,27],[187,32,183,28,"STORAGE_KEY"],[187,43,183,39],[187,45,183,41,"JSON"],[187,49,183,45],[187,50,183,46,"stringify"],[187,59,183,55],[187,60,183,56,"dataToStore"],[187,71,183,67],[187,72,183,68],[187,73,183,69],[188,8,184,4],[188,9,184,5],[188,10,184,6],[188,17,184,13,"error"],[188,22,184,18],[188,24,184,20],[189,10,185,6,"console"],[189,17,185,13],[189,18,185,14,"error"],[189,23,185,19],[189,24,185,20],[189,54,185,50],[189,56,185,52,"error"],[189,61,185,57],[189,62,185,58],[190,8,186,4],[191,6,187,2],[191,7,187,3],[192,6,187,3],[192,22,163,2,"persistData"],[192,33,163,13,"persistData"],[192,34,163,13,"_x"],[192,36,163,13],[193,8,163,13],[193,15,163,13,"_ref2"],[193,20,163,13],[193,21,163,13,"apply"],[193,26,163,13],[193,33,163,13,"arguments"],[193,42,163,13],[194,6,163,13],[195,4,163,13],[195,7,187,3],[196,4,189,2],[197,4,190,2,"addExperience"],[197,17,190,15],[198,6,190,15],[198,10,190,15,"_ref3"],[198,15,190,15],[198,22,190,15,"_asyncToGenerator"],[198,39,190,15],[198,40,190,15,"default"],[198,47,190,15],[198,49,190,17],[198,60,190,24,"points"],[198,66,190,38],[198,68,190,43],[199,8,191,4],[199,12,191,10,"state"],[199,17,191,15],[199,20,191,18,"get"],[199,23,191,21],[199,24,191,22],[199,25,191,23],[200,8,192,4],[200,12,192,10,"newPoints"],[200,21,192,19],[200,24,192,22,"state"],[200,29,192,27],[200,30,192,28,"totalPoints"],[200,41,192,39],[200,44,192,42,"points"],[200,50,192,48],[202,8,194,4],[203,8,195,4],[203,12,195,8,"newLevel"],[203,20,195,16],[203,23,195,19,"state"],[203,28,195,24],[203,29,195,25,"currentLevel"],[203,41,195,37],[204,8,196,4],[204,15,196,11,"newLevel"],[204,23,196,19],[204,26,196,22,"LEVEL_THRESHOLDS"],[204,42,196,38],[204,43,196,39,"length"],[204,49,196,45],[204,52,196,48],[204,53,196,49],[204,57,196,53,"newPoints"],[204,66,196,62],[204,70,196,66,"LEVEL_THRESHOLDS"],[204,86,196,82],[204,87,196,83,"newLevel"],[204,95,196,91],[204,96,196,92],[204,98,196,94],[205,10,197,6,"newLevel"],[205,18,197,14],[205,20,197,16],[206,8,198,4],[207,8,200,4],[207,12,200,10,"leveledUp"],[207,21,200,19],[207,24,200,22,"newLevel"],[207,32,200,30],[207,35,200,33,"state"],[207,40,200,38],[207,41,200,39,"currentLevel"],[207,53,200,51],[209,8,202,4],[210,8,203,4],[210,12,203,10,"updatedState"],[210,24,203,22],[210,27,203,25],[211,10,204,6,"totalPoints"],[211,21,204,17],[211,23,204,19,"newPoints"],[211,32,204,28],[212,10,205,6,"currentLevel"],[212,22,205,18],[212,24,205,20,"newLevel"],[213,8,206,4],[213,9,206,5],[214,8,208,4,"set"],[214,11,208,7],[214,12,208,8,"updatedState"],[214,24,208,20],[214,25,208,21],[216,8,210,4],[217,8,211,4],[217,14,211,11,"get"],[217,17,211,14],[217,18,211,15],[217,19,211,16],[217,20,211,25,"persistData"],[217,31,211,36],[217,32,211,37,"updatedState"],[217,44,211,49],[217,45,211,50],[219,8,213,4],[220,8,214,4],[220,12,214,8,"leveledUp"],[220,21,214,17],[220,23,214,19],[221,10,215,6],[221,16,215,12],[221,20,215,12,"levelUp"],[221,40,215,19],[221,41,215,19,"levelUp"],[221,48,215,19],[221,50,215,20],[221,51,215,21],[223,10,217,6],[224,10,218,6],[224,14,218,10,"newLevel"],[224,22,218,18],[224,27,218,23],[224,28,218,24],[224,30,218,26],[225,12,219,8],[225,18,219,14,"get"],[225,21,219,17],[225,22,219,18],[225,23,219,19],[225,24,219,20,"addBadge"],[225,32,219,28],[225,33,219,29,"AVAILABLE_BADGES"],[225,49,219,45],[225,50,219,46,"ROMANCE_EXPERT"],[225,64,219,60],[225,65,219,61],[226,10,220,6],[226,11,220,7],[226,17,220,13],[226,21,220,17,"newLevel"],[226,29,220,25],[226,34,220,30],[226,36,220,32],[226,38,220,34],[227,12,221,8],[227,18,221,14,"get"],[227,21,221,17],[227,22,221,18],[227,23,221,19],[227,24,221,20,"addBadge"],[227,32,221,28],[227,33,221,29,"AVAILABLE_BADGES"],[227,49,221,45],[227,50,221,46,"LOVE_GURU"],[227,59,221,55],[227,60,221,56],[228,10,222,6],[228,11,222,7],[228,17,222,13],[228,21,222,17,"newLevel"],[228,29,222,25],[228,34,222,30],[228,36,222,32],[228,38,222,34],[229,12,223,8],[229,18,223,14,"get"],[229,21,223,17],[229,22,223,18],[229,23,223,19],[229,24,223,20,"addBadge"],[229,32,223,28],[229,33,223,29,"AVAILABLE_BADGES"],[229,49,223,45],[229,50,223,46,"RELATIONSHIP_CHAMPION"],[229,71,223,67],[229,72,223,68],[230,10,224,6],[231,8,225,4],[233,8,227,4],[234,8,228,4],[234,12,228,8,"newPoints"],[234,21,228,17],[234,25,228,21],[234,29,228,25],[234,33,228,29],[234,34,228,30,"state"],[234,39,228,35],[234,40,228,36,"badges"],[234,46,228,42],[234,47,228,43,"includes"],[234,55,228,51],[234,56,228,52,"AVAILABLE_BADGES"],[234,72,228,68],[234,73,228,69,"POINTS_MASTER"],[234,86,228,82],[234,87,228,83],[234,89,228,85],[235,10,229,6],[235,16,229,12,"get"],[235,19,229,15],[235,20,229,16],[235,21,229,17],[235,22,229,18,"addBadge"],[235,30,229,26],[235,31,229,27,"AVAILABLE_BADGES"],[235,47,229,43],[235,48,229,44,"POINTS_MASTER"],[235,61,229,57],[235,62,229,58],[236,8,230,4],[237,6,231,2],[237,7,231,3],[238,6,231,3],[238,22,190,2,"addExperience"],[238,35,190,15,"addExperience"],[238,36,190,15,"_x2"],[238,39,190,15],[239,8,190,15],[239,15,190,15,"_ref3"],[239,20,190,15],[239,21,190,15,"apply"],[239,26,190,15],[239,33,190,15,"arguments"],[239,42,190,15],[240,6,190,15],[241,4,190,15],[241,7,231,3],[242,4,233,2],[243,4,234,2,"completeTask"],[243,16,234,14],[244,6,234,14],[244,10,234,14,"_ref4"],[244,15,234,14],[244,22,234,14,"_asyncToGenerator"],[244,39,234,14],[244,40,234,14,"default"],[244,47,234,14],[244,49,234,16],[244,60,234,23,"taskPoints"],[244,70,234,41],[244,72,234,46],[245,8,235,4],[245,12,235,10,"state"],[245,17,235,15],[245,20,235,18,"get"],[245,23,235,21],[245,24,235,22],[245,25,235,23],[246,8,236,4],[246,12,236,10,"newTasksCompleted"],[246,29,236,27],[246,32,236,30,"state"],[246,37,236,35],[246,38,236,36,"tasksCompleted"],[246,52,236,50],[246,55,236,53],[246,56,236,54],[248,8,238,4],[249,8,239,4],[249,12,239,10,"updatedState"],[249,24,239,22],[249,27,239,25],[250,10,240,6,"tasksCompleted"],[250,24,240,20],[250,26,240,22,"newTasksCompleted"],[251,8,241,4],[251,9,241,5],[252,8,243,4,"set"],[252,11,243,7],[252,12,243,8,"updatedState"],[252,24,243,20],[252,25,243,21],[254,8,245,4],[255,8,246,4],[255,14,246,10,"get"],[255,17,246,13],[255,18,246,14],[255,19,246,15],[255,20,246,16,"addExperience"],[255,33,246,29],[255,34,246,30,"taskPoints"],[255,44,246,40],[255,45,246,41],[257,8,248,4],[258,8,249,4],[258,14,249,10,"get"],[258,17,249,13],[258,18,249,14],[258,19,249,15],[258,20,249,16,"updateStreak"],[258,32,249,28],[258,33,249,29],[258,34,249,30],[260,8,251,4],[261,8,252,4],[261,14,252,11,"get"],[261,17,252,14],[261,18,252,15],[261,19,252,16],[261,20,252,25,"persistData"],[261,31,252,36],[261,32,252,37,"updatedState"],[261,44,252,49],[261,45,252,50],[263,8,254,4],[264,8,255,4],[264,14,255,10],[264,18,255,10,"taskComplete"],[264,38,255,22],[264,39,255,22,"taskComplete"],[264,51,255,22],[264,53,255,23],[264,54,255,24],[266,8,257,4],[267,8,258,4],[267,12,258,8,"newTasksCompleted"],[267,29,258,25],[267,34,258,30],[267,35,258,31],[267,37,258,33],[268,10,259,6],[268,16,259,12,"get"],[268,19,259,15],[268,20,259,16],[268,21,259,17],[268,22,259,18,"addBadge"],[268,30,259,26],[268,31,259,27,"AVAILABLE_BADGES"],[268,47,259,43],[268,48,259,44,"FIRST_TASK"],[268,58,259,54],[268,59,259,55],[269,8,260,4],[269,9,260,5],[269,15,260,11],[269,19,260,15,"newTasksCompleted"],[269,36,260,32],[269,41,260,37],[269,44,260,40],[269,46,260,42],[270,10,261,6],[270,16,261,12,"get"],[270,19,261,15],[270,20,261,16],[270,21,261,17],[270,22,261,18,"addBadge"],[270,30,261,26],[270,31,261,27,"AVAILABLE_BADGES"],[270,47,261,43],[270,48,261,44,"HUNDRED_CLUB"],[270,60,261,56],[270,61,261,57],[271,8,262,4],[272,6,263,2],[272,7,263,3],[273,6,263,3],[273,22,234,2,"completeTask"],[273,34,234,14,"completeTask"],[273,35,234,14,"_x3"],[273,38,234,14],[274,8,234,14],[274,15,234,14,"_ref4"],[274,20,234,14],[274,21,234,14,"apply"],[274,26,234,14],[274,33,234,14,"arguments"],[274,42,234,14],[275,6,234,14],[276,4,234,14],[276,7,263,3],[277,4,265,2],[278,4,266,2,"updateStreak"],[278,16,266,14],[279,6,266,14],[279,10,266,14,"_ref5"],[279,15,266,14],[279,22,266,14,"_asyncToGenerator"],[279,39,266,14],[279,40,266,14,"default"],[279,47,266,14],[279,49,266,16],[279,62,266,28],[280,8,267,4],[280,12,267,10,"state"],[280,17,267,15],[280,20,267,18,"get"],[280,23,267,21],[280,24,267,22],[280,25,267,23],[281,8,268,4],[281,12,268,10,"today"],[281,17,268,15],[281,20,268,18],[281,24,268,22,"Date"],[281,28,268,26],[281,29,268,27],[281,30,268,28],[282,8,269,4],[282,12,269,10,"todayString"],[282,23,269,21],[282,26,269,24,"today"],[282,31,269,29],[282,32,269,30,"toDateString"],[282,44,269,42],[282,45,269,43],[282,46,269,44],[284,8,271,4],[285,8,272,4],[285,12,272,8],[285,13,272,9,"state"],[285,18,272,14],[285,19,272,15,"lastActiveDate"],[285,33,272,29],[285,35,272,31],[286,10,273,6],[286,14,273,12,"updatedState"],[286,27,273,24],[286,30,273,27],[287,12,274,8,"currentStreak"],[287,25,274,21],[287,27,274,23],[287,28,274,24],[288,12,275,8,"longestStreak"],[288,25,275,21],[288,27,275,23,"Math"],[288,31,275,27],[288,32,275,28,"max"],[288,35,275,31],[288,36,275,32],[288,37,275,33],[288,39,275,35,"state"],[288,44,275,40],[288,45,275,41,"longestStreak"],[288,58,275,54],[288,59,275,55],[289,12,276,8,"lastActiveDate"],[289,26,276,22],[289,28,276,24,"today"],[289,33,276,29],[289,34,276,30,"toISOString"],[289,45,276,41],[289,46,276,42],[290,10,277,6],[290,11,277,7],[291,10,279,6,"set"],[291,13,279,9],[291,14,279,10,"updatedState"],[291,27,279,22],[291,28,279,23],[292,10,280,6],[292,16,280,13,"get"],[292,19,280,16],[292,20,280,17],[292,21,280,18],[292,22,280,27,"persistData"],[292,33,280,38],[292,34,280,39,"updatedState"],[292,47,280,51],[292,48,280,52],[294,10,282,6],[295,10,283,6],[295,14,283,10,"state"],[295,19,283,15],[295,20,283,16,"currentStreak"],[295,33,283,29],[295,38,283,34],[295,39,283,35],[295,41,283,37],[296,12,284,8],[296,18,284,14,"get"],[296,21,284,17],[296,22,284,18],[296,23,284,19],[296,24,284,20,"addBadge"],[296,32,284,28],[296,33,284,29,"AVAILABLE_BADGES"],[296,49,284,45],[296,50,284,46,"FIRST_TASK"],[296,60,284,56],[296,61,284,57],[297,10,285,6],[298,10,286,6],[299,8,287,4],[300,8,289,4],[300,12,289,10,"lastActiveDate"],[300,26,289,24],[300,29,289,27],[300,33,289,31,"Date"],[300,37,289,35],[300,38,289,36,"state"],[300,43,289,41],[300,44,289,42,"lastActiveDate"],[300,58,289,56],[300,59,289,57],[301,8,290,4],[301,12,290,10,"lastActiveDateString"],[301,32,290,30],[301,35,290,33,"lastActiveDate"],[301,49,290,47],[301,50,290,48,"toDateString"],[301,62,290,60],[301,63,290,61],[301,64,290,62],[303,8,292,4],[304,8,293,4],[304,12,293,8,"lastActiveDateString"],[304,32,293,28],[304,37,293,33,"todayString"],[304,48,293,44],[304,50,293,46],[305,10,294,6],[306,8,295,4],[308,8,297,4],[309,8,298,4],[309,12,298,10,"diffTime"],[309,20,298,18],[309,23,298,21,"today"],[309,28,298,26],[309,29,298,27,"getTime"],[309,36,298,34],[309,37,298,35],[309,38,298,36],[309,41,298,39,"lastActiveDate"],[309,55,298,53],[309,56,298,54,"getTime"],[309,63,298,61],[309,64,298,62],[309,65,298,63],[310,8,299,4],[310,12,299,10,"diffDays"],[310,20,299,18],[310,23,299,21,"Math"],[310,27,299,25],[310,28,299,26,"floor"],[310,33,299,31],[310,34,299,32,"diffTime"],[310,42,299,40],[310,46,299,44],[310,50,299,48],[310,53,299,51],[310,55,299,53],[310,58,299,56],[310,60,299,58],[310,63,299,61],[310,65,299,63],[310,66,299,64],[310,67,299,65],[311,8,301,4],[311,12,301,8,"newStreak"],[311,21,301,17],[312,8,302,4],[312,12,302,8,"newLongestStreak"],[312,28,302,24],[313,8,304,4],[313,12,304,8,"diffDays"],[313,20,304,16],[313,25,304,21],[313,26,304,22],[313,28,304,24],[314,10,305,6],[315,10,306,6,"newStreak"],[315,19,306,15],[315,22,306,18,"state"],[315,27,306,23],[315,28,306,24,"currentStreak"],[315,41,306,37],[315,44,306,40],[315,45,306,41],[316,10,307,6,"newLongestStreak"],[316,26,307,22],[316,29,307,25,"Math"],[316,33,307,29],[316,34,307,30,"max"],[316,37,307,33],[316,38,307,34,"newStreak"],[316,47,307,43],[316,49,307,45,"state"],[316,54,307,50],[316,55,307,51,"longestStreak"],[316,68,307,64],[316,69,307,65],[317,8,308,4],[317,9,308,5],[317,15,308,11],[317,19,308,15,"diffDays"],[317,27,308,23],[317,30,308,26],[317,31,308,27],[317,33,308,29],[318,10,309,6],[319,10,310,6,"newStreak"],[319,19,310,15],[319,22,310,18],[319,23,310,19],[320,10,311,6,"newLongestStreak"],[320,26,311,22],[320,29,311,25,"state"],[320,34,311,30],[320,35,311,31,"longestStreak"],[320,48,311,44],[320,49,311,45],[320,50,311,46],[321,8,312,4],[321,9,312,5],[321,15,312,11],[322,10,313,6],[323,10,314,6],[324,8,315,4],[325,8,317,4],[325,12,317,10,"updatedState"],[325,24,317,22],[325,27,317,25],[326,10,318,6,"currentStreak"],[326,23,318,19],[326,25,318,21,"newStreak"],[326,34,318,30],[327,10,319,6,"longestStreak"],[327,23,319,19],[327,25,319,21,"newLongestStreak"],[327,41,319,37],[328,10,320,6,"lastActiveDate"],[328,24,320,20],[328,26,320,22,"today"],[328,31,320,27],[328,32,320,28,"toISOString"],[328,43,320,39],[328,44,320,40],[329,8,321,4],[329,9,321,5],[330,8,323,4,"set"],[330,11,323,7],[330,12,323,8,"updatedState"],[330,24,323,20],[330,25,323,21],[332,8,325,4],[333,8,326,4],[333,14,326,11,"get"],[333,17,326,14],[333,18,326,15],[333,19,326,16],[333,20,326,25,"persistData"],[333,31,326,36],[333,32,326,37,"updatedState"],[333,44,326,49],[333,45,326,50],[335,8,328,4],[336,8,329,4],[336,12,329,8,"newStreak"],[336,21,329,17],[336,26,329,22],[336,27,329,23],[336,29,329,25],[337,10,330,6],[337,16,330,12,"get"],[337,19,330,15],[337,20,330,16],[337,21,330,17],[337,22,330,18,"addBadge"],[337,30,330,26],[337,31,330,27,"AVAILABLE_BADGES"],[337,47,330,43],[337,48,330,44,"WEEK_WARRIOR"],[337,60,330,56],[337,61,330,57],[338,8,331,4],[338,9,331,5],[338,15,331,11],[338,19,331,15,"newStreak"],[338,28,331,24],[338,33,331,29],[338,35,331,31],[338,37,331,33],[339,10,332,6],[339,16,332,12,"get"],[339,19,332,15],[339,20,332,16],[339,21,332,17],[339,22,332,18,"addBadge"],[339,30,332,26],[339,31,332,27,"AVAILABLE_BADGES"],[339,47,332,43],[339,48,332,44,"MONTH_MASTER"],[339,60,332,56],[339,61,332,57],[340,8,333,4],[340,9,333,5],[340,15,333,11],[340,19,333,15,"newStreak"],[340,28,333,24],[340,33,333,29],[340,35,333,31],[340,37,333,33],[341,10,334,6],[341,16,334,12,"get"],[341,19,334,15],[341,20,334,16],[341,21,334,17],[341,22,334,18,"addBadge"],[341,30,334,26],[341,31,334,27,"AVAILABLE_BADGES"],[341,47,334,43],[341,48,334,44,"STREAK_LEGEND"],[341,61,334,57],[341,62,334,58],[342,8,335,4],[343,6,336,2],[343,7,336,3],[344,6,336,3],[344,22,266,2,"updateStreak"],[344,34,266,14,"updateStreak"],[344,35,266,14],[345,8,266,14],[345,15,266,14,"_ref5"],[345,20,266,14],[345,21,266,14,"apply"],[345,26,266,14],[345,33,266,14,"arguments"],[345,42,266,14],[346,6,266,14],[347,4,266,14],[347,7,336,3],[348,4,338,2],[349,4,339,2,"breakStreak"],[349,15,339,13],[350,6,339,13],[350,10,339,13,"_ref6"],[350,15,339,13],[350,22,339,13,"_asyncToGenerator"],[350,39,339,13],[350,40,339,13,"default"],[350,47,339,13],[350,49,339,15],[350,62,339,27],[351,8,340,4],[351,12,340,10,"updatedState"],[351,24,340,22],[351,27,340,25],[352,10,341,6,"currentStreak"],[352,23,341,19],[352,25,341,21],[353,8,342,4],[353,9,342,5],[354,8,344,4,"set"],[354,11,344,7],[354,12,344,8,"updatedState"],[354,24,344,20],[354,25,344,21],[355,8,345,4],[355,14,345,11,"get"],[355,17,345,14],[355,18,345,15],[355,19,345,16],[355,20,345,25,"persistData"],[355,31,345,36],[355,32,345,37,"updatedState"],[355,44,345,49],[355,45,345,50],[356,6,346,2],[356,7,346,3],[357,6,346,3],[357,22,339,2,"breakStreak"],[357,33,339,13,"breakStreak"],[357,34,339,13],[358,8,339,13],[358,15,339,13,"_ref6"],[358,20,339,13],[358,21,339,13,"apply"],[358,26,339,13],[358,33,339,13,"arguments"],[358,42,339,13],[359,6,339,13],[360,4,339,13],[360,7,346,3],[361,4,348,2],[362,4,349,2,"addBadge"],[362,12,349,10],[363,6,349,10],[363,10,349,10,"_ref7"],[363,15,349,10],[363,22,349,10,"_asyncToGenerator"],[363,39,349,10],[363,40,349,10,"default"],[363,47,349,10],[363,49,349,12],[363,60,349,19,"badge"],[363,65,349,32],[363,67,349,37],[364,8,350,4],[364,12,350,10,"state"],[364,17,350,15],[364,20,350,18,"get"],[364,23,350,21],[364,24,350,22],[364,25,350,23],[365,8,352,4],[365,12,352,8],[365,13,352,9,"state"],[365,18,352,14],[365,19,352,15,"badges"],[365,25,352,21],[365,26,352,22,"includes"],[365,34,352,30],[365,35,352,31,"badge"],[365,40,352,36],[365,41,352,37],[365,43,352,39],[366,10,353,6],[366,14,353,12,"updatedState"],[366,26,353,24],[366,29,353,27],[367,12,354,8,"badges"],[367,18,354,14],[367,20,354,16],[367,21,354,17],[367,24,354,20,"state"],[367,29,354,25],[367,30,354,26,"badges"],[367,36,354,32],[367,38,354,34,"badge"],[367,43,354,39],[368,10,355,6],[368,11,355,7],[369,10,357,6,"set"],[369,13,357,9],[369,14,357,10,"updatedState"],[369,26,357,22],[369,27,357,23],[370,10,358,6],[370,16,358,13,"get"],[370,19,358,16],[370,20,358,17],[370,21,358,18],[370,22,358,27,"persistData"],[370,33,358,38],[370,34,358,39,"updatedState"],[370,46,358,51],[370,47,358,52],[372,10,360,6],[373,10,361,6],[373,16,361,12],[373,20,361,12,"achievement"],[373,40,361,23],[373,41,361,23,"achievement"],[373,52,361,23],[373,54,361,24],[373,55,361,25],[374,8,362,4],[375,6,363,2],[375,7,363,3],[376,6,363,3],[376,22,349,2,"addBadge"],[376,30,349,10,"addBadge"],[376,31,349,10,"_x4"],[376,34,349,10],[377,8,349,10],[377,15,349,10,"_ref7"],[377,20,349,10],[377,21,349,10,"apply"],[377,26,349,10],[377,33,349,10,"arguments"],[377,42,349,10],[378,6,349,10],[379,4,349,10],[379,7,363,3],[380,4,365,2],[381,4,366,2,"resetProgress"],[381,17,366,15],[382,6,366,15],[382,10,366,15,"_ref8"],[382,15,366,15],[382,22,366,15,"_asyncToGenerator"],[382,39,366,15],[382,40,366,15,"default"],[382,47,366,15],[382,49,366,17],[382,62,366,29],[383,8,367,4],[383,12,367,10,"resetState"],[383,22,367,20],[383,25,367,23],[384,10,368,6,"totalPoints"],[384,21,368,17],[384,23,368,19],[384,24,368,20],[385,10,369,6,"currentLevel"],[385,22,369,18],[385,24,369,20],[385,25,369,21],[386,10,370,6,"currentStreak"],[386,23,370,19],[386,25,370,21],[386,26,370,22],[387,10,371,6,"longestStreak"],[387,23,371,19],[387,25,371,21],[387,26,371,22],[388,10,372,6,"tasksCompleted"],[388,24,372,20],[388,26,372,22],[388,27,372,23],[389,10,373,6,"badges"],[389,16,373,12],[389,18,373,14],[389,20,373,16],[390,10,374,6,"lastActiveDate"],[390,24,374,20],[390,26,374,22],[391,8,375,4],[391,9,375,5],[392,8,377,4,"set"],[392,11,377,7],[392,12,377,8,"resetState"],[392,22,377,18],[392,23,377,19],[394,8,379,4],[395,8,380,4],[395,12,380,8],[396,10,381,6],[397,10,382,6],[397,14,382,12,"storage"],[397,21,382,19],[397,24,382,22,"getAsyncStorage"],[397,39,382,37],[397,40,382,38],[397,41,382,39],[398,10,383,6],[398,14,383,10,"storage"],[398,21,383,17],[398,23,383,19],[399,12,384,8],[399,18,384,14,"storage"],[399,25,384,21],[399,26,384,22,"removeItem"],[399,36,384,32],[399,37,384,33,"STORAGE_KEY"],[399,48,384,44],[399,49,384,45],[400,10,385,6],[400,11,385,7],[400,17,385,13],[401,12,386,8,"console"],[401,19,386,15],[401,20,386,16,"log"],[401,23,386,19],[401,24,386,20],[401,76,386,72],[401,77,386,73],[402,10,387,6],[403,8,388,4],[403,9,388,5],[403,10,388,6],[403,17,388,13,"error"],[403,22,388,18],[403,24,388,20],[404,10,389,6,"console"],[404,17,389,13],[404,18,389,14,"error"],[404,23,389,19],[404,24,389,20],[404,52,389,48],[404,54,389,50,"error"],[404,59,389,55],[404,60,389,56],[405,8,390,4],[406,6,391,2],[406,7,391,3],[407,6,391,3],[407,22,366,2,"resetProgress"],[407,35,366,15,"resetProgress"],[407,36,366,15],[408,8,366,15],[408,15,366,15,"_ref8"],[408,20,366,15],[408,21,366,15,"apply"],[408,26,366,15],[408,33,366,15,"arguments"],[408,42,366,15],[409,6,366,15],[410,4,366,15],[410,7,391,3],[411,4,393,2],[412,4,394,2,"getExperienceForNextLevel"],[412,29,394,27],[412,31,394,29,"getExperienceForNextLevel"],[412,32,394,29],[412,37,394,35],[413,6,395,4],[413,10,395,10,"state"],[413,15,395,15],[413,18,395,18,"get"],[413,21,395,21],[413,22,395,22],[413,23,395,23],[414,6,396,4],[414,10,396,8,"state"],[414,15,396,13],[414,16,396,14,"currentLevel"],[414,28,396,26],[414,32,396,30,"LEVEL_THRESHOLDS"],[414,48,396,46],[414,49,396,47,"length"],[414,55,396,53],[414,58,396,56],[414,59,396,57],[414,61,396,59],[415,8,397,6],[415,15,397,13],[415,16,397,14],[415,17,397,15],[415,18,397,16],[416,6,398,4],[417,6,399,4],[417,13,399,11,"LEVEL_THRESHOLDS"],[417,29,399,27],[417,30,399,28,"state"],[417,35,399,33],[417,36,399,34,"currentLevel"],[417,48,399,46],[417,49,399,47],[417,52,399,50,"state"],[417,57,399,55],[417,58,399,56,"totalPoints"],[417,69,399,67],[418,4,400,2],[418,5,400,3],[419,4,402,2,"getProgressPercentage"],[419,25,402,23],[419,27,402,25,"getProgressPercentage"],[419,28,402,25],[419,33,402,31],[420,6,403,4],[420,10,403,10,"state"],[420,15,403,15],[420,18,403,18,"get"],[420,21,403,21],[420,22,403,22],[420,23,403,23],[421,6,404,4],[421,10,404,8,"state"],[421,15,404,13],[421,16,404,14,"currentLevel"],[421,28,404,26],[421,32,404,30,"LEVEL_THRESHOLDS"],[421,48,404,46],[421,49,404,47,"length"],[421,55,404,53],[421,58,404,56],[421,59,404,57],[421,61,404,59],[422,8,405,6],[422,15,405,13],[422,18,405,16],[422,19,405,17],[422,20,405,18],[423,6,406,4],[424,6,408,4],[424,10,408,10,"currentLevelStart"],[424,27,408,27],[424,30,408,30,"LEVEL_THRESHOLDS"],[424,46,408,46],[424,47,408,47,"state"],[424,52,408,52],[424,53,408,53,"currentLevel"],[424,65,408,65],[424,68,408,68],[424,69,408,69],[424,70,408,70],[425,6,409,4],[425,10,409,10,"nextLevelStart"],[425,24,409,24],[425,27,409,27,"LEVEL_THRESHOLDS"],[425,43,409,43],[425,44,409,44,"state"],[425,49,409,49],[425,50,409,50,"currentLevel"],[425,62,409,62],[425,63,409,63],[426,6,410,4],[426,10,410,10,"currentProgress"],[426,25,410,25],[426,28,410,28,"state"],[426,33,410,33],[426,34,410,34,"totalPoints"],[426,45,410,45],[426,48,410,48,"currentLevelStart"],[426,65,410,65],[427,6,411,4],[427,10,411,10,"totalNeeded"],[427,21,411,21],[427,24,411,24,"nextLevelStart"],[427,38,411,38],[427,41,411,41,"currentLevelStart"],[427,58,411,58],[428,6,413,4],[428,13,413,11,"Math"],[428,17,413,15],[428,18,413,16,"floor"],[428,23,413,21],[428,24,413,23,"currentProgress"],[428,39,413,38],[428,42,413,41,"totalNeeded"],[428,53,413,52],[428,56,413,56],[428,59,413,59],[428,60,413,60],[429,4,414,2],[429,5,414,3],[430,4,416,2,"shouldLevelUp"],[430,17,416,15],[430,19,416,17,"shouldLevelUp"],[430,20,416,17],[430,25,416,23],[431,6,417,4],[431,10,417,10,"state"],[431,15,417,15],[431,18,417,18,"get"],[431,21,417,21],[431,22,417,22],[431,23,417,23],[432,6,418,4],[432,13,418,11,"state"],[432,18,418,16],[432,19,418,17,"currentLevel"],[432,31,418,29],[432,34,418,32,"LEVEL_THRESHOLDS"],[432,50,418,48],[432,51,418,49,"length"],[432,57,418,55],[432,60,418,58],[432,61,418,59],[432,65,419,11,"state"],[432,70,419,16],[432,71,419,17,"totalPoints"],[432,82,419,28],[432,86,419,32,"LEVEL_THRESHOLDS"],[432,102,419,48],[432,103,419,49,"state"],[432,108,419,54],[432,109,419,55,"currentLevel"],[432,121,419,67],[432,122,419,68],[433,4,420,2],[434,2,421,0],[434,3,421,1],[434,4,421,2],[434,5,421,3],[436,2,423,0],[437,0,423,0],[437,3]],"functionMap":{"names":["<global>","getAsyncStorage","calculateLevelUpPoints","generateLevelThresholds","create$argument_0","loadPersistedData","persistData","addExperience","completeTask","updateStreak","breakStreak","addBadge","resetProgress","getExperienceForNextLevel","getProgressPercentage","shouldLevelUp"],"mappings":"AAA;wBCO;CDuB;+BE+B;CFE;gCGG;CHM;uCImB;qBCY;GDwD;eEG;GFwB;iBGG;GHyC;gBIG;GJ6B;gBKG;GLsE;eMG;GNO;YOG;GPc;iBQG;GRyB;6BSG;GTM;yBUE;GVY;iBWE;GXI;EJC"},"hasCjsExports":false},"type":"js/module"}]}