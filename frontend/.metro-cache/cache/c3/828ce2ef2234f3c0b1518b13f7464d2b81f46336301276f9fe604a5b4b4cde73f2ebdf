{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"zustand","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":33,"index":33}}],"key":"POPvx7yS3Y3wz+S/9OAefiXNs0Q=","exportNames":["*"],"imports":1}},{"name":"../utils/HapticsManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":34},"end":{"line":2,"column":77,"index":111}}],"key":"nBdnSRqGBBV35N8QrGTTDbqVGgg=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":21,"column":33,"index":719},"end":{"line":21,"column":85,"index":771}}],"key":"lV14QuoELkLKy4kI0aEcfvvcE84=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"AVAILABLE_BADGES\", {\n    enumerable: true,\n    get: function () {\n      return AVAILABLE_BADGES;\n    }\n  });\n  Object.defineProperty(exports, \"useGameStore\", {\n    enumerable: true,\n    get: function () {\n      return useGameStore;\n    }\n  });\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _zustand = require(_dependencyMap[1], \"zustand\");\n  var _utilsHapticsManager = require(_dependencyMap[2], \"../utils/HapticsManager\");\n  // Conditional AsyncStorage import to handle web/SSR environments\n  var AsyncStorage = null;\n\n  // Helper function to safely get AsyncStorage\n  var getAsyncStorage = () => {\n    // Always return null during SSR or when window is not available\n    if (typeof window === 'undefined') {\n      return null;\n    }\n\n    // Return cached AsyncStorage if available\n    if (AsyncStorage) return AsyncStorage;\n\n    // Only try to load AsyncStorage in browser environment\n    try {\n      // Check if require is available and we're in the right environment\n      if (typeof require === 'function') {\n        var AsyncStorageModule = require(_dependencyMap[3], \"@react-native-async-storage/async-storage\");\n        AsyncStorage = AsyncStorageModule.default || AsyncStorageModule;\n        return AsyncStorage;\n      }\n    } catch (error) {\n      // Silently fail and return null\n      console.log('AsyncStorage not available:', error.message);\n    }\n    return null;\n  };\n  // Level progression: exponential growth\n  var calculateLevelUpPoints = level => {\n    return Math.floor(100 * Math.pow(1.5, level - 1));\n  };\n\n  // Generate level thresholds up to level 50\n  var generateLevelThresholds = () => {\n    var thresholds = [0]; // Level 1 starts at 0\n    for (var i = 1; i <= 50; i++) {\n      thresholds.push(thresholds[i - 1] + calculateLevelUpPoints(i));\n    }\n    return thresholds;\n  };\n  var LEVEL_THRESHOLDS = generateLevelThresholds();\n  var STORAGE_KEY = '@pookie4u_game_data';\n\n  // Available badges\n  var AVAILABLE_BADGES = {\n    FIRST_TASK: 'first_task',\n    WEEK_WARRIOR: 'week_warrior',\n    // 7-day streak\n    MONTH_MASTER: 'month_master',\n    // 30-day streak\n    HUNDRED_CLUB: 'hundred_club',\n    // 100 tasks\n    ROMANCE_EXPERT: 'romance_expert',\n    // Level 5\n    LOVE_GURU: 'love_guru',\n    // Level 10\n    RELATIONSHIP_CHAMPION: 'relationship_champion',\n    // Level 20\n    STREAK_LEGEND: 'streak_legend',\n    // 50-day streak\n    POINTS_MASTER: 'points_master',\n    // 1000 points\n    DEDICATION_AWARD: 'dedication_award' // 100 days active\n  };\n  var useGameStore = (0, _zustand.create)((set, get) => ({\n    // Initial state\n    totalPoints: 0,\n    currentLevel: 1,\n    currentStreak: 0,\n    longestStreak: 0,\n    tasksCompleted: 0,\n    badges: [],\n    lastActiveDate: null,\n    levelUpPoints: LEVEL_THRESHOLDS,\n    // Load persisted data from AsyncStorage\n    loadPersistedData: function () {\n      var _ref = (0, _asyncToGenerator.default)(function* () {\n        // Always set fallback values first to ensure UI works\n        var fallbackState = {\n          totalPoints: 35,\n          currentLevel: 1,\n          currentStreak: 7,\n          // Test value to verify streak display works\n          longestStreak: 10,\n          // Test value to verify longest streak works\n          tasksCompleted: 0,\n          badges: [],\n          lastActiveDate: new Date().toISOString()\n        };\n        try {\n          // Check if AsyncStorage is available (not on web during SSR)\n          var storage = getAsyncStorage();\n          if (!storage) {\n            console.log('AsyncStorage not available, using fallback values');\n            set(fallbackState);\n            return;\n          }\n          var stored = yield storage.getItem(STORAGE_KEY);\n          if (stored) {\n            var data = JSON.parse(stored);\n            set({\n              totalPoints: data.totalPoints || 0,\n              currentLevel: data.currentLevel || 1,\n              currentStreak: data.currentStreak || 0,\n              longestStreak: data.longestStreak || 0,\n              tasksCompleted: data.tasksCompleted || 0,\n              badges: data.badges || [],\n              lastActiveDate: data.lastActiveDate || null\n            });\n\n            // Check if streak needs to be broken due to inactivity\n            if (data.lastActiveDate) {\n              var lastDate = new Date(data.lastActiveDate);\n              var today = new Date();\n              var diffTime = today.getTime() - lastDate.getTime();\n              var diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n\n              // If more than 1 day has passed, break the streak\n              if (diffDays > 1) {\n                yield get().breakStreak();\n              }\n            }\n          } else {\n            // First time user - set initial test data to verify UI\n            console.log('No stored data found, setting initial test data');\n            set(fallbackState);\n          }\n        } catch (error) {\n          console.error('Failed to load game data:', error);\n          // Always set fallback values on any error\n          set(fallbackState);\n        }\n      });\n      return function loadPersistedData() {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    // Persist current state to AsyncStorage\n    persistData: function () {\n      var _ref2 = (0, _asyncToGenerator.default)(function* (updatedState) {\n        try {\n          // Check if AsyncStorage is available\n          var storage = getAsyncStorage();\n          if (!storage) {\n            console.log('AsyncStorage not available, skipping data persistence');\n            return;\n          }\n          var currentState = get();\n          var dataToStore = {\n            totalPoints: updatedState.totalPoints ?? currentState.totalPoints,\n            currentLevel: updatedState.currentLevel ?? currentState.currentLevel,\n            currentStreak: updatedState.currentStreak ?? currentState.currentStreak,\n            longestStreak: updatedState.longestStreak ?? currentState.longestStreak,\n            tasksCompleted: updatedState.tasksCompleted ?? currentState.tasksCompleted,\n            badges: updatedState.badges ?? currentState.badges,\n            lastActiveDate: updatedState.lastActiveDate ?? currentState.lastActiveDate ?? new Date().toISOString()\n          };\n          yield storage.setItem(STORAGE_KEY, JSON.stringify(dataToStore));\n        } catch (error) {\n          console.error('Failed to persist game data:', error);\n        }\n      });\n      return function persistData(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    // Add experience points with level progression\n    addExperience: function () {\n      var _ref3 = (0, _asyncToGenerator.default)(function* (points) {\n        var state = get();\n        var newPoints = state.totalPoints + points;\n\n        // Calculate new level\n        var newLevel = state.currentLevel;\n        while (newLevel < LEVEL_THRESHOLDS.length - 1 && newPoints >= LEVEL_THRESHOLDS[newLevel]) {\n          newLevel++;\n        }\n        var leveledUp = newLevel > state.currentLevel;\n\n        // Update state\n        var updatedState = {\n          totalPoints: newPoints,\n          currentLevel: newLevel\n        };\n        set(updatedState);\n\n        // Persist immediately\n        yield get().persistData(updatedState);\n\n        // Haptic feedback for level up\n        if (leveledUp) {\n          yield (0, _utilsHapticsManager.levelUp)();\n\n          // Award level-based badges\n          if (newLevel === 5) {\n            yield get().addBadge(AVAILABLE_BADGES.ROMANCE_EXPERT);\n          } else if (newLevel === 10) {\n            yield get().addBadge(AVAILABLE_BADGES.LOVE_GURU);\n          } else if (newLevel === 20) {\n            yield get().addBadge(AVAILABLE_BADGES.RELATIONSHIP_CHAMPION);\n          }\n        }\n\n        // Check for points-based badges\n        if (newPoints >= 1000 && !state.badges.includes(AVAILABLE_BADGES.POINTS_MASTER)) {\n          yield get().addBadge(AVAILABLE_BADGES.POINTS_MASTER);\n        }\n      });\n      return function addExperience(_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    // Complete a task (combines points and task completion)\n    completeTask: function () {\n      var _ref4 = (0, _asyncToGenerator.default)(function* (taskPoints) {\n        var state = get();\n        var newTasksCompleted = state.tasksCompleted + 1;\n\n        // Update state\n        var updatedState = {\n          tasksCompleted: newTasksCompleted\n        };\n        set(updatedState);\n\n        // Add experience points\n        yield get().addExperience(taskPoints);\n\n        // Update streak\n        yield get().updateStreak();\n\n        // Persist task completion\n        yield get().persistData(updatedState);\n\n        // Task completion haptic feedback\n        yield (0, _utilsHapticsManager.taskComplete)();\n\n        // Check for task-based badges\n        if (newTasksCompleted === 1) {\n          yield get().addBadge(AVAILABLE_BADGES.FIRST_TASK);\n        } else if (newTasksCompleted === 100) {\n          yield get().addBadge(AVAILABLE_BADGES.HUNDRED_CLUB);\n        }\n      });\n      return function completeTask(_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }(),\n    // Update daily streak (Snapchat-style)\n    updateStreak: function () {\n      var _ref5 = (0, _asyncToGenerator.default)(function* () {\n        var state = get();\n        var today = new Date();\n        var todayString = today.toDateString();\n\n        // If no last active date, this is the first task - start streak at 1\n        if (!state.lastActiveDate) {\n          var _updatedState = {\n            currentStreak: 1,\n            longestStreak: Math.max(1, state.longestStreak),\n            lastActiveDate: today.toISOString()\n          };\n          set(_updatedState);\n          yield get().persistData(_updatedState);\n\n          // Check for first task badge\n          if (state.currentStreak === 0) {\n            yield get().addBadge(AVAILABLE_BADGES.FIRST_TASK);\n          }\n          return;\n        }\n        var lastActiveDate = new Date(state.lastActiveDate);\n        var lastActiveDateString = lastActiveDate.toDateString();\n\n        // If already updated today, don't update again\n        if (lastActiveDateString === todayString) {\n          return;\n        }\n\n        // Calculate days difference\n        var diffTime = today.getTime() - lastActiveDate.getTime();\n        var diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n        var newStreak;\n        var newLongestStreak;\n        if (diffDays === 1) {\n          // Consecutive day - increment streak\n          newStreak = state.currentStreak + 1;\n          newLongestStreak = Math.max(newStreak, state.longestStreak);\n        } else if (diffDays > 1) {\n          // Missed day(s) - reset streak to 1 (starting fresh)\n          newStreak = 1;\n          newLongestStreak = state.longestStreak; // Keep longest streak\n        } else {\n          // Same day (shouldn't happen but safety check)\n          return;\n        }\n        var updatedState = {\n          currentStreak: newStreak,\n          longestStreak: newLongestStreak,\n          lastActiveDate: today.toISOString()\n        };\n        set(updatedState);\n\n        // Persist immediately\n        yield get().persistData(updatedState);\n\n        // Check for streak-based badges\n        if (newStreak === 7) {\n          yield get().addBadge(AVAILABLE_BADGES.WEEK_WARRIOR);\n        } else if (newStreak === 30) {\n          yield get().addBadge(AVAILABLE_BADGES.MONTH_MASTER);\n        } else if (newStreak === 50) {\n          yield get().addBadge(AVAILABLE_BADGES.STREAK_LEGEND);\n        }\n      });\n      return function updateStreak() {\n        return _ref5.apply(this, arguments);\n      };\n    }(),\n    // Break current streak\n    breakStreak: function () {\n      var _ref6 = (0, _asyncToGenerator.default)(function* () {\n        var updatedState = {\n          currentStreak: 0\n        };\n        set(updatedState);\n        yield get().persistData(updatedState);\n      });\n      return function breakStreak() {\n        return _ref6.apply(this, arguments);\n      };\n    }(),\n    // Add a new badge\n    addBadge: function () {\n      var _ref7 = (0, _asyncToGenerator.default)(function* (badge) {\n        var state = get();\n        if (!state.badges.includes(badge)) {\n          var updatedState = {\n            badges: [...state.badges, badge]\n          };\n          set(updatedState);\n          yield get().persistData(updatedState);\n\n          // Achievement haptic feedback\n          yield (0, _utilsHapticsManager.achievement)();\n        }\n      });\n      return function addBadge(_x4) {\n        return _ref7.apply(this, arguments);\n      };\n    }(),\n    // Reset all progress (for testing or account reset)\n    resetProgress: function () {\n      var _ref8 = (0, _asyncToGenerator.default)(function* () {\n        var resetState = {\n          totalPoints: 0,\n          currentLevel: 1,\n          currentStreak: 0,\n          longestStreak: 0,\n          tasksCompleted: 0,\n          badges: [],\n          lastActiveDate: null\n        };\n        set(resetState);\n\n        // Clear from storage\n        try {\n          // Check if AsyncStorage is available\n          var storage = getAsyncStorage();\n          if (storage) {\n            yield storage.removeItem(STORAGE_KEY);\n          } else {\n            console.log('AsyncStorage not available, skipping data clearing');\n          }\n        } catch (error) {\n          console.error('Failed to clear game data:', error);\n        }\n      });\n      return function resetProgress() {\n        return _ref8.apply(this, arguments);\n      };\n    }(),\n    // Computed getters\n    getExperienceForNextLevel: () => {\n      var state = get();\n      if (state.currentLevel >= LEVEL_THRESHOLDS.length - 1) {\n        return 0; // Max level reached\n      }\n      return LEVEL_THRESHOLDS[state.currentLevel] - state.totalPoints;\n    },\n    getProgressPercentage: () => {\n      var state = get();\n      if (state.currentLevel >= LEVEL_THRESHOLDS.length - 1) {\n        return 100; // Max level\n      }\n      var currentLevelStart = LEVEL_THRESHOLDS[state.currentLevel - 1];\n      var nextLevelStart = LEVEL_THRESHOLDS[state.currentLevel];\n      var currentProgress = state.totalPoints - currentLevelStart;\n      var totalNeeded = nextLevelStart - currentLevelStart;\n      return Math.floor(currentProgress / totalNeeded * 100);\n    },\n    shouldLevelUp: () => {\n      var state = get();\n      return state.currentLevel < LEVEL_THRESHOLDS.length - 1 && state.totalPoints >= LEVEL_THRESHOLDS[state.currentLevel];\n    }\n  }));\n\n  // Store will be initialized when first used in components\n});","lineCount":435,"map":[[12,2,79,0,"Object"],[12,8,79,0],[12,9,79,0,"defineProperty"],[12,23,79,0],[12,24,79,0,"exports"],[12,31,79,0],[13,4,79,0,"enumerable"],[13,14,79,0],[14,4,79,0,"get"],[14,7,79,0],[14,18,79,0,"get"],[14,19,79,0],[15,6,79,0],[15,13,79,0,"AVAILABLE_BADGES"],[15,29,79,0],[16,4,79,0],[17,2,79,0],[18,2,425,0,"Object"],[18,8,425,0],[18,9,425,0,"defineProperty"],[18,23,425,0],[18,24,425,0,"exports"],[18,31,425,0],[19,4,425,0,"enumerable"],[19,14,425,0],[20,4,425,0,"get"],[20,7,425,0],[20,18,425,0,"get"],[20,19,425,0],[21,6,425,0],[21,13,425,9,"useGameStore"],[21,25,425,21],[22,4,425,21],[23,2,425,21],[24,2,425,24],[24,6,425,24,"_babelRuntimeHelpersAsyncToGenerator"],[24,42,425,24],[24,45,425,24,"require"],[24,52,425,24],[24,53,425,24,"_dependencyMap"],[24,67,425,24],[25,2,425,24],[25,6,425,24,"_asyncToGenerator"],[25,23,425,24],[25,26,425,24,"_interopDefault"],[25,41,425,24],[25,42,425,24,"_babelRuntimeHelpersAsyncToGenerator"],[25,78,425,24],[26,2,1,0],[26,6,1,0,"_zustand"],[26,14,1,0],[26,17,1,0,"require"],[26,24,1,0],[26,25,1,0,"_dependencyMap"],[26,39,1,0],[27,2,2,0],[27,6,2,0,"_utilsHapticsManager"],[27,26,2,0],[27,29,2,0,"require"],[27,36,2,0],[27,37,2,0,"_dependencyMap"],[27,51,2,0],[28,2,4,0],[29,2,5,0],[29,6,5,4,"AsyncStorage"],[29,18,5,21],[29,21,5,24],[29,25,5,28],[31,2,7,0],[32,2,8,0],[32,6,8,6,"getAsyncStorage"],[32,21,8,21],[32,24,8,24,"getAsyncStorage"],[32,25,8,24],[32,30,8,30],[33,4,9,2],[34,4,10,2],[34,8,10,6],[34,15,10,13,"window"],[34,21,10,19],[34,26,10,24],[34,37,10,35],[34,39,10,37],[35,6,11,4],[35,13,11,11],[35,17,11,15],[36,4,12,2],[38,4,14,2],[39,4,15,2],[39,8,15,6,"AsyncStorage"],[39,20,15,18],[39,22,15,20],[39,29,15,27,"AsyncStorage"],[39,41,15,39],[41,4,17,2],[42,4,18,2],[42,8,18,6],[43,6,19,4],[44,6,20,4],[44,10,20,8],[44,17,20,15,"require"],[44,24,20,22],[44,29,20,27],[44,39,20,37],[44,41,20,39],[45,8,21,6],[45,12,21,12,"AsyncStorageModule"],[45,30,21,30],[45,33,21,33,"require"],[45,40,21,40],[45,41,21,40,"_dependencyMap"],[45,55,21,40],[45,103,21,84],[45,104,21,85],[46,8,22,6,"AsyncStorage"],[46,20,22,18],[46,23,22,21,"AsyncStorageModule"],[46,41,22,39],[46,42,22,40,"default"],[46,49,22,47],[46,53,22,51,"AsyncStorageModule"],[46,71,22,69],[47,8,23,6],[47,15,23,13,"AsyncStorage"],[47,27,23,25],[48,6,24,4],[49,4,25,2],[49,5,25,3],[49,6,25,4],[49,13,25,11,"error"],[49,18,25,16],[49,20,25,18],[50,6,26,4],[51,6,27,4,"console"],[51,13,27,11],[51,14,27,12,"log"],[51,17,27,15],[51,18,27,16],[51,47,27,45],[51,49,27,47,"error"],[51,54,27,52],[51,55,27,53,"message"],[51,62,27,60],[51,63,27,61],[52,4,28,2],[53,4,30,2],[53,11,30,9],[53,15,30,13],[54,2,31,0],[54,3,31,1],[55,2,61,0],[56,2,62,0],[56,6,62,6,"calculateLevelUpPoints"],[56,28,62,28],[56,31,62,32,"level"],[56,36,62,45],[56,40,62,58],[57,4,63,2],[57,11,63,9,"Math"],[57,15,63,13],[57,16,63,14,"floor"],[57,21,63,19],[57,22,63,20],[57,25,63,23],[57,28,63,26,"Math"],[57,32,63,30],[57,33,63,31,"pow"],[57,36,63,34],[57,37,63,35],[57,40,63,38],[57,42,63,40,"level"],[57,47,63,45],[57,50,63,48],[57,51,63,49],[57,52,63,50],[57,53,63,51],[58,2,64,0],[58,3,64,1],[60,2,66,0],[61,2,67,0],[61,6,67,6,"generateLevelThresholds"],[61,29,67,29],[61,32,67,32,"generateLevelThresholds"],[61,33,67,32],[61,38,67,48],[62,4,68,2],[62,8,68,8,"thresholds"],[62,18,68,18],[62,21,68,21],[62,22,68,22],[62,23,68,23],[62,24,68,24],[62,25,68,25],[62,26,68,26],[63,4,69,2],[63,9,69,7],[63,13,69,11,"i"],[63,14,69,12],[63,17,69,15],[63,18,69,16],[63,20,69,18,"i"],[63,21,69,19],[63,25,69,23],[63,27,69,25],[63,29,69,27,"i"],[63,30,69,28],[63,32,69,30],[63,34,69,32],[64,6,70,4,"thresholds"],[64,16,70,14],[64,17,70,15,"push"],[64,21,70,19],[64,22,70,20,"thresholds"],[64,32,70,30],[64,33,70,31,"i"],[64,34,70,32],[64,37,70,35],[64,38,70,36],[64,39,70,37],[64,42,70,40,"calculateLevelUpPoints"],[64,64,70,62],[64,65,70,63,"i"],[64,66,70,64],[64,67,70,65],[64,68,70,66],[65,4,71,2],[66,4,72,2],[66,11,72,9,"thresholds"],[66,21,72,19],[67,2,73,0],[67,3,73,1],[68,2,75,0],[68,6,75,6,"LEVEL_THRESHOLDS"],[68,22,75,22],[68,25,75,25,"generateLevelThresholds"],[68,48,75,48],[68,49,75,49],[68,50,75,50],[69,2,76,0],[69,6,76,6,"STORAGE_KEY"],[69,17,76,17],[69,20,76,20],[69,41,76,41],[71,2,78,0],[72,2,79,7],[72,6,79,13,"AVAILABLE_BADGES"],[72,22,79,29],[72,25,79,32],[73,4,80,2,"FIRST_TASK"],[73,14,80,12],[73,16,80,14],[73,28,80,26],[74,4,81,2,"WEEK_WARRIOR"],[74,16,81,14],[74,18,81,16],[74,32,81,30],[75,4,81,32],[76,4,82,2,"MONTH_MASTER"],[76,16,82,14],[76,18,82,16],[76,32,82,30],[77,4,82,32],[78,4,83,2,"HUNDRED_CLUB"],[78,16,83,14],[78,18,83,16],[78,32,83,30],[79,4,83,32],[80,4,84,2,"ROMANCE_EXPERT"],[80,18,84,16],[80,20,84,18],[80,36,84,34],[81,4,84,36],[82,4,85,2,"LOVE_GURU"],[82,13,85,11],[82,15,85,13],[82,26,85,24],[83,4,85,26],[84,4,86,2,"RELATIONSHIP_CHAMPION"],[84,25,86,23],[84,27,86,25],[84,50,86,48],[85,4,86,50],[86,4,87,2,"STREAK_LEGEND"],[86,17,87,15],[86,19,87,17],[86,34,87,32],[87,4,87,34],[88,4,88,2,"POINTS_MASTER"],[88,17,88,15],[88,19,88,17],[88,34,88,32],[89,4,88,34],[90,4,89,2,"DEDICATION_AWARD"],[90,20,89,18],[90,22,89,20],[90,40,89,38],[90,41,89,40],[91,2,90,0],[91,3,90,1],[92,2,92,0],[92,6,92,6,"useGameStore"],[92,18,92,18],[92,21,92,21],[92,25,92,21,"create"],[92,33,92,27],[92,34,92,27,"create"],[92,40,92,27],[92,42,92,39],[92,43,92,40,"set"],[92,46,92,43],[92,48,92,45,"get"],[92,51,92,48],[92,57,92,54],[93,4,93,2],[94,4,94,2,"totalPoints"],[94,15,94,13],[94,17,94,15],[94,18,94,16],[95,4,95,2,"currentLevel"],[95,16,95,14],[95,18,95,16],[95,19,95,17],[96,4,96,2,"currentStreak"],[96,17,96,15],[96,19,96,17],[96,20,96,18],[97,4,97,2,"longestStreak"],[97,17,97,15],[97,19,97,17],[97,20,97,18],[98,4,98,2,"tasksCompleted"],[98,18,98,16],[98,20,98,18],[98,21,98,19],[99,4,99,2,"badges"],[99,10,99,8],[99,12,99,10],[99,14,99,12],[100,4,100,2,"lastActiveDate"],[100,18,100,16],[100,20,100,18],[100,24,100,22],[101,4,101,2,"levelUpPoints"],[101,17,101,15],[101,19,101,17,"LEVEL_THRESHOLDS"],[101,35,101,33],[102,4,103,2],[103,4,104,2,"loadPersistedData"],[103,21,104,19],[104,6,104,19],[104,10,104,19,"_ref"],[104,14,104,19],[104,21,104,19,"_asyncToGenerator"],[104,38,104,19],[104,39,104,19,"default"],[104,46,104,19],[104,48,104,21],[104,61,104,33],[105,8,105,4],[106,8,106,4],[106,12,106,10,"fallbackState"],[106,25,106,23],[106,28,106,26],[107,10,107,6,"totalPoints"],[107,21,107,17],[107,23,107,19],[107,25,107,21],[108,10,108,6,"currentLevel"],[108,22,108,18],[108,24,108,20],[108,25,108,21],[109,10,109,6,"currentStreak"],[109,23,109,19],[109,25,109,21],[109,26,109,22],[110,10,109,24],[111,10,110,6,"longestStreak"],[111,23,110,19],[111,25,110,21],[111,27,110,23],[112,10,110,25],[113,10,111,6,"tasksCompleted"],[113,24,111,20],[113,26,111,22],[113,27,111,23],[114,10,112,6,"badges"],[114,16,112,12],[114,18,112,14],[114,20,112,16],[115,10,113,6,"lastActiveDate"],[115,24,113,20],[115,26,113,22],[115,30,113,26,"Date"],[115,34,113,30],[115,35,113,31],[115,36,113,32],[115,37,113,33,"toISOString"],[115,48,113,44],[115,49,113,45],[116,8,114,4],[116,9,114,5],[117,8,116,4],[117,12,116,8],[118,10,117,6],[119,10,118,6],[119,14,118,12,"storage"],[119,21,118,19],[119,24,118,22,"getAsyncStorage"],[119,39,118,37],[119,40,118,38],[119,41,118,39],[120,10,119,6],[120,14,119,10],[120,15,119,11,"storage"],[120,22,119,18],[120,24,119,20],[121,12,120,8,"console"],[121,19,120,15],[121,20,120,16,"log"],[121,23,120,19],[121,24,120,20],[121,75,120,71],[121,76,120,72],[122,12,121,8,"set"],[122,15,121,11],[122,16,121,12,"fallbackState"],[122,29,121,25],[122,30,121,26],[123,12,122,8],[124,10,123,6],[125,10,125,6],[125,14,125,12,"stored"],[125,20,125,18],[125,29,125,27,"storage"],[125,36,125,34],[125,37,125,35,"getItem"],[125,44,125,42],[125,45,125,43,"STORAGE_KEY"],[125,56,125,54],[125,57,125,55],[126,10,126,6],[126,14,126,10,"stored"],[126,20,126,16],[126,22,126,18],[127,12,127,8],[127,16,127,14,"data"],[127,20,127,18],[127,23,127,21,"JSON"],[127,27,127,25],[127,28,127,26,"parse"],[127,33,127,31],[127,34,127,32,"stored"],[127,40,127,38],[127,41,127,39],[128,12,128,8,"set"],[128,15,128,11],[128,16,128,12],[129,14,129,10,"totalPoints"],[129,25,129,21],[129,27,129,23,"data"],[129,31,129,27],[129,32,129,28,"totalPoints"],[129,43,129,39],[129,47,129,43],[129,48,129,44],[130,14,130,10,"currentLevel"],[130,26,130,22],[130,28,130,24,"data"],[130,32,130,28],[130,33,130,29,"currentLevel"],[130,45,130,41],[130,49,130,45],[130,50,130,46],[131,14,131,10,"currentStreak"],[131,27,131,23],[131,29,131,25,"data"],[131,33,131,29],[131,34,131,30,"currentStreak"],[131,47,131,43],[131,51,131,47],[131,52,131,48],[132,14,132,10,"longestStreak"],[132,27,132,23],[132,29,132,25,"data"],[132,33,132,29],[132,34,132,30,"longestStreak"],[132,47,132,43],[132,51,132,47],[132,52,132,48],[133,14,133,10,"tasksCompleted"],[133,28,133,24],[133,30,133,26,"data"],[133,34,133,30],[133,35,133,31,"tasksCompleted"],[133,49,133,45],[133,53,133,49],[133,54,133,50],[134,14,134,10,"badges"],[134,20,134,16],[134,22,134,18,"data"],[134,26,134,22],[134,27,134,23,"badges"],[134,33,134,29],[134,37,134,33],[134,39,134,35],[135,14,135,10,"lastActiveDate"],[135,28,135,24],[135,30,135,26,"data"],[135,34,135,30],[135,35,135,31,"lastActiveDate"],[135,49,135,45],[135,53,135,49],[136,12,136,8],[136,13,136,9],[136,14,136,10],[138,12,138,8],[139,12,139,8],[139,16,139,12,"data"],[139,20,139,16],[139,21,139,17,"lastActiveDate"],[139,35,139,31],[139,37,139,33],[140,14,140,10],[140,18,140,16,"lastDate"],[140,26,140,24],[140,29,140,27],[140,33,140,31,"Date"],[140,37,140,35],[140,38,140,36,"data"],[140,42,140,40],[140,43,140,41,"lastActiveDate"],[140,57,140,55],[140,58,140,56],[141,14,141,10],[141,18,141,16,"today"],[141,23,141,21],[141,26,141,24],[141,30,141,28,"Date"],[141,34,141,32],[141,35,141,33],[141,36,141,34],[142,14,142,10],[142,18,142,16,"diffTime"],[142,26,142,24],[142,29,142,27,"today"],[142,34,142,32],[142,35,142,33,"getTime"],[142,42,142,40],[142,43,142,41],[142,44,142,42],[142,47,142,45,"lastDate"],[142,55,142,53],[142,56,142,54,"getTime"],[142,63,142,61],[142,64,142,62],[142,65,142,63],[143,14,143,10],[143,18,143,16,"diffDays"],[143,26,143,24],[143,29,143,27,"Math"],[143,33,143,31],[143,34,143,32,"floor"],[143,39,143,37],[143,40,143,38,"diffTime"],[143,48,143,46],[143,52,143,50],[143,56,143,54],[143,59,143,57],[143,61,143,59],[143,64,143,62],[143,66,143,64],[143,69,143,67],[143,71,143,69],[143,72,143,70],[143,73,143,71],[145,14,145,10],[146,14,146,10],[146,18,146,14,"diffDays"],[146,26,146,22],[146,29,146,25],[146,30,146,26],[146,32,146,28],[147,16,147,12],[147,22,147,18,"get"],[147,25,147,21],[147,26,147,22],[147,27,147,23],[147,28,147,24,"breakStreak"],[147,39,147,35],[147,40,147,36],[147,41,147,37],[148,14,148,10],[149,12,149,8],[150,10,150,6],[150,11,150,7],[150,17,150,13],[151,12,151,8],[152,12,152,8,"console"],[152,19,152,15],[152,20,152,16,"log"],[152,23,152,19],[152,24,152,20],[152,73,152,69],[152,74,152,70],[153,12,153,8,"set"],[153,15,153,11],[153,16,153,12,"fallbackState"],[153,29,153,25],[153,30,153,26],[154,10,154,6],[155,8,155,4],[155,9,155,5],[155,10,155,6],[155,17,155,13,"error"],[155,22,155,18],[155,24,155,20],[156,10,156,6,"console"],[156,17,156,13],[156,18,156,14,"error"],[156,23,156,19],[156,24,156,20],[156,51,156,47],[156,53,156,49,"error"],[156,58,156,54],[156,59,156,55],[157,10,157,6],[158,10,158,6,"set"],[158,13,158,9],[158,14,158,10,"fallbackState"],[158,27,158,23],[158,28,158,24],[159,8,159,4],[160,6,160,2],[160,7,160,3],[161,6,160,3],[161,22,104,2,"loadPersistedData"],[161,39,104,19,"loadPersistedData"],[161,40,104,19],[162,8,104,19],[162,15,104,19,"_ref"],[162,19,104,19],[162,20,104,19,"apply"],[162,25,104,19],[162,32,104,19,"arguments"],[162,41,104,19],[163,6,104,19],[164,4,104,19],[164,7,160,3],[165,4,162,2],[166,4,163,2,"persistData"],[166,15,163,13],[167,6,163,13],[167,10,163,13,"_ref2"],[167,15,163,13],[167,22,163,13,"_asyncToGenerator"],[167,39,163,13],[167,40,163,13,"default"],[167,47,163,13],[167,49,163,15],[167,60,163,22,"updatedState"],[167,72,163,54],[167,74,163,59],[168,8,164,4],[168,12,164,8],[169,10,165,6],[170,10,166,6],[170,14,166,12,"storage"],[170,21,166,19],[170,24,166,22,"getAsyncStorage"],[170,39,166,37],[170,40,166,38],[170,41,166,39],[171,10,167,6],[171,14,167,10],[171,15,167,11,"storage"],[171,22,167,18],[171,24,167,20],[172,12,168,8,"console"],[172,19,168,15],[172,20,168,16,"log"],[172,23,168,19],[172,24,168,20],[172,79,168,75],[172,80,168,76],[173,12,169,8],[174,10,170,6],[175,10,172,6],[175,14,172,12,"currentState"],[175,26,172,24],[175,29,172,27,"get"],[175,32,172,30],[175,33,172,31],[175,34,172,32],[176,10,173,6],[176,14,173,12,"dataToStore"],[176,25,173,23],[176,28,173,26],[177,12,174,8,"totalPoints"],[177,23,174,19],[177,25,174,21,"updatedState"],[177,37,174,33],[177,38,174,34,"totalPoints"],[177,49,174,45],[177,53,174,49,"currentState"],[177,65,174,61],[177,66,174,62,"totalPoints"],[177,77,174,73],[178,12,175,8,"currentLevel"],[178,24,175,20],[178,26,175,22,"updatedState"],[178,38,175,34],[178,39,175,35,"currentLevel"],[178,51,175,47],[178,55,175,51,"currentState"],[178,67,175,63],[178,68,175,64,"currentLevel"],[178,80,175,76],[179,12,176,8,"currentStreak"],[179,25,176,21],[179,27,176,23,"updatedState"],[179,39,176,35],[179,40,176,36,"currentStreak"],[179,53,176,49],[179,57,176,53,"currentState"],[179,69,176,65],[179,70,176,66,"currentStreak"],[179,83,176,79],[180,12,177,8,"longestStreak"],[180,25,177,21],[180,27,177,23,"updatedState"],[180,39,177,35],[180,40,177,36,"longestStreak"],[180,53,177,49],[180,57,177,53,"currentState"],[180,69,177,65],[180,70,177,66,"longestStreak"],[180,83,177,79],[181,12,178,8,"tasksCompleted"],[181,26,178,22],[181,28,178,24,"updatedState"],[181,40,178,36],[181,41,178,37,"tasksCompleted"],[181,55,178,51],[181,59,178,55,"currentState"],[181,71,178,67],[181,72,178,68,"tasksCompleted"],[181,86,178,82],[182,12,179,8,"badges"],[182,18,179,14],[182,20,179,16,"updatedState"],[182,32,179,28],[182,33,179,29,"badges"],[182,39,179,35],[182,43,179,39,"currentState"],[182,55,179,51],[182,56,179,52,"badges"],[182,62,179,58],[183,12,180,8,"lastActiveDate"],[183,26,180,22],[183,28,180,24,"updatedState"],[183,40,180,36],[183,41,180,37,"lastActiveDate"],[183,55,180,51],[183,59,180,55,"currentState"],[183,71,180,67],[183,72,180,68,"lastActiveDate"],[183,86,180,82],[183,90,180,86],[183,94,180,90,"Date"],[183,98,180,94],[183,99,180,95],[183,100,180,96],[183,101,180,97,"toISOString"],[183,112,180,108],[183,113,180,109],[184,10,181,6],[184,11,181,7],[185,10,183,6],[185,16,183,12,"storage"],[185,23,183,19],[185,24,183,20,"setItem"],[185,31,183,27],[185,32,183,28,"STORAGE_KEY"],[185,43,183,39],[185,45,183,41,"JSON"],[185,49,183,45],[185,50,183,46,"stringify"],[185,59,183,55],[185,60,183,56,"dataToStore"],[185,71,183,67],[185,72,183,68],[185,73,183,69],[186,8,184,4],[186,9,184,5],[186,10,184,6],[186,17,184,13,"error"],[186,22,184,18],[186,24,184,20],[187,10,185,6,"console"],[187,17,185,13],[187,18,185,14,"error"],[187,23,185,19],[187,24,185,20],[187,54,185,50],[187,56,185,52,"error"],[187,61,185,57],[187,62,185,58],[188,8,186,4],[189,6,187,2],[189,7,187,3],[190,6,187,3],[190,22,163,2,"persistData"],[190,33,163,13,"persistData"],[190,34,163,13,"_x"],[190,36,163,13],[191,8,163,13],[191,15,163,13,"_ref2"],[191,20,163,13],[191,21,163,13,"apply"],[191,26,163,13],[191,33,163,13,"arguments"],[191,42,163,13],[192,6,163,13],[193,4,163,13],[193,7,187,3],[194,4,189,2],[195,4,190,2,"addExperience"],[195,17,190,15],[196,6,190,15],[196,10,190,15,"_ref3"],[196,15,190,15],[196,22,190,15,"_asyncToGenerator"],[196,39,190,15],[196,40,190,15,"default"],[196,47,190,15],[196,49,190,17],[196,60,190,24,"points"],[196,66,190,38],[196,68,190,43],[197,8,191,4],[197,12,191,10,"state"],[197,17,191,15],[197,20,191,18,"get"],[197,23,191,21],[197,24,191,22],[197,25,191,23],[198,8,192,4],[198,12,192,10,"newPoints"],[198,21,192,19],[198,24,192,22,"state"],[198,29,192,27],[198,30,192,28,"totalPoints"],[198,41,192,39],[198,44,192,42,"points"],[198,50,192,48],[200,8,194,4],[201,8,195,4],[201,12,195,8,"newLevel"],[201,20,195,16],[201,23,195,19,"state"],[201,28,195,24],[201,29,195,25,"currentLevel"],[201,41,195,37],[202,8,196,4],[202,15,196,11,"newLevel"],[202,23,196,19],[202,26,196,22,"LEVEL_THRESHOLDS"],[202,42,196,38],[202,43,196,39,"length"],[202,49,196,45],[202,52,196,48],[202,53,196,49],[202,57,196,53,"newPoints"],[202,66,196,62],[202,70,196,66,"LEVEL_THRESHOLDS"],[202,86,196,82],[202,87,196,83,"newLevel"],[202,95,196,91],[202,96,196,92],[202,98,196,94],[203,10,197,6,"newLevel"],[203,18,197,14],[203,20,197,16],[204,8,198,4],[205,8,200,4],[205,12,200,10,"leveledUp"],[205,21,200,19],[205,24,200,22,"newLevel"],[205,32,200,30],[205,35,200,33,"state"],[205,40,200,38],[205,41,200,39,"currentLevel"],[205,53,200,51],[207,8,202,4],[208,8,203,4],[208,12,203,10,"updatedState"],[208,24,203,22],[208,27,203,25],[209,10,204,6,"totalPoints"],[209,21,204,17],[209,23,204,19,"newPoints"],[209,32,204,28],[210,10,205,6,"currentLevel"],[210,22,205,18],[210,24,205,20,"newLevel"],[211,8,206,4],[211,9,206,5],[212,8,208,4,"set"],[212,11,208,7],[212,12,208,8,"updatedState"],[212,24,208,20],[212,25,208,21],[214,8,210,4],[215,8,211,4],[215,14,211,11,"get"],[215,17,211,14],[215,18,211,15],[215,19,211,16],[215,20,211,25,"persistData"],[215,31,211,36],[215,32,211,37,"updatedState"],[215,44,211,49],[215,45,211,50],[217,8,213,4],[218,8,214,4],[218,12,214,8,"leveledUp"],[218,21,214,17],[218,23,214,19],[219,10,215,6],[219,16,215,12],[219,20,215,12,"levelUp"],[219,40,215,19],[219,41,215,19,"levelUp"],[219,48,215,19],[219,50,215,20],[219,51,215,21],[221,10,217,6],[222,10,218,6],[222,14,218,10,"newLevel"],[222,22,218,18],[222,27,218,23],[222,28,218,24],[222,30,218,26],[223,12,219,8],[223,18,219,14,"get"],[223,21,219,17],[223,22,219,18],[223,23,219,19],[223,24,219,20,"addBadge"],[223,32,219,28],[223,33,219,29,"AVAILABLE_BADGES"],[223,49,219,45],[223,50,219,46,"ROMANCE_EXPERT"],[223,64,219,60],[223,65,219,61],[224,10,220,6],[224,11,220,7],[224,17,220,13],[224,21,220,17,"newLevel"],[224,29,220,25],[224,34,220,30],[224,36,220,32],[224,38,220,34],[225,12,221,8],[225,18,221,14,"get"],[225,21,221,17],[225,22,221,18],[225,23,221,19],[225,24,221,20,"addBadge"],[225,32,221,28],[225,33,221,29,"AVAILABLE_BADGES"],[225,49,221,45],[225,50,221,46,"LOVE_GURU"],[225,59,221,55],[225,60,221,56],[226,10,222,6],[226,11,222,7],[226,17,222,13],[226,21,222,17,"newLevel"],[226,29,222,25],[226,34,222,30],[226,36,222,32],[226,38,222,34],[227,12,223,8],[227,18,223,14,"get"],[227,21,223,17],[227,22,223,18],[227,23,223,19],[227,24,223,20,"addBadge"],[227,32,223,28],[227,33,223,29,"AVAILABLE_BADGES"],[227,49,223,45],[227,50,223,46,"RELATIONSHIP_CHAMPION"],[227,71,223,67],[227,72,223,68],[228,10,224,6],[229,8,225,4],[231,8,227,4],[232,8,228,4],[232,12,228,8,"newPoints"],[232,21,228,17],[232,25,228,21],[232,29,228,25],[232,33,228,29],[232,34,228,30,"state"],[232,39,228,35],[232,40,228,36,"badges"],[232,46,228,42],[232,47,228,43,"includes"],[232,55,228,51],[232,56,228,52,"AVAILABLE_BADGES"],[232,72,228,68],[232,73,228,69,"POINTS_MASTER"],[232,86,228,82],[232,87,228,83],[232,89,228,85],[233,10,229,6],[233,16,229,12,"get"],[233,19,229,15],[233,20,229,16],[233,21,229,17],[233,22,229,18,"addBadge"],[233,30,229,26],[233,31,229,27,"AVAILABLE_BADGES"],[233,47,229,43],[233,48,229,44,"POINTS_MASTER"],[233,61,229,57],[233,62,229,58],[234,8,230,4],[235,6,231,2],[235,7,231,3],[236,6,231,3],[236,22,190,2,"addExperience"],[236,35,190,15,"addExperience"],[236,36,190,15,"_x2"],[236,39,190,15],[237,8,190,15],[237,15,190,15,"_ref3"],[237,20,190,15],[237,21,190,15,"apply"],[237,26,190,15],[237,33,190,15,"arguments"],[237,42,190,15],[238,6,190,15],[239,4,190,15],[239,7,231,3],[240,4,233,2],[241,4,234,2,"completeTask"],[241,16,234,14],[242,6,234,14],[242,10,234,14,"_ref4"],[242,15,234,14],[242,22,234,14,"_asyncToGenerator"],[242,39,234,14],[242,40,234,14,"default"],[242,47,234,14],[242,49,234,16],[242,60,234,23,"taskPoints"],[242,70,234,41],[242,72,234,46],[243,8,235,4],[243,12,235,10,"state"],[243,17,235,15],[243,20,235,18,"get"],[243,23,235,21],[243,24,235,22],[243,25,235,23],[244,8,236,4],[244,12,236,10,"newTasksCompleted"],[244,29,236,27],[244,32,236,30,"state"],[244,37,236,35],[244,38,236,36,"tasksCompleted"],[244,52,236,50],[244,55,236,53],[244,56,236,54],[246,8,238,4],[247,8,239,4],[247,12,239,10,"updatedState"],[247,24,239,22],[247,27,239,25],[248,10,240,6,"tasksCompleted"],[248,24,240,20],[248,26,240,22,"newTasksCompleted"],[249,8,241,4],[249,9,241,5],[250,8,243,4,"set"],[250,11,243,7],[250,12,243,8,"updatedState"],[250,24,243,20],[250,25,243,21],[252,8,245,4],[253,8,246,4],[253,14,246,10,"get"],[253,17,246,13],[253,18,246,14],[253,19,246,15],[253,20,246,16,"addExperience"],[253,33,246,29],[253,34,246,30,"taskPoints"],[253,44,246,40],[253,45,246,41],[255,8,248,4],[256,8,249,4],[256,14,249,10,"get"],[256,17,249,13],[256,18,249,14],[256,19,249,15],[256,20,249,16,"updateStreak"],[256,32,249,28],[256,33,249,29],[256,34,249,30],[258,8,251,4],[259,8,252,4],[259,14,252,11,"get"],[259,17,252,14],[259,18,252,15],[259,19,252,16],[259,20,252,25,"persistData"],[259,31,252,36],[259,32,252,37,"updatedState"],[259,44,252,49],[259,45,252,50],[261,8,254,4],[262,8,255,4],[262,14,255,10],[262,18,255,10,"taskComplete"],[262,38,255,22],[262,39,255,22,"taskComplete"],[262,51,255,22],[262,53,255,23],[262,54,255,24],[264,8,257,4],[265,8,258,4],[265,12,258,8,"newTasksCompleted"],[265,29,258,25],[265,34,258,30],[265,35,258,31],[265,37,258,33],[266,10,259,6],[266,16,259,12,"get"],[266,19,259,15],[266,20,259,16],[266,21,259,17],[266,22,259,18,"addBadge"],[266,30,259,26],[266,31,259,27,"AVAILABLE_BADGES"],[266,47,259,43],[266,48,259,44,"FIRST_TASK"],[266,58,259,54],[266,59,259,55],[267,8,260,4],[267,9,260,5],[267,15,260,11],[267,19,260,15,"newTasksCompleted"],[267,36,260,32],[267,41,260,37],[267,44,260,40],[267,46,260,42],[268,10,261,6],[268,16,261,12,"get"],[268,19,261,15],[268,20,261,16],[268,21,261,17],[268,22,261,18,"addBadge"],[268,30,261,26],[268,31,261,27,"AVAILABLE_BADGES"],[268,47,261,43],[268,48,261,44,"HUNDRED_CLUB"],[268,60,261,56],[268,61,261,57],[269,8,262,4],[270,6,263,2],[270,7,263,3],[271,6,263,3],[271,22,234,2,"completeTask"],[271,34,234,14,"completeTask"],[271,35,234,14,"_x3"],[271,38,234,14],[272,8,234,14],[272,15,234,14,"_ref4"],[272,20,234,14],[272,21,234,14,"apply"],[272,26,234,14],[272,33,234,14,"arguments"],[272,42,234,14],[273,6,234,14],[274,4,234,14],[274,7,263,3],[275,4,265,2],[276,4,266,2,"updateStreak"],[276,16,266,14],[277,6,266,14],[277,10,266,14,"_ref5"],[277,15,266,14],[277,22,266,14,"_asyncToGenerator"],[277,39,266,14],[277,40,266,14,"default"],[277,47,266,14],[277,49,266,16],[277,62,266,28],[278,8,267,4],[278,12,267,10,"state"],[278,17,267,15],[278,20,267,18,"get"],[278,23,267,21],[278,24,267,22],[278,25,267,23],[279,8,268,4],[279,12,268,10,"today"],[279,17,268,15],[279,20,268,18],[279,24,268,22,"Date"],[279,28,268,26],[279,29,268,27],[279,30,268,28],[280,8,269,4],[280,12,269,10,"todayString"],[280,23,269,21],[280,26,269,24,"today"],[280,31,269,29],[280,32,269,30,"toDateString"],[280,44,269,42],[280,45,269,43],[280,46,269,44],[282,8,271,4],[283,8,272,4],[283,12,272,8],[283,13,272,9,"state"],[283,18,272,14],[283,19,272,15,"lastActiveDate"],[283,33,272,29],[283,35,272,31],[284,10,273,6],[284,14,273,12,"updatedState"],[284,27,273,24],[284,30,273,27],[285,12,274,8,"currentStreak"],[285,25,274,21],[285,27,274,23],[285,28,274,24],[286,12,275,8,"longestStreak"],[286,25,275,21],[286,27,275,23,"Math"],[286,31,275,27],[286,32,275,28,"max"],[286,35,275,31],[286,36,275,32],[286,37,275,33],[286,39,275,35,"state"],[286,44,275,40],[286,45,275,41,"longestStreak"],[286,58,275,54],[286,59,275,55],[287,12,276,8,"lastActiveDate"],[287,26,276,22],[287,28,276,24,"today"],[287,33,276,29],[287,34,276,30,"toISOString"],[287,45,276,41],[287,46,276,42],[288,10,277,6],[288,11,277,7],[289,10,279,6,"set"],[289,13,279,9],[289,14,279,10,"updatedState"],[289,27,279,22],[289,28,279,23],[290,10,280,6],[290,16,280,13,"get"],[290,19,280,16],[290,20,280,17],[290,21,280,18],[290,22,280,27,"persistData"],[290,33,280,38],[290,34,280,39,"updatedState"],[290,47,280,51],[290,48,280,52],[292,10,282,6],[293,10,283,6],[293,14,283,10,"state"],[293,19,283,15],[293,20,283,16,"currentStreak"],[293,33,283,29],[293,38,283,34],[293,39,283,35],[293,41,283,37],[294,12,284,8],[294,18,284,14,"get"],[294,21,284,17],[294,22,284,18],[294,23,284,19],[294,24,284,20,"addBadge"],[294,32,284,28],[294,33,284,29,"AVAILABLE_BADGES"],[294,49,284,45],[294,50,284,46,"FIRST_TASK"],[294,60,284,56],[294,61,284,57],[295,10,285,6],[296,10,286,6],[297,8,287,4],[298,8,289,4],[298,12,289,10,"lastActiveDate"],[298,26,289,24],[298,29,289,27],[298,33,289,31,"Date"],[298,37,289,35],[298,38,289,36,"state"],[298,43,289,41],[298,44,289,42,"lastActiveDate"],[298,58,289,56],[298,59,289,57],[299,8,290,4],[299,12,290,10,"lastActiveDateString"],[299,32,290,30],[299,35,290,33,"lastActiveDate"],[299,49,290,47],[299,50,290,48,"toDateString"],[299,62,290,60],[299,63,290,61],[299,64,290,62],[301,8,292,4],[302,8,293,4],[302,12,293,8,"lastActiveDateString"],[302,32,293,28],[302,37,293,33,"todayString"],[302,48,293,44],[302,50,293,46],[303,10,294,6],[304,8,295,4],[306,8,297,4],[307,8,298,4],[307,12,298,10,"diffTime"],[307,20,298,18],[307,23,298,21,"today"],[307,28,298,26],[307,29,298,27,"getTime"],[307,36,298,34],[307,37,298,35],[307,38,298,36],[307,41,298,39,"lastActiveDate"],[307,55,298,53],[307,56,298,54,"getTime"],[307,63,298,61],[307,64,298,62],[307,65,298,63],[308,8,299,4],[308,12,299,10,"diffDays"],[308,20,299,18],[308,23,299,21,"Math"],[308,27,299,25],[308,28,299,26,"floor"],[308,33,299,31],[308,34,299,32,"diffTime"],[308,42,299,40],[308,46,299,44],[308,50,299,48],[308,53,299,51],[308,55,299,53],[308,58,299,56],[308,60,299,58],[308,63,299,61],[308,65,299,63],[308,66,299,64],[308,67,299,65],[309,8,301,4],[309,12,301,8,"newStreak"],[309,21,301,17],[310,8,302,4],[310,12,302,8,"newLongestStreak"],[310,28,302,24],[311,8,304,4],[311,12,304,8,"diffDays"],[311,20,304,16],[311,25,304,21],[311,26,304,22],[311,28,304,24],[312,10,305,6],[313,10,306,6,"newStreak"],[313,19,306,15],[313,22,306,18,"state"],[313,27,306,23],[313,28,306,24,"currentStreak"],[313,41,306,37],[313,44,306,40],[313,45,306,41],[314,10,307,6,"newLongestStreak"],[314,26,307,22],[314,29,307,25,"Math"],[314,33,307,29],[314,34,307,30,"max"],[314,37,307,33],[314,38,307,34,"newStreak"],[314,47,307,43],[314,49,307,45,"state"],[314,54,307,50],[314,55,307,51,"longestStreak"],[314,68,307,64],[314,69,307,65],[315,8,308,4],[315,9,308,5],[315,15,308,11],[315,19,308,15,"diffDays"],[315,27,308,23],[315,30,308,26],[315,31,308,27],[315,33,308,29],[316,10,309,6],[317,10,310,6,"newStreak"],[317,19,310,15],[317,22,310,18],[317,23,310,19],[318,10,311,6,"newLongestStreak"],[318,26,311,22],[318,29,311,25,"state"],[318,34,311,30],[318,35,311,31,"longestStreak"],[318,48,311,44],[318,49,311,45],[318,50,311,46],[319,8,312,4],[319,9,312,5],[319,15,312,11],[320,10,313,6],[321,10,314,6],[322,8,315,4],[323,8,317,4],[323,12,317,10,"updatedState"],[323,24,317,22],[323,27,317,25],[324,10,318,6,"currentStreak"],[324,23,318,19],[324,25,318,21,"newStreak"],[324,34,318,30],[325,10,319,6,"longestStreak"],[325,23,319,19],[325,25,319,21,"newLongestStreak"],[325,41,319,37],[326,10,320,6,"lastActiveDate"],[326,24,320,20],[326,26,320,22,"today"],[326,31,320,27],[326,32,320,28,"toISOString"],[326,43,320,39],[326,44,320,40],[327,8,321,4],[327,9,321,5],[328,8,323,4,"set"],[328,11,323,7],[328,12,323,8,"updatedState"],[328,24,323,20],[328,25,323,21],[330,8,325,4],[331,8,326,4],[331,14,326,11,"get"],[331,17,326,14],[331,18,326,15],[331,19,326,16],[331,20,326,25,"persistData"],[331,31,326,36],[331,32,326,37,"updatedState"],[331,44,326,49],[331,45,326,50],[333,8,328,4],[334,8,329,4],[334,12,329,8,"newStreak"],[334,21,329,17],[334,26,329,22],[334,27,329,23],[334,29,329,25],[335,10,330,6],[335,16,330,12,"get"],[335,19,330,15],[335,20,330,16],[335,21,330,17],[335,22,330,18,"addBadge"],[335,30,330,26],[335,31,330,27,"AVAILABLE_BADGES"],[335,47,330,43],[335,48,330,44,"WEEK_WARRIOR"],[335,60,330,56],[335,61,330,57],[336,8,331,4],[336,9,331,5],[336,15,331,11],[336,19,331,15,"newStreak"],[336,28,331,24],[336,33,331,29],[336,35,331,31],[336,37,331,33],[337,10,332,6],[337,16,332,12,"get"],[337,19,332,15],[337,20,332,16],[337,21,332,17],[337,22,332,18,"addBadge"],[337,30,332,26],[337,31,332,27,"AVAILABLE_BADGES"],[337,47,332,43],[337,48,332,44,"MONTH_MASTER"],[337,60,332,56],[337,61,332,57],[338,8,333,4],[338,9,333,5],[338,15,333,11],[338,19,333,15,"newStreak"],[338,28,333,24],[338,33,333,29],[338,35,333,31],[338,37,333,33],[339,10,334,6],[339,16,334,12,"get"],[339,19,334,15],[339,20,334,16],[339,21,334,17],[339,22,334,18,"addBadge"],[339,30,334,26],[339,31,334,27,"AVAILABLE_BADGES"],[339,47,334,43],[339,48,334,44,"STREAK_LEGEND"],[339,61,334,57],[339,62,334,58],[340,8,335,4],[341,6,336,2],[341,7,336,3],[342,6,336,3],[342,22,266,2,"updateStreak"],[342,34,266,14,"updateStreak"],[342,35,266,14],[343,8,266,14],[343,15,266,14,"_ref5"],[343,20,266,14],[343,21,266,14,"apply"],[343,26,266,14],[343,33,266,14,"arguments"],[343,42,266,14],[344,6,266,14],[345,4,266,14],[345,7,336,3],[346,4,338,2],[347,4,339,2,"breakStreak"],[347,15,339,13],[348,6,339,13],[348,10,339,13,"_ref6"],[348,15,339,13],[348,22,339,13,"_asyncToGenerator"],[348,39,339,13],[348,40,339,13,"default"],[348,47,339,13],[348,49,339,15],[348,62,339,27],[349,8,340,4],[349,12,340,10,"updatedState"],[349,24,340,22],[349,27,340,25],[350,10,341,6,"currentStreak"],[350,23,341,19],[350,25,341,21],[351,8,342,4],[351,9,342,5],[352,8,344,4,"set"],[352,11,344,7],[352,12,344,8,"updatedState"],[352,24,344,20],[352,25,344,21],[353,8,345,4],[353,14,345,11,"get"],[353,17,345,14],[353,18,345,15],[353,19,345,16],[353,20,345,25,"persistData"],[353,31,345,36],[353,32,345,37,"updatedState"],[353,44,345,49],[353,45,345,50],[354,6,346,2],[354,7,346,3],[355,6,346,3],[355,22,339,2,"breakStreak"],[355,33,339,13,"breakStreak"],[355,34,339,13],[356,8,339,13],[356,15,339,13,"_ref6"],[356,20,339,13],[356,21,339,13,"apply"],[356,26,339,13],[356,33,339,13,"arguments"],[356,42,339,13],[357,6,339,13],[358,4,339,13],[358,7,346,3],[359,4,348,2],[360,4,349,2,"addBadge"],[360,12,349,10],[361,6,349,10],[361,10,349,10,"_ref7"],[361,15,349,10],[361,22,349,10,"_asyncToGenerator"],[361,39,349,10],[361,40,349,10,"default"],[361,47,349,10],[361,49,349,12],[361,60,349,19,"badge"],[361,65,349,32],[361,67,349,37],[362,8,350,4],[362,12,350,10,"state"],[362,17,350,15],[362,20,350,18,"get"],[362,23,350,21],[362,24,350,22],[362,25,350,23],[363,8,352,4],[363,12,352,8],[363,13,352,9,"state"],[363,18,352,14],[363,19,352,15,"badges"],[363,25,352,21],[363,26,352,22,"includes"],[363,34,352,30],[363,35,352,31,"badge"],[363,40,352,36],[363,41,352,37],[363,43,352,39],[364,10,353,6],[364,14,353,12,"updatedState"],[364,26,353,24],[364,29,353,27],[365,12,354,8,"badges"],[365,18,354,14],[365,20,354,16],[365,21,354,17],[365,24,354,20,"state"],[365,29,354,25],[365,30,354,26,"badges"],[365,36,354,32],[365,38,354,34,"badge"],[365,43,354,39],[366,10,355,6],[366,11,355,7],[367,10,357,6,"set"],[367,13,357,9],[367,14,357,10,"updatedState"],[367,26,357,22],[367,27,357,23],[368,10,358,6],[368,16,358,13,"get"],[368,19,358,16],[368,20,358,17],[368,21,358,18],[368,22,358,27,"persistData"],[368,33,358,38],[368,34,358,39,"updatedState"],[368,46,358,51],[368,47,358,52],[370,10,360,6],[371,10,361,6],[371,16,361,12],[371,20,361,12,"achievement"],[371,40,361,23],[371,41,361,23,"achievement"],[371,52,361,23],[371,54,361,24],[371,55,361,25],[372,8,362,4],[373,6,363,2],[373,7,363,3],[374,6,363,3],[374,22,349,2,"addBadge"],[374,30,349,10,"addBadge"],[374,31,349,10,"_x4"],[374,34,349,10],[375,8,349,10],[375,15,349,10,"_ref7"],[375,20,349,10],[375,21,349,10,"apply"],[375,26,349,10],[375,33,349,10,"arguments"],[375,42,349,10],[376,6,349,10],[377,4,349,10],[377,7,363,3],[378,4,365,2],[379,4,366,2,"resetProgress"],[379,17,366,15],[380,6,366,15],[380,10,366,15,"_ref8"],[380,15,366,15],[380,22,366,15,"_asyncToGenerator"],[380,39,366,15],[380,40,366,15,"default"],[380,47,366,15],[380,49,366,17],[380,62,366,29],[381,8,367,4],[381,12,367,10,"resetState"],[381,22,367,20],[381,25,367,23],[382,10,368,6,"totalPoints"],[382,21,368,17],[382,23,368,19],[382,24,368,20],[383,10,369,6,"currentLevel"],[383,22,369,18],[383,24,369,20],[383,25,369,21],[384,10,370,6,"currentStreak"],[384,23,370,19],[384,25,370,21],[384,26,370,22],[385,10,371,6,"longestStreak"],[385,23,371,19],[385,25,371,21],[385,26,371,22],[386,10,372,6,"tasksCompleted"],[386,24,372,20],[386,26,372,22],[386,27,372,23],[387,10,373,6,"badges"],[387,16,373,12],[387,18,373,14],[387,20,373,16],[388,10,374,6,"lastActiveDate"],[388,24,374,20],[388,26,374,22],[389,8,375,4],[389,9,375,5],[390,8,377,4,"set"],[390,11,377,7],[390,12,377,8,"resetState"],[390,22,377,18],[390,23,377,19],[392,8,379,4],[393,8,380,4],[393,12,380,8],[394,10,381,6],[395,10,382,6],[395,14,382,12,"storage"],[395,21,382,19],[395,24,382,22,"getAsyncStorage"],[395,39,382,37],[395,40,382,38],[395,41,382,39],[396,10,383,6],[396,14,383,10,"storage"],[396,21,383,17],[396,23,383,19],[397,12,384,8],[397,18,384,14,"storage"],[397,25,384,21],[397,26,384,22,"removeItem"],[397,36,384,32],[397,37,384,33,"STORAGE_KEY"],[397,48,384,44],[397,49,384,45],[398,10,385,6],[398,11,385,7],[398,17,385,13],[399,12,386,8,"console"],[399,19,386,15],[399,20,386,16,"log"],[399,23,386,19],[399,24,386,20],[399,76,386,72],[399,77,386,73],[400,10,387,6],[401,8,388,4],[401,9,388,5],[401,10,388,6],[401,17,388,13,"error"],[401,22,388,18],[401,24,388,20],[402,10,389,6,"console"],[402,17,389,13],[402,18,389,14,"error"],[402,23,389,19],[402,24,389,20],[402,52,389,48],[402,54,389,50,"error"],[402,59,389,55],[402,60,389,56],[403,8,390,4],[404,6,391,2],[404,7,391,3],[405,6,391,3],[405,22,366,2,"resetProgress"],[405,35,366,15,"resetProgress"],[405,36,366,15],[406,8,366,15],[406,15,366,15,"_ref8"],[406,20,366,15],[406,21,366,15,"apply"],[406,26,366,15],[406,33,366,15,"arguments"],[406,42,366,15],[407,6,366,15],[408,4,366,15],[408,7,391,3],[409,4,393,2],[410,4,394,2,"getExperienceForNextLevel"],[410,29,394,27],[410,31,394,29,"getExperienceForNextLevel"],[410,32,394,29],[410,37,394,35],[411,6,395,4],[411,10,395,10,"state"],[411,15,395,15],[411,18,395,18,"get"],[411,21,395,21],[411,22,395,22],[411,23,395,23],[412,6,396,4],[412,10,396,8,"state"],[412,15,396,13],[412,16,396,14,"currentLevel"],[412,28,396,26],[412,32,396,30,"LEVEL_THRESHOLDS"],[412,48,396,46],[412,49,396,47,"length"],[412,55,396,53],[412,58,396,56],[412,59,396,57],[412,61,396,59],[413,8,397,6],[413,15,397,13],[413,16,397,14],[413,17,397,15],[413,18,397,16],[414,6,398,4],[415,6,399,4],[415,13,399,11,"LEVEL_THRESHOLDS"],[415,29,399,27],[415,30,399,28,"state"],[415,35,399,33],[415,36,399,34,"currentLevel"],[415,48,399,46],[415,49,399,47],[415,52,399,50,"state"],[415,57,399,55],[415,58,399,56,"totalPoints"],[415,69,399,67],[416,4,400,2],[416,5,400,3],[417,4,402,2,"getProgressPercentage"],[417,25,402,23],[417,27,402,25,"getProgressPercentage"],[417,28,402,25],[417,33,402,31],[418,6,403,4],[418,10,403,10,"state"],[418,15,403,15],[418,18,403,18,"get"],[418,21,403,21],[418,22,403,22],[418,23,403,23],[419,6,404,4],[419,10,404,8,"state"],[419,15,404,13],[419,16,404,14,"currentLevel"],[419,28,404,26],[419,32,404,30,"LEVEL_THRESHOLDS"],[419,48,404,46],[419,49,404,47,"length"],[419,55,404,53],[419,58,404,56],[419,59,404,57],[419,61,404,59],[420,8,405,6],[420,15,405,13],[420,18,405,16],[420,19,405,17],[420,20,405,18],[421,6,406,4],[422,6,408,4],[422,10,408,10,"currentLevelStart"],[422,27,408,27],[422,30,408,30,"LEVEL_THRESHOLDS"],[422,46,408,46],[422,47,408,47,"state"],[422,52,408,52],[422,53,408,53,"currentLevel"],[422,65,408,65],[422,68,408,68],[422,69,408,69],[422,70,408,70],[423,6,409,4],[423,10,409,10,"nextLevelStart"],[423,24,409,24],[423,27,409,27,"LEVEL_THRESHOLDS"],[423,43,409,43],[423,44,409,44,"state"],[423,49,409,49],[423,50,409,50,"currentLevel"],[423,62,409,62],[423,63,409,63],[424,6,410,4],[424,10,410,10,"currentProgress"],[424,25,410,25],[424,28,410,28,"state"],[424,33,410,33],[424,34,410,34,"totalPoints"],[424,45,410,45],[424,48,410,48,"currentLevelStart"],[424,65,410,65],[425,6,411,4],[425,10,411,10,"totalNeeded"],[425,21,411,21],[425,24,411,24,"nextLevelStart"],[425,38,411,38],[425,41,411,41,"currentLevelStart"],[425,58,411,58],[426,6,413,4],[426,13,413,11,"Math"],[426,17,413,15],[426,18,413,16,"floor"],[426,23,413,21],[426,24,413,23,"currentProgress"],[426,39,413,38],[426,42,413,41,"totalNeeded"],[426,53,413,52],[426,56,413,56],[426,59,413,59],[426,60,413,60],[427,4,414,2],[427,5,414,3],[428,4,416,2,"shouldLevelUp"],[428,17,416,15],[428,19,416,17,"shouldLevelUp"],[428,20,416,17],[428,25,416,23],[429,6,417,4],[429,10,417,10,"state"],[429,15,417,15],[429,18,417,18,"get"],[429,21,417,21],[429,22,417,22],[429,23,417,23],[430,6,418,4],[430,13,418,11,"state"],[430,18,418,16],[430,19,418,17,"currentLevel"],[430,31,418,29],[430,34,418,32,"LEVEL_THRESHOLDS"],[430,50,418,48],[430,51,418,49,"length"],[430,57,418,55],[430,60,418,58],[430,61,418,59],[430,65,419,11,"state"],[430,70,419,16],[430,71,419,17,"totalPoints"],[430,82,419,28],[430,86,419,32,"LEVEL_THRESHOLDS"],[430,102,419,48],[430,103,419,49,"state"],[430,108,419,54],[430,109,419,55,"currentLevel"],[430,121,419,67],[430,122,419,68],[431,4,420,2],[432,2,421,0],[432,3,421,1],[432,4,421,2],[432,5,421,3],[434,2,423,0],[435,0,423,0],[435,3]],"functionMap":{"names":["<global>","getAsyncStorage","calculateLevelUpPoints","generateLevelThresholds","create$argument_0","loadPersistedData","persistData","addExperience","completeTask","updateStreak","breakStreak","addBadge","resetProgress","getExperienceForNextLevel","getProgressPercentage","shouldLevelUp"],"mappings":"AAA;wBCO;CDuB;+BE+B;CFE;gCGG;CHM;uCImB;qBCY;GDwD;eEG;GFwB;iBGG;GHyC;gBIG;GJ6B;gBKG;GLsE;eMG;GNO;YOG;GPc;iBQG;GRyB;6BSG;GTM;yBUE;GVY;iBWE;GXI;EJC"},"hasCjsExports":false},"type":"js/module"}]}