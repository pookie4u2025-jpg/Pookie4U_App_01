{"dependencies":[{"name":"zustand","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":33,"index":33}}],"key":"POPvx7yS3Y3wz+S/9OAefiXNs0Q=","exportNames":["*"],"imports":1}},{"name":"../utils/HapticsManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":34},"end":{"line":2,"column":77,"index":111}}],"key":"nBdnSRqGBBV35N8QrGTTDbqVGgg=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":21,"column":33,"index":719},"end":{"line":21,"column":85,"index":771}}],"key":"lV14QuoELkLKy4kI0aEcfvvcE84=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"AVAILABLE_BADGES\", {\n    enumerable: true,\n    get: function () {\n      return AVAILABLE_BADGES;\n    }\n  });\n  Object.defineProperty(exports, \"useGameStore\", {\n    enumerable: true,\n    get: function () {\n      return useGameStore;\n    }\n  });\n  var _zustand = require(_dependencyMap[0], \"zustand\");\n  var _utilsHapticsManager = require(_dependencyMap[1], \"../utils/HapticsManager\");\n  // Conditional AsyncStorage import to handle web/SSR environments\n  let AsyncStorage = null;\n\n  // Helper function to safely get AsyncStorage\n  const getAsyncStorage = () => {\n    // Always return null during SSR or when window is not available\n    if (true) {\n      return null;\n    }\n\n    // Return cached AsyncStorage if available\n    if (AsyncStorage) return AsyncStorage;\n\n    // Only try to load AsyncStorage in browser environment\n    try {\n      // Check if require is available and we're in the right environment\n      if (typeof require === 'function') {\n        const AsyncStorageModule = require(_dependencyMap[2], \"@react-native-async-storage/async-storage\");\n        AsyncStorage = AsyncStorageModule.default || AsyncStorageModule;\n        return AsyncStorage;\n      }\n    } catch (error) {\n      // Silently fail and return null\n      console.log('AsyncStorage not available:', error.message);\n    }\n    return null;\n  };\n  // Level progression: exponential growth\n  const calculateLevelUpPoints = level => {\n    return Math.floor(100 * Math.pow(1.5, level - 1));\n  };\n\n  // Generate level thresholds up to level 50\n  const generateLevelThresholds = () => {\n    const thresholds = [0]; // Level 1 starts at 0\n    for (let i = 1; i <= 50; i++) {\n      thresholds.push(thresholds[i - 1] + calculateLevelUpPoints(i));\n    }\n    return thresholds;\n  };\n  const LEVEL_THRESHOLDS = generateLevelThresholds();\n  const STORAGE_KEY = '@pookie4u_game_data';\n\n  // Available badges\n  const AVAILABLE_BADGES = {\n    FIRST_TASK: 'first_task',\n    WEEK_WARRIOR: 'week_warrior',\n    // 7-day streak\n    MONTH_MASTER: 'month_master',\n    // 30-day streak\n    HUNDRED_CLUB: 'hundred_club',\n    // 100 tasks\n    ROMANCE_EXPERT: 'romance_expert',\n    // Level 5\n    LOVE_GURU: 'love_guru',\n    // Level 10\n    RELATIONSHIP_CHAMPION: 'relationship_champion',\n    // Level 20\n    STREAK_LEGEND: 'streak_legend',\n    // 50-day streak\n    POINTS_MASTER: 'points_master',\n    // 1000 points\n    DEDICATION_AWARD: 'dedication_award' // 100 days active\n  };\n  const useGameStore = (0, _zustand.create)((set, get) => ({\n    // Initial state\n    totalPoints: 0,\n    currentLevel: 1,\n    currentStreak: 0,\n    longestStreak: 0,\n    tasksCompleted: 0,\n    badges: [],\n    lastActiveDate: null,\n    levelUpPoints: LEVEL_THRESHOLDS,\n    // Load persisted data from AsyncStorage\n    loadPersistedData: async () => {\n      // Always set fallback values first to ensure UI works\n      const fallbackState = {\n        totalPoints: 35,\n        currentLevel: 1,\n        currentStreak: 7,\n        // Test value to verify streak display works\n        longestStreak: 10,\n        // Test value to verify longest streak works\n        tasksCompleted: 5,\n        // Test value to verify tasks completed display works\n        badges: [AVAILABLE_BADGES.FIRST_TASK, AVAILABLE_BADGES.ROMANCE_EXPERT],\n        // Test badges\n        lastActiveDate: new Date().toISOString()\n      };\n      try {\n        // Check if AsyncStorage is available (not on web during SSR)\n        const storage = getAsyncStorage();\n        if (!storage) {\n          console.log('AsyncStorage not available, using fallback values');\n          set(fallbackState);\n          return;\n        }\n        const stored = await storage.getItem(STORAGE_KEY);\n        if (stored) {\n          const data = JSON.parse(stored);\n          set({\n            totalPoints: data.totalPoints || 0,\n            currentLevel: data.currentLevel || 1,\n            currentStreak: data.currentStreak || 0,\n            longestStreak: data.longestStreak || 0,\n            tasksCompleted: data.tasksCompleted || 0,\n            badges: data.badges || [],\n            lastActiveDate: data.lastActiveDate || null\n          });\n\n          // Check if streak needs to be broken due to inactivity\n          if (data.lastActiveDate) {\n            const lastDate = new Date(data.lastActiveDate);\n            const today = new Date();\n            const diffTime = today.getTime() - lastDate.getTime();\n            const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n\n            // If more than 1 day has passed, break the streak\n            if (diffDays > 1) {\n              await get().breakStreak();\n            }\n          }\n        } else {\n          // First time user - set initial test data to verify UI\n          console.log('No stored data found, setting initial test data');\n          set(fallbackState);\n        }\n      } catch (error) {\n        console.error('Failed to load game data:', error);\n        // Always set fallback values on any error\n        set(fallbackState);\n      }\n    },\n    // Persist current state to AsyncStorage\n    persistData: async updatedState => {\n      try {\n        // Check if AsyncStorage is available\n        const storage = getAsyncStorage();\n        if (!storage) {\n          console.log('AsyncStorage not available, skipping data persistence');\n          return;\n        }\n        const currentState = get();\n        const dataToStore = {\n          totalPoints: updatedState.totalPoints ?? currentState.totalPoints,\n          currentLevel: updatedState.currentLevel ?? currentState.currentLevel,\n          currentStreak: updatedState.currentStreak ?? currentState.currentStreak,\n          longestStreak: updatedState.longestStreak ?? currentState.longestStreak,\n          tasksCompleted: updatedState.tasksCompleted ?? currentState.tasksCompleted,\n          badges: updatedState.badges ?? currentState.badges,\n          lastActiveDate: updatedState.lastActiveDate ?? currentState.lastActiveDate ?? new Date().toISOString()\n        };\n        await storage.setItem(STORAGE_KEY, JSON.stringify(dataToStore));\n      } catch (error) {\n        console.error('Failed to persist game data:', error);\n      }\n    },\n    // Add experience points with level progression\n    addExperience: async points => {\n      const state = get();\n      const newPoints = state.totalPoints + points;\n\n      // Calculate new level\n      let newLevel = state.currentLevel;\n      while (newLevel < LEVEL_THRESHOLDS.length - 1 && newPoints >= LEVEL_THRESHOLDS[newLevel]) {\n        newLevel++;\n      }\n      const leveledUp = newLevel > state.currentLevel;\n\n      // Update state\n      const updatedState = {\n        totalPoints: newPoints,\n        currentLevel: newLevel\n      };\n      set(updatedState);\n\n      // Persist immediately\n      await get().persistData(updatedState);\n\n      // Haptic feedback for level up\n      if (leveledUp) {\n        await (0, _utilsHapticsManager.levelUp)();\n\n        // Award level-based badges\n        if (newLevel === 5) {\n          await get().addBadge(AVAILABLE_BADGES.ROMANCE_EXPERT);\n        } else if (newLevel === 10) {\n          await get().addBadge(AVAILABLE_BADGES.LOVE_GURU);\n        } else if (newLevel === 20) {\n          await get().addBadge(AVAILABLE_BADGES.RELATIONSHIP_CHAMPION);\n        }\n      }\n\n      // Check for points-based badges\n      if (newPoints >= 1000 && !state.badges.includes(AVAILABLE_BADGES.POINTS_MASTER)) {\n        await get().addBadge(AVAILABLE_BADGES.POINTS_MASTER);\n      }\n    },\n    // Complete a task (combines points and task completion)\n    completeTask: async taskPoints => {\n      const state = get();\n      const newTasksCompleted = state.tasksCompleted + 1;\n\n      // Update state\n      const updatedState = {\n        tasksCompleted: newTasksCompleted\n      };\n      set(updatedState);\n\n      // Add experience points\n      await get().addExperience(taskPoints);\n\n      // Update streak\n      await get().updateStreak();\n\n      // Persist task completion\n      await get().persistData(updatedState);\n\n      // Task completion haptic feedback\n      await (0, _utilsHapticsManager.taskComplete)();\n\n      // Check for task-based badges\n      if (newTasksCompleted === 1) {\n        await get().addBadge(AVAILABLE_BADGES.FIRST_TASK);\n      } else if (newTasksCompleted === 100) {\n        await get().addBadge(AVAILABLE_BADGES.HUNDRED_CLUB);\n      }\n    },\n    // Update daily streak (Snapchat-style)\n    updateStreak: async () => {\n      const state = get();\n      const today = new Date();\n      const todayString = today.toDateString();\n\n      // If no last active date, this is the first task - start streak at 1\n      if (!state.lastActiveDate) {\n        const updatedState = {\n          currentStreak: 1,\n          longestStreak: Math.max(1, state.longestStreak),\n          lastActiveDate: today.toISOString()\n        };\n        set(updatedState);\n        await get().persistData(updatedState);\n\n        // Check for first task badge\n        if (state.currentStreak === 0) {\n          await get().addBadge(AVAILABLE_BADGES.FIRST_TASK);\n        }\n        return;\n      }\n      const lastActiveDate = new Date(state.lastActiveDate);\n      const lastActiveDateString = lastActiveDate.toDateString();\n\n      // If already updated today, don't update again\n      if (lastActiveDateString === todayString) {\n        return;\n      }\n\n      // Calculate days difference\n      const diffTime = today.getTime() - lastActiveDate.getTime();\n      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n      let newStreak;\n      let newLongestStreak;\n      if (diffDays === 1) {\n        // Consecutive day - increment streak\n        newStreak = state.currentStreak + 1;\n        newLongestStreak = Math.max(newStreak, state.longestStreak);\n      } else if (diffDays > 1) {\n        // Missed day(s) - reset streak to 1 (starting fresh)\n        newStreak = 1;\n        newLongestStreak = state.longestStreak; // Keep longest streak\n      } else {\n        // Same day (shouldn't happen but safety check)\n        return;\n      }\n      const updatedState = {\n        currentStreak: newStreak,\n        longestStreak: newLongestStreak,\n        lastActiveDate: today.toISOString()\n      };\n      set(updatedState);\n\n      // Persist immediately\n      await get().persistData(updatedState);\n\n      // Check for streak-based badges\n      if (newStreak === 7) {\n        await get().addBadge(AVAILABLE_BADGES.WEEK_WARRIOR);\n      } else if (newStreak === 30) {\n        await get().addBadge(AVAILABLE_BADGES.MONTH_MASTER);\n      } else if (newStreak === 50) {\n        await get().addBadge(AVAILABLE_BADGES.STREAK_LEGEND);\n      }\n    },\n    // Break current streak\n    breakStreak: async () => {\n      const updatedState = {\n        currentStreak: 0\n      };\n      set(updatedState);\n      await get().persistData(updatedState);\n    },\n    // Add a new badge\n    addBadge: async badge => {\n      const state = get();\n      if (!state.badges.includes(badge)) {\n        const updatedState = {\n          badges: [...state.badges, badge]\n        };\n        set(updatedState);\n        await get().persistData(updatedState);\n\n        // Achievement haptic feedback\n        await (0, _utilsHapticsManager.achievement)();\n      }\n    },\n    // Reset all progress (for testing or account reset)\n    resetProgress: async () => {\n      const resetState = {\n        totalPoints: 0,\n        currentLevel: 1,\n        currentStreak: 0,\n        longestStreak: 0,\n        tasksCompleted: 0,\n        badges: [],\n        lastActiveDate: null\n      };\n      set(resetState);\n\n      // Clear from storage\n      try {\n        // Check if AsyncStorage is available\n        const storage = getAsyncStorage();\n        if (storage) {\n          await storage.removeItem(STORAGE_KEY);\n        } else {\n          console.log('AsyncStorage not available, skipping data clearing');\n        }\n      } catch (error) {\n        console.error('Failed to clear game data:', error);\n      }\n    },\n    // Computed getters\n    getExperienceForNextLevel: () => {\n      const state = get();\n      if (state.currentLevel >= LEVEL_THRESHOLDS.length - 1) {\n        return 0; // Max level reached\n      }\n      return LEVEL_THRESHOLDS[state.currentLevel] - state.totalPoints;\n    },\n    getProgressPercentage: () => {\n      const state = get();\n      if (state.currentLevel >= LEVEL_THRESHOLDS.length - 1) {\n        return 100; // Max level\n      }\n      const currentLevelStart = LEVEL_THRESHOLDS[state.currentLevel - 1];\n      const nextLevelStart = LEVEL_THRESHOLDS[state.currentLevel];\n      const currentProgress = state.totalPoints - currentLevelStart;\n      const totalNeeded = nextLevelStart - currentLevelStart;\n      return Math.floor(currentProgress / totalNeeded * 100);\n    },\n    shouldLevelUp: () => {\n      const state = get();\n      return state.currentLevel < LEVEL_THRESHOLDS.length - 1 && state.totalPoints >= LEVEL_THRESHOLDS[state.currentLevel];\n    }\n  }));\n\n  // Store will be initialized when first used in components\n});","lineCount":390,"map":[[7,2,79,0,"Object"],[7,8,79,0],[7,9,79,0,"defineProperty"],[7,23,79,0],[7,24,79,0,"exports"],[7,31,79,0],[8,4,79,0,"enumerable"],[8,14,79,0],[9,4,79,0,"get"],[9,7,79,0],[9,18,79,0,"get"],[9,19,79,0],[10,6,79,0],[10,13,79,0,"AVAILABLE_BADGES"],[10,29,79,0],[11,4,79,0],[12,2,79,0],[13,2,425,0,"Object"],[13,8,425,0],[13,9,425,0,"defineProperty"],[13,23,425,0],[13,24,425,0,"exports"],[13,31,425,0],[14,4,425,0,"enumerable"],[14,14,425,0],[15,4,425,0,"get"],[15,7,425,0],[15,18,425,0,"get"],[15,19,425,0],[16,6,425,0],[16,13,425,9,"useGameStore"],[16,25,425,21],[17,4,425,21],[18,2,425,21],[19,2,1,0],[19,6,1,0,"_zustand"],[19,14,1,0],[19,17,1,0,"require"],[19,24,1,0],[19,25,1,0,"_dependencyMap"],[19,39,1,0],[20,2,2,0],[20,6,2,0,"_utilsHapticsManager"],[20,26,2,0],[20,29,2,0,"require"],[20,36,2,0],[20,37,2,0,"_dependencyMap"],[20,51,2,0],[21,2,4,0],[22,2,5,0],[22,6,5,4,"AsyncStorage"],[22,18,5,21],[22,21,5,24],[22,25,5,28],[24,2,7,0],[25,2,8,0],[25,8,8,6,"getAsyncStorage"],[25,23,8,21],[25,26,8,24,"getAsyncStorage"],[25,27,8,24],[25,32,8,30],[26,4,9,2],[27,4,10,2],[27,14,10,37],[28,6,11,4],[28,13,11,11],[28,17,11,15],[29,4,12,2],[31,4,14,2],[32,4,15,2],[32,8,15,6,"AsyncStorage"],[32,20,15,18],[32,22,15,20],[32,29,15,27,"AsyncStorage"],[32,41,15,39],[34,4,17,2],[35,4,18,2],[35,8,18,6],[36,6,19,4],[37,6,20,4],[37,10,20,8],[37,17,20,15,"require"],[37,24,20,22],[37,29,20,27],[37,39,20,37],[37,41,20,39],[38,8,21,6],[38,14,21,12,"AsyncStorageModule"],[38,32,21,30],[38,35,21,33,"require"],[38,42,21,40],[38,43,21,40,"_dependencyMap"],[38,57,21,40],[38,105,21,84],[38,106,21,85],[39,8,22,6,"AsyncStorage"],[39,20,22,18],[39,23,22,21,"AsyncStorageModule"],[39,41,22,39],[39,42,22,40,"default"],[39,49,22,47],[39,53,22,51,"AsyncStorageModule"],[39,71,22,69],[40,8,23,6],[40,15,23,13,"AsyncStorage"],[40,27,23,25],[41,6,24,4],[42,4,25,2],[42,5,25,3],[42,6,25,4],[42,13,25,11,"error"],[42,18,25,16],[42,20,25,18],[43,6,26,4],[44,6,27,4,"console"],[44,13,27,11],[44,14,27,12,"log"],[44,17,27,15],[44,18,27,16],[44,47,27,45],[44,49,27,47,"error"],[44,54,27,52],[44,55,27,53,"message"],[44,62,27,60],[44,63,27,61],[45,4,28,2],[46,4,30,2],[46,11,30,9],[46,15,30,13],[47,2,31,0],[47,3,31,1],[48,2,61,0],[49,2,62,0],[49,8,62,6,"calculateLevelUpPoints"],[49,30,62,28],[49,33,62,32,"level"],[49,38,62,45],[49,42,62,58],[50,4,63,2],[50,11,63,9,"Math"],[50,15,63,13],[50,16,63,14,"floor"],[50,21,63,19],[50,22,63,20],[50,25,63,23],[50,28,63,26,"Math"],[50,32,63,30],[50,33,63,31,"pow"],[50,36,63,34],[50,37,63,35],[50,40,63,38],[50,42,63,40,"level"],[50,47,63,45],[50,50,63,48],[50,51,63,49],[50,52,63,50],[50,53,63,51],[51,2,64,0],[51,3,64,1],[53,2,66,0],[54,2,67,0],[54,8,67,6,"generateLevelThresholds"],[54,31,67,29],[54,34,67,32,"generateLevelThresholds"],[54,35,67,32],[54,40,67,48],[55,4,68,2],[55,10,68,8,"thresholds"],[55,20,68,18],[55,23,68,21],[55,24,68,22],[55,25,68,23],[55,26,68,24],[55,27,68,25],[55,28,68,26],[56,4,69,2],[56,9,69,7],[56,13,69,11,"i"],[56,14,69,12],[56,17,69,15],[56,18,69,16],[56,20,69,18,"i"],[56,21,69,19],[56,25,69,23],[56,27,69,25],[56,29,69,27,"i"],[56,30,69,28],[56,32,69,30],[56,34,69,32],[57,6,70,4,"thresholds"],[57,16,70,14],[57,17,70,15,"push"],[57,21,70,19],[57,22,70,20,"thresholds"],[57,32,70,30],[57,33,70,31,"i"],[57,34,70,32],[57,37,70,35],[57,38,70,36],[57,39,70,37],[57,42,70,40,"calculateLevelUpPoints"],[57,64,70,62],[57,65,70,63,"i"],[57,66,70,64],[57,67,70,65],[57,68,70,66],[58,4,71,2],[59,4,72,2],[59,11,72,9,"thresholds"],[59,21,72,19],[60,2,73,0],[60,3,73,1],[61,2,75,0],[61,8,75,6,"LEVEL_THRESHOLDS"],[61,24,75,22],[61,27,75,25,"generateLevelThresholds"],[61,50,75,48],[61,51,75,49],[61,52,75,50],[62,2,76,0],[62,8,76,6,"STORAGE_KEY"],[62,19,76,17],[62,22,76,20],[62,43,76,41],[64,2,78,0],[65,2,79,7],[65,8,79,13,"AVAILABLE_BADGES"],[65,24,79,29],[65,27,79,32],[66,4,80,2,"FIRST_TASK"],[66,14,80,12],[66,16,80,14],[66,28,80,26],[67,4,81,2,"WEEK_WARRIOR"],[67,16,81,14],[67,18,81,16],[67,32,81,30],[68,4,81,32],[69,4,82,2,"MONTH_MASTER"],[69,16,82,14],[69,18,82,16],[69,32,82,30],[70,4,82,32],[71,4,83,2,"HUNDRED_CLUB"],[71,16,83,14],[71,18,83,16],[71,32,83,30],[72,4,83,32],[73,4,84,2,"ROMANCE_EXPERT"],[73,18,84,16],[73,20,84,18],[73,36,84,34],[74,4,84,36],[75,4,85,2,"LOVE_GURU"],[75,13,85,11],[75,15,85,13],[75,26,85,24],[76,4,85,26],[77,4,86,2,"RELATIONSHIP_CHAMPION"],[77,25,86,23],[77,27,86,25],[77,50,86,48],[78,4,86,50],[79,4,87,2,"STREAK_LEGEND"],[79,17,87,15],[79,19,87,17],[79,34,87,32],[80,4,87,34],[81,4,88,2,"POINTS_MASTER"],[81,17,88,15],[81,19,88,17],[81,34,88,32],[82,4,88,34],[83,4,89,2,"DEDICATION_AWARD"],[83,20,89,18],[83,22,89,20],[83,40,89,38],[83,41,89,40],[84,2,90,0],[84,3,90,1],[85,2,92,0],[85,8,92,6,"useGameStore"],[85,20,92,18],[85,23,92,21],[85,27,92,21,"create"],[85,35,92,27],[85,36,92,27,"create"],[85,42,92,27],[85,44,92,39],[85,45,92,40,"set"],[85,48,92,43],[85,50,92,45,"get"],[85,53,92,48],[85,59,92,54],[86,4,93,2],[87,4,94,2,"totalPoints"],[87,15,94,13],[87,17,94,15],[87,18,94,16],[88,4,95,2,"currentLevel"],[88,16,95,14],[88,18,95,16],[88,19,95,17],[89,4,96,2,"currentStreak"],[89,17,96,15],[89,19,96,17],[89,20,96,18],[90,4,97,2,"longestStreak"],[90,17,97,15],[90,19,97,17],[90,20,97,18],[91,4,98,2,"tasksCompleted"],[91,18,98,16],[91,20,98,18],[91,21,98,19],[92,4,99,2,"badges"],[92,10,99,8],[92,12,99,10],[92,14,99,12],[93,4,100,2,"lastActiveDate"],[93,18,100,16],[93,20,100,18],[93,24,100,22],[94,4,101,2,"levelUpPoints"],[94,17,101,15],[94,19,101,17,"LEVEL_THRESHOLDS"],[94,35,101,33],[95,4,103,2],[96,4,104,2,"loadPersistedData"],[96,21,104,19],[96,23,104,21],[96,29,104,21,"loadPersistedData"],[96,30,104,21],[96,35,104,33],[97,6,105,4],[98,6,106,4],[98,12,106,10,"fallbackState"],[98,25,106,23],[98,28,106,26],[99,8,107,6,"totalPoints"],[99,19,107,17],[99,21,107,19],[99,23,107,21],[100,8,108,6,"currentLevel"],[100,20,108,18],[100,22,108,20],[100,23,108,21],[101,8,109,6,"currentStreak"],[101,21,109,19],[101,23,109,21],[101,24,109,22],[102,8,109,24],[103,8,110,6,"longestStreak"],[103,21,110,19],[103,23,110,21],[103,25,110,23],[104,8,110,25],[105,8,111,6,"tasksCompleted"],[105,22,111,20],[105,24,111,22],[105,25,111,23],[106,8,111,25],[107,8,112,6,"badges"],[107,14,112,12],[107,16,112,14],[107,17,112,15,"AVAILABLE_BADGES"],[107,33,112,31],[107,34,112,32,"FIRST_TASK"],[107,44,112,42],[107,46,112,44,"AVAILABLE_BADGES"],[107,62,112,60],[107,63,112,61,"ROMANCE_EXPERT"],[107,77,112,75],[107,78,112,76],[108,8,112,78],[109,8,113,6,"lastActiveDate"],[109,22,113,20],[109,24,113,22],[109,28,113,26,"Date"],[109,32,113,30],[109,33,113,31],[109,34,113,32],[109,35,113,33,"toISOString"],[109,46,113,44],[109,47,113,45],[110,6,114,4],[110,7,114,5],[111,6,116,4],[111,10,116,8],[112,8,117,6],[113,8,118,6],[113,14,118,12,"storage"],[113,21,118,19],[113,24,118,22,"getAsyncStorage"],[113,39,118,37],[113,40,118,38],[113,41,118,39],[114,8,119,6],[114,12,119,10],[114,13,119,11,"storage"],[114,20,119,18],[114,22,119,20],[115,10,120,8,"console"],[115,17,120,15],[115,18,120,16,"log"],[115,21,120,19],[115,22,120,20],[115,73,120,71],[115,74,120,72],[116,10,121,8,"set"],[116,13,121,11],[116,14,121,12,"fallbackState"],[116,27,121,25],[116,28,121,26],[117,10,122,8],[118,8,123,6],[119,8,125,6],[119,14,125,12,"stored"],[119,20,125,18],[119,23,125,21],[119,29,125,27,"storage"],[119,36,125,34],[119,37,125,35,"getItem"],[119,44,125,42],[119,45,125,43,"STORAGE_KEY"],[119,56,125,54],[119,57,125,55],[120,8,126,6],[120,12,126,10,"stored"],[120,18,126,16],[120,20,126,18],[121,10,127,8],[121,16,127,14,"data"],[121,20,127,18],[121,23,127,21,"JSON"],[121,27,127,25],[121,28,127,26,"parse"],[121,33,127,31],[121,34,127,32,"stored"],[121,40,127,38],[121,41,127,39],[122,10,128,8,"set"],[122,13,128,11],[122,14,128,12],[123,12,129,10,"totalPoints"],[123,23,129,21],[123,25,129,23,"data"],[123,29,129,27],[123,30,129,28,"totalPoints"],[123,41,129,39],[123,45,129,43],[123,46,129,44],[124,12,130,10,"currentLevel"],[124,24,130,22],[124,26,130,24,"data"],[124,30,130,28],[124,31,130,29,"currentLevel"],[124,43,130,41],[124,47,130,45],[124,48,130,46],[125,12,131,10,"currentStreak"],[125,25,131,23],[125,27,131,25,"data"],[125,31,131,29],[125,32,131,30,"currentStreak"],[125,45,131,43],[125,49,131,47],[125,50,131,48],[126,12,132,10,"longestStreak"],[126,25,132,23],[126,27,132,25,"data"],[126,31,132,29],[126,32,132,30,"longestStreak"],[126,45,132,43],[126,49,132,47],[126,50,132,48],[127,12,133,10,"tasksCompleted"],[127,26,133,24],[127,28,133,26,"data"],[127,32,133,30],[127,33,133,31,"tasksCompleted"],[127,47,133,45],[127,51,133,49],[127,52,133,50],[128,12,134,10,"badges"],[128,18,134,16],[128,20,134,18,"data"],[128,24,134,22],[128,25,134,23,"badges"],[128,31,134,29],[128,35,134,33],[128,37,134,35],[129,12,135,10,"lastActiveDate"],[129,26,135,24],[129,28,135,26,"data"],[129,32,135,30],[129,33,135,31,"lastActiveDate"],[129,47,135,45],[129,51,135,49],[130,10,136,8],[130,11,136,9],[130,12,136,10],[132,10,138,8],[133,10,139,8],[133,14,139,12,"data"],[133,18,139,16],[133,19,139,17,"lastActiveDate"],[133,33,139,31],[133,35,139,33],[134,12,140,10],[134,18,140,16,"lastDate"],[134,26,140,24],[134,29,140,27],[134,33,140,31,"Date"],[134,37,140,35],[134,38,140,36,"data"],[134,42,140,40],[134,43,140,41,"lastActiveDate"],[134,57,140,55],[134,58,140,56],[135,12,141,10],[135,18,141,16,"today"],[135,23,141,21],[135,26,141,24],[135,30,141,28,"Date"],[135,34,141,32],[135,35,141,33],[135,36,141,34],[136,12,142,10],[136,18,142,16,"diffTime"],[136,26,142,24],[136,29,142,27,"today"],[136,34,142,32],[136,35,142,33,"getTime"],[136,42,142,40],[136,43,142,41],[136,44,142,42],[136,47,142,45,"lastDate"],[136,55,142,53],[136,56,142,54,"getTime"],[136,63,142,61],[136,64,142,62],[136,65,142,63],[137,12,143,10],[137,18,143,16,"diffDays"],[137,26,143,24],[137,29,143,27,"Math"],[137,33,143,31],[137,34,143,32,"floor"],[137,39,143,37],[137,40,143,38,"diffTime"],[137,48,143,46],[137,52,143,50],[137,56,143,54],[137,59,143,57],[137,61,143,59],[137,64,143,62],[137,66,143,64],[137,69,143,67],[137,71,143,69],[137,72,143,70],[137,73,143,71],[139,12,145,10],[140,12,146,10],[140,16,146,14,"diffDays"],[140,24,146,22],[140,27,146,25],[140,28,146,26],[140,30,146,28],[141,14,147,12],[141,20,147,18,"get"],[141,23,147,21],[141,24,147,22],[141,25,147,23],[141,26,147,24,"breakStreak"],[141,37,147,35],[141,38,147,36],[141,39,147,37],[142,12,148,10],[143,10,149,8],[144,8,150,6],[144,9,150,7],[144,15,150,13],[145,10,151,8],[146,10,152,8,"console"],[146,17,152,15],[146,18,152,16,"log"],[146,21,152,19],[146,22,152,20],[146,71,152,69],[146,72,152,70],[147,10,153,8,"set"],[147,13,153,11],[147,14,153,12,"fallbackState"],[147,27,153,25],[147,28,153,26],[148,8,154,6],[149,6,155,4],[149,7,155,5],[149,8,155,6],[149,15,155,13,"error"],[149,20,155,18],[149,22,155,20],[150,8,156,6,"console"],[150,15,156,13],[150,16,156,14,"error"],[150,21,156,19],[150,22,156,20],[150,49,156,47],[150,51,156,49,"error"],[150,56,156,54],[150,57,156,55],[151,8,157,6],[152,8,158,6,"set"],[152,11,158,9],[152,12,158,10,"fallbackState"],[152,25,158,23],[152,26,158,24],[153,6,159,4],[154,4,160,2],[154,5,160,3],[155,4,162,2],[156,4,163,2,"persistData"],[156,15,163,13],[156,17,163,15],[156,23,163,22,"updatedState"],[156,35,163,54],[156,39,163,59],[157,6,164,4],[157,10,164,8],[158,8,165,6],[159,8,166,6],[159,14,166,12,"storage"],[159,21,166,19],[159,24,166,22,"getAsyncStorage"],[159,39,166,37],[159,40,166,38],[159,41,166,39],[160,8,167,6],[160,12,167,10],[160,13,167,11,"storage"],[160,20,167,18],[160,22,167,20],[161,10,168,8,"console"],[161,17,168,15],[161,18,168,16,"log"],[161,21,168,19],[161,22,168,20],[161,77,168,75],[161,78,168,76],[162,10,169,8],[163,8,170,6],[164,8,172,6],[164,14,172,12,"currentState"],[164,26,172,24],[164,29,172,27,"get"],[164,32,172,30],[164,33,172,31],[164,34,172,32],[165,8,173,6],[165,14,173,12,"dataToStore"],[165,25,173,23],[165,28,173,26],[166,10,174,8,"totalPoints"],[166,21,174,19],[166,23,174,21,"updatedState"],[166,35,174,33],[166,36,174,34,"totalPoints"],[166,47,174,45],[166,51,174,49,"currentState"],[166,63,174,61],[166,64,174,62,"totalPoints"],[166,75,174,73],[167,10,175,8,"currentLevel"],[167,22,175,20],[167,24,175,22,"updatedState"],[167,36,175,34],[167,37,175,35,"currentLevel"],[167,49,175,47],[167,53,175,51,"currentState"],[167,65,175,63],[167,66,175,64,"currentLevel"],[167,78,175,76],[168,10,176,8,"currentStreak"],[168,23,176,21],[168,25,176,23,"updatedState"],[168,37,176,35],[168,38,176,36,"currentStreak"],[168,51,176,49],[168,55,176,53,"currentState"],[168,67,176,65],[168,68,176,66,"currentStreak"],[168,81,176,79],[169,10,177,8,"longestStreak"],[169,23,177,21],[169,25,177,23,"updatedState"],[169,37,177,35],[169,38,177,36,"longestStreak"],[169,51,177,49],[169,55,177,53,"currentState"],[169,67,177,65],[169,68,177,66,"longestStreak"],[169,81,177,79],[170,10,178,8,"tasksCompleted"],[170,24,178,22],[170,26,178,24,"updatedState"],[170,38,178,36],[170,39,178,37,"tasksCompleted"],[170,53,178,51],[170,57,178,55,"currentState"],[170,69,178,67],[170,70,178,68,"tasksCompleted"],[170,84,178,82],[171,10,179,8,"badges"],[171,16,179,14],[171,18,179,16,"updatedState"],[171,30,179,28],[171,31,179,29,"badges"],[171,37,179,35],[171,41,179,39,"currentState"],[171,53,179,51],[171,54,179,52,"badges"],[171,60,179,58],[172,10,180,8,"lastActiveDate"],[172,24,180,22],[172,26,180,24,"updatedState"],[172,38,180,36],[172,39,180,37,"lastActiveDate"],[172,53,180,51],[172,57,180,55,"currentState"],[172,69,180,67],[172,70,180,68,"lastActiveDate"],[172,84,180,82],[172,88,180,86],[172,92,180,90,"Date"],[172,96,180,94],[172,97,180,95],[172,98,180,96],[172,99,180,97,"toISOString"],[172,110,180,108],[172,111,180,109],[173,8,181,6],[173,9,181,7],[174,8,183,6],[174,14,183,12,"storage"],[174,21,183,19],[174,22,183,20,"setItem"],[174,29,183,27],[174,30,183,28,"STORAGE_KEY"],[174,41,183,39],[174,43,183,41,"JSON"],[174,47,183,45],[174,48,183,46,"stringify"],[174,57,183,55],[174,58,183,56,"dataToStore"],[174,69,183,67],[174,70,183,68],[174,71,183,69],[175,6,184,4],[175,7,184,5],[175,8,184,6],[175,15,184,13,"error"],[175,20,184,18],[175,22,184,20],[176,8,185,6,"console"],[176,15,185,13],[176,16,185,14,"error"],[176,21,185,19],[176,22,185,20],[176,52,185,50],[176,54,185,52,"error"],[176,59,185,57],[176,60,185,58],[177,6,186,4],[178,4,187,2],[178,5,187,3],[179,4,189,2],[180,4,190,2,"addExperience"],[180,17,190,15],[180,19,190,17],[180,25,190,24,"points"],[180,31,190,38],[180,35,190,43],[181,6,191,4],[181,12,191,10,"state"],[181,17,191,15],[181,20,191,18,"get"],[181,23,191,21],[181,24,191,22],[181,25,191,23],[182,6,192,4],[182,12,192,10,"newPoints"],[182,21,192,19],[182,24,192,22,"state"],[182,29,192,27],[182,30,192,28,"totalPoints"],[182,41,192,39],[182,44,192,42,"points"],[182,50,192,48],[184,6,194,4],[185,6,195,4],[185,10,195,8,"newLevel"],[185,18,195,16],[185,21,195,19,"state"],[185,26,195,24],[185,27,195,25,"currentLevel"],[185,39,195,37],[186,6,196,4],[186,13,196,11,"newLevel"],[186,21,196,19],[186,24,196,22,"LEVEL_THRESHOLDS"],[186,40,196,38],[186,41,196,39,"length"],[186,47,196,45],[186,50,196,48],[186,51,196,49],[186,55,196,53,"newPoints"],[186,64,196,62],[186,68,196,66,"LEVEL_THRESHOLDS"],[186,84,196,82],[186,85,196,83,"newLevel"],[186,93,196,91],[186,94,196,92],[186,96,196,94],[187,8,197,6,"newLevel"],[187,16,197,14],[187,18,197,16],[188,6,198,4],[189,6,200,4],[189,12,200,10,"leveledUp"],[189,21,200,19],[189,24,200,22,"newLevel"],[189,32,200,30],[189,35,200,33,"state"],[189,40,200,38],[189,41,200,39,"currentLevel"],[189,53,200,51],[191,6,202,4],[192,6,203,4],[192,12,203,10,"updatedState"],[192,24,203,22],[192,27,203,25],[193,8,204,6,"totalPoints"],[193,19,204,17],[193,21,204,19,"newPoints"],[193,30,204,28],[194,8,205,6,"currentLevel"],[194,20,205,18],[194,22,205,20,"newLevel"],[195,6,206,4],[195,7,206,5],[196,6,208,4,"set"],[196,9,208,7],[196,10,208,8,"updatedState"],[196,22,208,20],[196,23,208,21],[198,6,210,4],[199,6,211,4],[199,12,211,11,"get"],[199,15,211,14],[199,16,211,15],[199,17,211,16],[199,18,211,25,"persistData"],[199,29,211,36],[199,30,211,37,"updatedState"],[199,42,211,49],[199,43,211,50],[201,6,213,4],[202,6,214,4],[202,10,214,8,"leveledUp"],[202,19,214,17],[202,21,214,19],[203,8,215,6],[203,14,215,12],[203,18,215,12,"levelUp"],[203,38,215,19],[203,39,215,19,"levelUp"],[203,46,215,19],[203,48,215,20],[203,49,215,21],[205,8,217,6],[206,8,218,6],[206,12,218,10,"newLevel"],[206,20,218,18],[206,25,218,23],[206,26,218,24],[206,28,218,26],[207,10,219,8],[207,16,219,14,"get"],[207,19,219,17],[207,20,219,18],[207,21,219,19],[207,22,219,20,"addBadge"],[207,30,219,28],[207,31,219,29,"AVAILABLE_BADGES"],[207,47,219,45],[207,48,219,46,"ROMANCE_EXPERT"],[207,62,219,60],[207,63,219,61],[208,8,220,6],[208,9,220,7],[208,15,220,13],[208,19,220,17,"newLevel"],[208,27,220,25],[208,32,220,30],[208,34,220,32],[208,36,220,34],[209,10,221,8],[209,16,221,14,"get"],[209,19,221,17],[209,20,221,18],[209,21,221,19],[209,22,221,20,"addBadge"],[209,30,221,28],[209,31,221,29,"AVAILABLE_BADGES"],[209,47,221,45],[209,48,221,46,"LOVE_GURU"],[209,57,221,55],[209,58,221,56],[210,8,222,6],[210,9,222,7],[210,15,222,13],[210,19,222,17,"newLevel"],[210,27,222,25],[210,32,222,30],[210,34,222,32],[210,36,222,34],[211,10,223,8],[211,16,223,14,"get"],[211,19,223,17],[211,20,223,18],[211,21,223,19],[211,22,223,20,"addBadge"],[211,30,223,28],[211,31,223,29,"AVAILABLE_BADGES"],[211,47,223,45],[211,48,223,46,"RELATIONSHIP_CHAMPION"],[211,69,223,67],[211,70,223,68],[212,8,224,6],[213,6,225,4],[215,6,227,4],[216,6,228,4],[216,10,228,8,"newPoints"],[216,19,228,17],[216,23,228,21],[216,27,228,25],[216,31,228,29],[216,32,228,30,"state"],[216,37,228,35],[216,38,228,36,"badges"],[216,44,228,42],[216,45,228,43,"includes"],[216,53,228,51],[216,54,228,52,"AVAILABLE_BADGES"],[216,70,228,68],[216,71,228,69,"POINTS_MASTER"],[216,84,228,82],[216,85,228,83],[216,87,228,85],[217,8,229,6],[217,14,229,12,"get"],[217,17,229,15],[217,18,229,16],[217,19,229,17],[217,20,229,18,"addBadge"],[217,28,229,26],[217,29,229,27,"AVAILABLE_BADGES"],[217,45,229,43],[217,46,229,44,"POINTS_MASTER"],[217,59,229,57],[217,60,229,58],[218,6,230,4],[219,4,231,2],[219,5,231,3],[220,4,233,2],[221,4,234,2,"completeTask"],[221,16,234,14],[221,18,234,16],[221,24,234,23,"taskPoints"],[221,34,234,41],[221,38,234,46],[222,6,235,4],[222,12,235,10,"state"],[222,17,235,15],[222,20,235,18,"get"],[222,23,235,21],[222,24,235,22],[222,25,235,23],[223,6,236,4],[223,12,236,10,"newTasksCompleted"],[223,29,236,27],[223,32,236,30,"state"],[223,37,236,35],[223,38,236,36,"tasksCompleted"],[223,52,236,50],[223,55,236,53],[223,56,236,54],[225,6,238,4],[226,6,239,4],[226,12,239,10,"updatedState"],[226,24,239,22],[226,27,239,25],[227,8,240,6,"tasksCompleted"],[227,22,240,20],[227,24,240,22,"newTasksCompleted"],[228,6,241,4],[228,7,241,5],[229,6,243,4,"set"],[229,9,243,7],[229,10,243,8,"updatedState"],[229,22,243,20],[229,23,243,21],[231,6,245,4],[232,6,246,4],[232,12,246,10,"get"],[232,15,246,13],[232,16,246,14],[232,17,246,15],[232,18,246,16,"addExperience"],[232,31,246,29],[232,32,246,30,"taskPoints"],[232,42,246,40],[232,43,246,41],[234,6,248,4],[235,6,249,4],[235,12,249,10,"get"],[235,15,249,13],[235,16,249,14],[235,17,249,15],[235,18,249,16,"updateStreak"],[235,30,249,28],[235,31,249,29],[235,32,249,30],[237,6,251,4],[238,6,252,4],[238,12,252,11,"get"],[238,15,252,14],[238,16,252,15],[238,17,252,16],[238,18,252,25,"persistData"],[238,29,252,36],[238,30,252,37,"updatedState"],[238,42,252,49],[238,43,252,50],[240,6,254,4],[241,6,255,4],[241,12,255,10],[241,16,255,10,"taskComplete"],[241,36,255,22],[241,37,255,22,"taskComplete"],[241,49,255,22],[241,51,255,23],[241,52,255,24],[243,6,257,4],[244,6,258,4],[244,10,258,8,"newTasksCompleted"],[244,27,258,25],[244,32,258,30],[244,33,258,31],[244,35,258,33],[245,8,259,6],[245,14,259,12,"get"],[245,17,259,15],[245,18,259,16],[245,19,259,17],[245,20,259,18,"addBadge"],[245,28,259,26],[245,29,259,27,"AVAILABLE_BADGES"],[245,45,259,43],[245,46,259,44,"FIRST_TASK"],[245,56,259,54],[245,57,259,55],[246,6,260,4],[246,7,260,5],[246,13,260,11],[246,17,260,15,"newTasksCompleted"],[246,34,260,32],[246,39,260,37],[246,42,260,40],[246,44,260,42],[247,8,261,6],[247,14,261,12,"get"],[247,17,261,15],[247,18,261,16],[247,19,261,17],[247,20,261,18,"addBadge"],[247,28,261,26],[247,29,261,27,"AVAILABLE_BADGES"],[247,45,261,43],[247,46,261,44,"HUNDRED_CLUB"],[247,58,261,56],[247,59,261,57],[248,6,262,4],[249,4,263,2],[249,5,263,3],[250,4,265,2],[251,4,266,2,"updateStreak"],[251,16,266,14],[251,18,266,16],[251,24,266,16,"updateStreak"],[251,25,266,16],[251,30,266,28],[252,6,267,4],[252,12,267,10,"state"],[252,17,267,15],[252,20,267,18,"get"],[252,23,267,21],[252,24,267,22],[252,25,267,23],[253,6,268,4],[253,12,268,10,"today"],[253,17,268,15],[253,20,268,18],[253,24,268,22,"Date"],[253,28,268,26],[253,29,268,27],[253,30,268,28],[254,6,269,4],[254,12,269,10,"todayString"],[254,23,269,21],[254,26,269,24,"today"],[254,31,269,29],[254,32,269,30,"toDateString"],[254,44,269,42],[254,45,269,43],[254,46,269,44],[256,6,271,4],[257,6,272,4],[257,10,272,8],[257,11,272,9,"state"],[257,16,272,14],[257,17,272,15,"lastActiveDate"],[257,31,272,29],[257,33,272,31],[258,8,273,6],[258,14,273,12,"updatedState"],[258,26,273,24],[258,29,273,27],[259,10,274,8,"currentStreak"],[259,23,274,21],[259,25,274,23],[259,26,274,24],[260,10,275,8,"longestStreak"],[260,23,275,21],[260,25,275,23,"Math"],[260,29,275,27],[260,30,275,28,"max"],[260,33,275,31],[260,34,275,32],[260,35,275,33],[260,37,275,35,"state"],[260,42,275,40],[260,43,275,41,"longestStreak"],[260,56,275,54],[260,57,275,55],[261,10,276,8,"lastActiveDate"],[261,24,276,22],[261,26,276,24,"today"],[261,31,276,29],[261,32,276,30,"toISOString"],[261,43,276,41],[261,44,276,42],[262,8,277,6],[262,9,277,7],[263,8,279,6,"set"],[263,11,279,9],[263,12,279,10,"updatedState"],[263,24,279,22],[263,25,279,23],[264,8,280,6],[264,14,280,13,"get"],[264,17,280,16],[264,18,280,17],[264,19,280,18],[264,20,280,27,"persistData"],[264,31,280,38],[264,32,280,39,"updatedState"],[264,44,280,51],[264,45,280,52],[266,8,282,6],[267,8,283,6],[267,12,283,10,"state"],[267,17,283,15],[267,18,283,16,"currentStreak"],[267,31,283,29],[267,36,283,34],[267,37,283,35],[267,39,283,37],[268,10,284,8],[268,16,284,14,"get"],[268,19,284,17],[268,20,284,18],[268,21,284,19],[268,22,284,20,"addBadge"],[268,30,284,28],[268,31,284,29,"AVAILABLE_BADGES"],[268,47,284,45],[268,48,284,46,"FIRST_TASK"],[268,58,284,56],[268,59,284,57],[269,8,285,6],[270,8,286,6],[271,6,287,4],[272,6,289,4],[272,12,289,10,"lastActiveDate"],[272,26,289,24],[272,29,289,27],[272,33,289,31,"Date"],[272,37,289,35],[272,38,289,36,"state"],[272,43,289,41],[272,44,289,42,"lastActiveDate"],[272,58,289,56],[272,59,289,57],[273,6,290,4],[273,12,290,10,"lastActiveDateString"],[273,32,290,30],[273,35,290,33,"lastActiveDate"],[273,49,290,47],[273,50,290,48,"toDateString"],[273,62,290,60],[273,63,290,61],[273,64,290,62],[275,6,292,4],[276,6,293,4],[276,10,293,8,"lastActiveDateString"],[276,30,293,28],[276,35,293,33,"todayString"],[276,46,293,44],[276,48,293,46],[277,8,294,6],[278,6,295,4],[280,6,297,4],[281,6,298,4],[281,12,298,10,"diffTime"],[281,20,298,18],[281,23,298,21,"today"],[281,28,298,26],[281,29,298,27,"getTime"],[281,36,298,34],[281,37,298,35],[281,38,298,36],[281,41,298,39,"lastActiveDate"],[281,55,298,53],[281,56,298,54,"getTime"],[281,63,298,61],[281,64,298,62],[281,65,298,63],[282,6,299,4],[282,12,299,10,"diffDays"],[282,20,299,18],[282,23,299,21,"Math"],[282,27,299,25],[282,28,299,26,"floor"],[282,33,299,31],[282,34,299,32,"diffTime"],[282,42,299,40],[282,46,299,44],[282,50,299,48],[282,53,299,51],[282,55,299,53],[282,58,299,56],[282,60,299,58],[282,63,299,61],[282,65,299,63],[282,66,299,64],[282,67,299,65],[283,6,301,4],[283,10,301,8,"newStreak"],[283,19,301,17],[284,6,302,4],[284,10,302,8,"newLongestStreak"],[284,26,302,24],[285,6,304,4],[285,10,304,8,"diffDays"],[285,18,304,16],[285,23,304,21],[285,24,304,22],[285,26,304,24],[286,8,305,6],[287,8,306,6,"newStreak"],[287,17,306,15],[287,20,306,18,"state"],[287,25,306,23],[287,26,306,24,"currentStreak"],[287,39,306,37],[287,42,306,40],[287,43,306,41],[288,8,307,6,"newLongestStreak"],[288,24,307,22],[288,27,307,25,"Math"],[288,31,307,29],[288,32,307,30,"max"],[288,35,307,33],[288,36,307,34,"newStreak"],[288,45,307,43],[288,47,307,45,"state"],[288,52,307,50],[288,53,307,51,"longestStreak"],[288,66,307,64],[288,67,307,65],[289,6,308,4],[289,7,308,5],[289,13,308,11],[289,17,308,15,"diffDays"],[289,25,308,23],[289,28,308,26],[289,29,308,27],[289,31,308,29],[290,8,309,6],[291,8,310,6,"newStreak"],[291,17,310,15],[291,20,310,18],[291,21,310,19],[292,8,311,6,"newLongestStreak"],[292,24,311,22],[292,27,311,25,"state"],[292,32,311,30],[292,33,311,31,"longestStreak"],[292,46,311,44],[292,47,311,45],[292,48,311,46],[293,6,312,4],[293,7,312,5],[293,13,312,11],[294,8,313,6],[295,8,314,6],[296,6,315,4],[297,6,317,4],[297,12,317,10,"updatedState"],[297,24,317,22],[297,27,317,25],[298,8,318,6,"currentStreak"],[298,21,318,19],[298,23,318,21,"newStreak"],[298,32,318,30],[299,8,319,6,"longestStreak"],[299,21,319,19],[299,23,319,21,"newLongestStreak"],[299,39,319,37],[300,8,320,6,"lastActiveDate"],[300,22,320,20],[300,24,320,22,"today"],[300,29,320,27],[300,30,320,28,"toISOString"],[300,41,320,39],[300,42,320,40],[301,6,321,4],[301,7,321,5],[302,6,323,4,"set"],[302,9,323,7],[302,10,323,8,"updatedState"],[302,22,323,20],[302,23,323,21],[304,6,325,4],[305,6,326,4],[305,12,326,11,"get"],[305,15,326,14],[305,16,326,15],[305,17,326,16],[305,18,326,25,"persistData"],[305,29,326,36],[305,30,326,37,"updatedState"],[305,42,326,49],[305,43,326,50],[307,6,328,4],[308,6,329,4],[308,10,329,8,"newStreak"],[308,19,329,17],[308,24,329,22],[308,25,329,23],[308,27,329,25],[309,8,330,6],[309,14,330,12,"get"],[309,17,330,15],[309,18,330,16],[309,19,330,17],[309,20,330,18,"addBadge"],[309,28,330,26],[309,29,330,27,"AVAILABLE_BADGES"],[309,45,330,43],[309,46,330,44,"WEEK_WARRIOR"],[309,58,330,56],[309,59,330,57],[310,6,331,4],[310,7,331,5],[310,13,331,11],[310,17,331,15,"newStreak"],[310,26,331,24],[310,31,331,29],[310,33,331,31],[310,35,331,33],[311,8,332,6],[311,14,332,12,"get"],[311,17,332,15],[311,18,332,16],[311,19,332,17],[311,20,332,18,"addBadge"],[311,28,332,26],[311,29,332,27,"AVAILABLE_BADGES"],[311,45,332,43],[311,46,332,44,"MONTH_MASTER"],[311,58,332,56],[311,59,332,57],[312,6,333,4],[312,7,333,5],[312,13,333,11],[312,17,333,15,"newStreak"],[312,26,333,24],[312,31,333,29],[312,33,333,31],[312,35,333,33],[313,8,334,6],[313,14,334,12,"get"],[313,17,334,15],[313,18,334,16],[313,19,334,17],[313,20,334,18,"addBadge"],[313,28,334,26],[313,29,334,27,"AVAILABLE_BADGES"],[313,45,334,43],[313,46,334,44,"STREAK_LEGEND"],[313,59,334,57],[313,60,334,58],[314,6,335,4],[315,4,336,2],[315,5,336,3],[316,4,338,2],[317,4,339,2,"breakStreak"],[317,15,339,13],[317,17,339,15],[317,23,339,15,"breakStreak"],[317,24,339,15],[317,29,339,27],[318,6,340,4],[318,12,340,10,"updatedState"],[318,24,340,22],[318,27,340,25],[319,8,341,6,"currentStreak"],[319,21,341,19],[319,23,341,21],[320,6,342,4],[320,7,342,5],[321,6,344,4,"set"],[321,9,344,7],[321,10,344,8,"updatedState"],[321,22,344,20],[321,23,344,21],[322,6,345,4],[322,12,345,11,"get"],[322,15,345,14],[322,16,345,15],[322,17,345,16],[322,18,345,25,"persistData"],[322,29,345,36],[322,30,345,37,"updatedState"],[322,42,345,49],[322,43,345,50],[323,4,346,2],[323,5,346,3],[324,4,348,2],[325,4,349,2,"addBadge"],[325,12,349,10],[325,14,349,12],[325,20,349,19,"badge"],[325,25,349,32],[325,29,349,37],[326,6,350,4],[326,12,350,10,"state"],[326,17,350,15],[326,20,350,18,"get"],[326,23,350,21],[326,24,350,22],[326,25,350,23],[327,6,352,4],[327,10,352,8],[327,11,352,9,"state"],[327,16,352,14],[327,17,352,15,"badges"],[327,23,352,21],[327,24,352,22,"includes"],[327,32,352,30],[327,33,352,31,"badge"],[327,38,352,36],[327,39,352,37],[327,41,352,39],[328,8,353,6],[328,14,353,12,"updatedState"],[328,26,353,24],[328,29,353,27],[329,10,354,8,"badges"],[329,16,354,14],[329,18,354,16],[329,19,354,17],[329,22,354,20,"state"],[329,27,354,25],[329,28,354,26,"badges"],[329,34,354,32],[329,36,354,34,"badge"],[329,41,354,39],[330,8,355,6],[330,9,355,7],[331,8,357,6,"set"],[331,11,357,9],[331,12,357,10,"updatedState"],[331,24,357,22],[331,25,357,23],[332,8,358,6],[332,14,358,13,"get"],[332,17,358,16],[332,18,358,17],[332,19,358,18],[332,20,358,27,"persistData"],[332,31,358,38],[332,32,358,39,"updatedState"],[332,44,358,51],[332,45,358,52],[334,8,360,6],[335,8,361,6],[335,14,361,12],[335,18,361,12,"achievement"],[335,38,361,23],[335,39,361,23,"achievement"],[335,50,361,23],[335,52,361,24],[335,53,361,25],[336,6,362,4],[337,4,363,2],[337,5,363,3],[338,4,365,2],[339,4,366,2,"resetProgress"],[339,17,366,15],[339,19,366,17],[339,25,366,17,"resetProgress"],[339,26,366,17],[339,31,366,29],[340,6,367,4],[340,12,367,10,"resetState"],[340,22,367,20],[340,25,367,23],[341,8,368,6,"totalPoints"],[341,19,368,17],[341,21,368,19],[341,22,368,20],[342,8,369,6,"currentLevel"],[342,20,369,18],[342,22,369,20],[342,23,369,21],[343,8,370,6,"currentStreak"],[343,21,370,19],[343,23,370,21],[343,24,370,22],[344,8,371,6,"longestStreak"],[344,21,371,19],[344,23,371,21],[344,24,371,22],[345,8,372,6,"tasksCompleted"],[345,22,372,20],[345,24,372,22],[345,25,372,23],[346,8,373,6,"badges"],[346,14,373,12],[346,16,373,14],[346,18,373,16],[347,8,374,6,"lastActiveDate"],[347,22,374,20],[347,24,374,22],[348,6,375,4],[348,7,375,5],[349,6,377,4,"set"],[349,9,377,7],[349,10,377,8,"resetState"],[349,20,377,18],[349,21,377,19],[351,6,379,4],[352,6,380,4],[352,10,380,8],[353,8,381,6],[354,8,382,6],[354,14,382,12,"storage"],[354,21,382,19],[354,24,382,22,"getAsyncStorage"],[354,39,382,37],[354,40,382,38],[354,41,382,39],[355,8,383,6],[355,12,383,10,"storage"],[355,19,383,17],[355,21,383,19],[356,10,384,8],[356,16,384,14,"storage"],[356,23,384,21],[356,24,384,22,"removeItem"],[356,34,384,32],[356,35,384,33,"STORAGE_KEY"],[356,46,384,44],[356,47,384,45],[357,8,385,6],[357,9,385,7],[357,15,385,13],[358,10,386,8,"console"],[358,17,386,15],[358,18,386,16,"log"],[358,21,386,19],[358,22,386,20],[358,74,386,72],[358,75,386,73],[359,8,387,6],[360,6,388,4],[360,7,388,5],[360,8,388,6],[360,15,388,13,"error"],[360,20,388,18],[360,22,388,20],[361,8,389,6,"console"],[361,15,389,13],[361,16,389,14,"error"],[361,21,389,19],[361,22,389,20],[361,50,389,48],[361,52,389,50,"error"],[361,57,389,55],[361,58,389,56],[362,6,390,4],[363,4,391,2],[363,5,391,3],[364,4,393,2],[365,4,394,2,"getExperienceForNextLevel"],[365,29,394,27],[365,31,394,29,"getExperienceForNextLevel"],[365,32,394,29],[365,37,394,35],[366,6,395,4],[366,12,395,10,"state"],[366,17,395,15],[366,20,395,18,"get"],[366,23,395,21],[366,24,395,22],[366,25,395,23],[367,6,396,4],[367,10,396,8,"state"],[367,15,396,13],[367,16,396,14,"currentLevel"],[367,28,396,26],[367,32,396,30,"LEVEL_THRESHOLDS"],[367,48,396,46],[367,49,396,47,"length"],[367,55,396,53],[367,58,396,56],[367,59,396,57],[367,61,396,59],[368,8,397,6],[368,15,397,13],[368,16,397,14],[368,17,397,15],[368,18,397,16],[369,6,398,4],[370,6,399,4],[370,13,399,11,"LEVEL_THRESHOLDS"],[370,29,399,27],[370,30,399,28,"state"],[370,35,399,33],[370,36,399,34,"currentLevel"],[370,48,399,46],[370,49,399,47],[370,52,399,50,"state"],[370,57,399,55],[370,58,399,56,"totalPoints"],[370,69,399,67],[371,4,400,2],[371,5,400,3],[372,4,402,2,"getProgressPercentage"],[372,25,402,23],[372,27,402,25,"getProgressPercentage"],[372,28,402,25],[372,33,402,31],[373,6,403,4],[373,12,403,10,"state"],[373,17,403,15],[373,20,403,18,"get"],[373,23,403,21],[373,24,403,22],[373,25,403,23],[374,6,404,4],[374,10,404,8,"state"],[374,15,404,13],[374,16,404,14,"currentLevel"],[374,28,404,26],[374,32,404,30,"LEVEL_THRESHOLDS"],[374,48,404,46],[374,49,404,47,"length"],[374,55,404,53],[374,58,404,56],[374,59,404,57],[374,61,404,59],[375,8,405,6],[375,15,405,13],[375,18,405,16],[375,19,405,17],[375,20,405,18],[376,6,406,4],[377,6,408,4],[377,12,408,10,"currentLevelStart"],[377,29,408,27],[377,32,408,30,"LEVEL_THRESHOLDS"],[377,48,408,46],[377,49,408,47,"state"],[377,54,408,52],[377,55,408,53,"currentLevel"],[377,67,408,65],[377,70,408,68],[377,71,408,69],[377,72,408,70],[378,6,409,4],[378,12,409,10,"nextLevelStart"],[378,26,409,24],[378,29,409,27,"LEVEL_THRESHOLDS"],[378,45,409,43],[378,46,409,44,"state"],[378,51,409,49],[378,52,409,50,"currentLevel"],[378,64,409,62],[378,65,409,63],[379,6,410,4],[379,12,410,10,"currentProgress"],[379,27,410,25],[379,30,410,28,"state"],[379,35,410,33],[379,36,410,34,"totalPoints"],[379,47,410,45],[379,50,410,48,"currentLevelStart"],[379,67,410,65],[380,6,411,4],[380,12,411,10,"totalNeeded"],[380,23,411,21],[380,26,411,24,"nextLevelStart"],[380,40,411,38],[380,43,411,41,"currentLevelStart"],[380,60,411,58],[381,6,413,4],[381,13,413,11,"Math"],[381,17,413,15],[381,18,413,16,"floor"],[381,23,413,21],[381,24,413,23,"currentProgress"],[381,39,413,38],[381,42,413,41,"totalNeeded"],[381,53,413,52],[381,56,413,56],[381,59,413,59],[381,60,413,60],[382,4,414,2],[382,5,414,3],[383,4,416,2,"shouldLevelUp"],[383,17,416,15],[383,19,416,17,"shouldLevelUp"],[383,20,416,17],[383,25,416,23],[384,6,417,4],[384,12,417,10,"state"],[384,17,417,15],[384,20,417,18,"get"],[384,23,417,21],[384,24,417,22],[384,25,417,23],[385,6,418,4],[385,13,418,11,"state"],[385,18,418,16],[385,19,418,17,"currentLevel"],[385,31,418,29],[385,34,418,32,"LEVEL_THRESHOLDS"],[385,50,418,48],[385,51,418,49,"length"],[385,57,418,55],[385,60,418,58],[385,61,418,59],[385,65,419,11,"state"],[385,70,419,16],[385,71,419,17,"totalPoints"],[385,82,419,28],[385,86,419,32,"LEVEL_THRESHOLDS"],[385,102,419,48],[385,103,419,49,"state"],[385,108,419,54],[385,109,419,55,"currentLevel"],[385,121,419,67],[385,122,419,68],[386,4,420,2],[387,2,421,0],[387,3,421,1],[387,4,421,2],[387,5,421,3],[389,2,423,0],[390,0,423,0],[390,3]],"functionMap":{"names":["<global>","getAsyncStorage","calculateLevelUpPoints","generateLevelThresholds","create$argument_0","loadPersistedData","persistData","addExperience","completeTask","updateStreak","breakStreak","addBadge","resetProgress","getExperienceForNextLevel","getProgressPercentage","shouldLevelUp"],"mappings":"AAA;wBCO;CDuB;+BE+B;CFE;gCGG;CHM;uCImB;qBCY;GDwD;eEG;GFwB;iBGG;GHyC;gBIG;GJ6B;gBKG;GLsE;eMG;GNO;YOG;GPc;iBQG;GRyB;6BSG;GTM;yBUE;GVY;iBWE;GXI;EJC"},"hasCjsExports":false},"type":"js/module"}]}