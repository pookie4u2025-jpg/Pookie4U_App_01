{"dependencies":[{"name":"zustand","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":33,"index":33}}],"key":"POPvx7yS3Y3wz+S/9OAefiXNs0Q=","exportNames":["*"],"imports":1}},{"name":"../utils/HapticsManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":34},"end":{"line":2,"column":77,"index":111}}],"key":"nBdnSRqGBBV35N8QrGTTDbqVGgg=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":21,"column":33,"index":719},"end":{"line":21,"column":85,"index":771}}],"key":"lV14QuoELkLKy4kI0aEcfvvcE84=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"AVAILABLE_BADGES\", {\n    enumerable: true,\n    get: function () {\n      return AVAILABLE_BADGES;\n    }\n  });\n  Object.defineProperty(exports, \"useGameStore\", {\n    enumerable: true,\n    get: function () {\n      return useGameStore;\n    }\n  });\n  var _zustand = require(_dependencyMap[0], \"zustand\");\n  var _utilsHapticsManager = require(_dependencyMap[1], \"../utils/HapticsManager\");\n  // Conditional AsyncStorage import to handle web/SSR environments\n  let AsyncStorage = null;\n\n  // Helper function to safely get AsyncStorage\n  const getAsyncStorage = () => {\n    // Always return null during SSR or when window is not available\n    if (true) {\n      return null;\n    }\n\n    // Return cached AsyncStorage if available\n    if (AsyncStorage) return AsyncStorage;\n\n    // Only try to load AsyncStorage in browser environment\n    try {\n      // Check if require is available and we're in the right environment\n      if (typeof require === 'function') {\n        const AsyncStorageModule = require(_dependencyMap[2], \"@react-native-async-storage/async-storage\");\n        AsyncStorage = AsyncStorageModule.default || AsyncStorageModule;\n        return AsyncStorage;\n      }\n    } catch (error) {\n      // Silently fail and return null\n      console.log('AsyncStorage not available:', error.message);\n    }\n    return null;\n  };\n  // Level progression: exponential growth\n  const calculateLevelUpPoints = level => {\n    return Math.floor(100 * Math.pow(1.5, level - 1));\n  };\n\n  // Generate level thresholds up to level 50\n  const generateLevelThresholds = () => {\n    const thresholds = [0]; // Level 1 starts at 0\n    for (let i = 1; i <= 50; i++) {\n      thresholds.push(thresholds[i - 1] + calculateLevelUpPoints(i));\n    }\n    return thresholds;\n  };\n  const LEVEL_THRESHOLDS = generateLevelThresholds();\n  const STORAGE_KEY = '@pookie4u_game_data';\n\n  // Available badges\n  const AVAILABLE_BADGES = {\n    FIRST_TASK: 'first_task',\n    WEEK_WARRIOR: 'week_warrior',\n    // 7-day streak\n    MONTH_MASTER: 'month_master',\n    // 30-day streak\n    HUNDRED_CLUB: 'hundred_club',\n    // 100 tasks\n    ROMANCE_EXPERT: 'romance_expert',\n    // Level 5\n    LOVE_GURU: 'love_guru',\n    // Level 10\n    RELATIONSHIP_CHAMPION: 'relationship_champion',\n    // Level 20\n    STREAK_LEGEND: 'streak_legend',\n    // 50-day streak\n    POINTS_MASTER: 'points_master',\n    // 1000 points\n    DEDICATION_AWARD: 'dedication_award' // 100 days active\n  };\n  const useGameStore = (0, _zustand.create)((set, get) => ({\n    // Initial state\n    totalPoints: 0,\n    currentLevel: 1,\n    currentStreak: 0,\n    longestStreak: 0,\n    tasksCompleted: 0,\n    badges: [],\n    lastActiveDate: null,\n    levelUpPoints: LEVEL_THRESHOLDS,\n    // Load persisted data from AsyncStorage\n    loadPersistedData: async () => {\n      // Always set fallback values first to ensure UI works\n      const fallbackState = {\n        totalPoints: 35,\n        currentLevel: 1,\n        currentStreak: 7,\n        // Test value to verify streak display works\n        longestStreak: 10,\n        // Test value to verify longest streak works\n        tasksCompleted: 0,\n        badges: [],\n        lastActiveDate: new Date().toISOString()\n      };\n      try {\n        // Check if AsyncStorage is available (not on web during SSR)\n        const storage = getAsyncStorage();\n        if (!storage) {\n          console.log('AsyncStorage not available, using fallback values');\n          set(fallbackState);\n          return;\n        }\n        const stored = await storage.getItem(STORAGE_KEY);\n        if (stored) {\n          const data = JSON.parse(stored);\n          set({\n            totalPoints: data.totalPoints || 0,\n            currentLevel: data.currentLevel || 1,\n            currentStreak: data.currentStreak || 0,\n            longestStreak: data.longestStreak || 0,\n            tasksCompleted: data.tasksCompleted || 0,\n            badges: data.badges || [],\n            lastActiveDate: data.lastActiveDate || null\n          });\n\n          // Check if streak needs to be broken due to inactivity\n          if (data.lastActiveDate) {\n            const lastDate = new Date(data.lastActiveDate);\n            const today = new Date();\n            const diffTime = today.getTime() - lastDate.getTime();\n            const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n\n            // If more than 1 day has passed, break the streak\n            if (diffDays > 1) {\n              await get().breakStreak();\n            }\n          }\n        } else {\n          // First time user - set initial test data to verify UI\n          console.log('No stored data found, setting initial test data');\n          set(fallbackState);\n        }\n      } catch (error) {\n        console.error('Failed to load game data:', error);\n        // Always set fallback values on any error\n        set(fallbackState);\n      }\n    },\n    // Persist current state to AsyncStorage\n    persistData: async updatedState => {\n      try {\n        // Check if AsyncStorage is available\n        const storage = getAsyncStorage();\n        if (!storage) {\n          console.log('AsyncStorage not available, skipping data persistence');\n          return;\n        }\n        const currentState = get();\n        const dataToStore = {\n          totalPoints: updatedState.totalPoints ?? currentState.totalPoints,\n          currentLevel: updatedState.currentLevel ?? currentState.currentLevel,\n          currentStreak: updatedState.currentStreak ?? currentState.currentStreak,\n          longestStreak: updatedState.longestStreak ?? currentState.longestStreak,\n          tasksCompleted: updatedState.tasksCompleted ?? currentState.tasksCompleted,\n          badges: updatedState.badges ?? currentState.badges,\n          lastActiveDate: updatedState.lastActiveDate ?? currentState.lastActiveDate ?? new Date().toISOString()\n        };\n        await storage.setItem(STORAGE_KEY, JSON.stringify(dataToStore));\n      } catch (error) {\n        console.error('Failed to persist game data:', error);\n      }\n    },\n    // Add experience points with level progression\n    addExperience: async points => {\n      const state = get();\n      const newPoints = state.totalPoints + points;\n\n      // Calculate new level\n      let newLevel = state.currentLevel;\n      while (newLevel < LEVEL_THRESHOLDS.length - 1 && newPoints >= LEVEL_THRESHOLDS[newLevel]) {\n        newLevel++;\n      }\n      const leveledUp = newLevel > state.currentLevel;\n\n      // Update state\n      const updatedState = {\n        totalPoints: newPoints,\n        currentLevel: newLevel\n      };\n      set(updatedState);\n\n      // Persist immediately\n      await get().persistData(updatedState);\n\n      // Haptic feedback for level up\n      if (leveledUp) {\n        await (0, _utilsHapticsManager.levelUp)();\n\n        // Award level-based badges\n        if (newLevel === 5) {\n          await get().addBadge(AVAILABLE_BADGES.ROMANCE_EXPERT);\n        } else if (newLevel === 10) {\n          await get().addBadge(AVAILABLE_BADGES.LOVE_GURU);\n        } else if (newLevel === 20) {\n          await get().addBadge(AVAILABLE_BADGES.RELATIONSHIP_CHAMPION);\n        }\n      }\n\n      // Check for points-based badges\n      if (newPoints >= 1000 && !state.badges.includes(AVAILABLE_BADGES.POINTS_MASTER)) {\n        await get().addBadge(AVAILABLE_BADGES.POINTS_MASTER);\n      }\n    },\n    // Complete a task (combines points and task completion)\n    completeTask: async taskPoints => {\n      const state = get();\n      const newTasksCompleted = state.tasksCompleted + 1;\n\n      // Update state\n      const updatedState = {\n        tasksCompleted: newTasksCompleted\n      };\n      set(updatedState);\n\n      // Add experience points\n      await get().addExperience(taskPoints);\n\n      // Update streak\n      await get().updateStreak();\n\n      // Persist task completion\n      await get().persistData(updatedState);\n\n      // Task completion haptic feedback\n      await (0, _utilsHapticsManager.taskComplete)();\n\n      // Check for task-based badges\n      if (newTasksCompleted === 1) {\n        await get().addBadge(AVAILABLE_BADGES.FIRST_TASK);\n      } else if (newTasksCompleted === 100) {\n        await get().addBadge(AVAILABLE_BADGES.HUNDRED_CLUB);\n      }\n    },\n    // Update daily streak (Snapchat-style)\n    updateStreak: async () => {\n      const state = get();\n      const today = new Date();\n      const todayString = today.toDateString();\n\n      // If no last active date, this is the first task - start streak at 1\n      if (!state.lastActiveDate) {\n        const updatedState = {\n          currentStreak: 1,\n          longestStreak: Math.max(1, state.longestStreak),\n          lastActiveDate: today.toISOString()\n        };\n        set(updatedState);\n        await get().persistData(updatedState);\n\n        // Check for first task badge\n        if (state.currentStreak === 0) {\n          await get().addBadge(AVAILABLE_BADGES.FIRST_TASK);\n        }\n        return;\n      }\n      const lastActiveDate = new Date(state.lastActiveDate);\n      const lastActiveDateString = lastActiveDate.toDateString();\n\n      // If already updated today, don't update again\n      if (lastActiveDateString === todayString) {\n        return;\n      }\n\n      // Calculate days difference\n      const diffTime = today.getTime() - lastActiveDate.getTime();\n      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n      let newStreak;\n      let newLongestStreak;\n      if (diffDays === 1) {\n        // Consecutive day - increment streak\n        newStreak = state.currentStreak + 1;\n        newLongestStreak = Math.max(newStreak, state.longestStreak);\n      } else if (diffDays > 1) {\n        // Missed day(s) - reset streak to 1 (starting fresh)\n        newStreak = 1;\n        newLongestStreak = state.longestStreak; // Keep longest streak\n      } else {\n        // Same day (shouldn't happen but safety check)\n        return;\n      }\n      const updatedState = {\n        currentStreak: newStreak,\n        longestStreak: newLongestStreak,\n        lastActiveDate: today.toISOString()\n      };\n      set(updatedState);\n\n      // Persist immediately\n      await get().persistData(updatedState);\n\n      // Check for streak-based badges\n      if (newStreak === 7) {\n        await get().addBadge(AVAILABLE_BADGES.WEEK_WARRIOR);\n      } else if (newStreak === 30) {\n        await get().addBadge(AVAILABLE_BADGES.MONTH_MASTER);\n      } else if (newStreak === 50) {\n        await get().addBadge(AVAILABLE_BADGES.STREAK_LEGEND);\n      }\n    },\n    // Break current streak\n    breakStreak: async () => {\n      const updatedState = {\n        currentStreak: 0\n      };\n      set(updatedState);\n      await get().persistData(updatedState);\n    },\n    // Add a new badge\n    addBadge: async badge => {\n      const state = get();\n      if (!state.badges.includes(badge)) {\n        const updatedState = {\n          badges: [...state.badges, badge]\n        };\n        set(updatedState);\n        await get().persistData(updatedState);\n\n        // Achievement haptic feedback\n        await (0, _utilsHapticsManager.achievement)();\n      }\n    },\n    // Reset all progress (for testing or account reset)\n    resetProgress: async () => {\n      const resetState = {\n        totalPoints: 0,\n        currentLevel: 1,\n        currentStreak: 0,\n        longestStreak: 0,\n        tasksCompleted: 0,\n        badges: [],\n        lastActiveDate: null\n      };\n      set(resetState);\n\n      // Clear from storage\n      try {\n        // Check if AsyncStorage is available\n        const storage = getAsyncStorage();\n        if (storage) {\n          await storage.removeItem(STORAGE_KEY);\n        } else {\n          console.log('AsyncStorage not available, skipping data clearing');\n        }\n      } catch (error) {\n        console.error('Failed to clear game data:', error);\n      }\n    },\n    // Computed getters\n    getExperienceForNextLevel: () => {\n      const state = get();\n      if (state.currentLevel >= LEVEL_THRESHOLDS.length - 1) {\n        return 0; // Max level reached\n      }\n      return LEVEL_THRESHOLDS[state.currentLevel] - state.totalPoints;\n    },\n    getProgressPercentage: () => {\n      const state = get();\n      if (state.currentLevel >= LEVEL_THRESHOLDS.length - 1) {\n        return 100; // Max level\n      }\n      const currentLevelStart = LEVEL_THRESHOLDS[state.currentLevel - 1];\n      const nextLevelStart = LEVEL_THRESHOLDS[state.currentLevel];\n      const currentProgress = state.totalPoints - currentLevelStart;\n      const totalNeeded = nextLevelStart - currentLevelStart;\n      return Math.floor(currentProgress / totalNeeded * 100);\n    },\n    shouldLevelUp: () => {\n      const state = get();\n      return state.currentLevel < LEVEL_THRESHOLDS.length - 1 && state.totalPoints >= LEVEL_THRESHOLDS[state.currentLevel];\n    }\n  }));\n\n  // Store will be initialized when first used in components\n});","lineCount":388,"map":[[7,2,79,0,"Object"],[7,8,79,0],[7,9,79,0,"defineProperty"],[7,23,79,0],[7,24,79,0,"exports"],[7,31,79,0],[8,4,79,0,"enumerable"],[8,14,79,0],[9,4,79,0,"get"],[9,7,79,0],[9,18,79,0,"get"],[9,19,79,0],[10,6,79,0],[10,13,79,0,"AVAILABLE_BADGES"],[10,29,79,0],[11,4,79,0],[12,2,79,0],[13,2,425,0,"Object"],[13,8,425,0],[13,9,425,0,"defineProperty"],[13,23,425,0],[13,24,425,0,"exports"],[13,31,425,0],[14,4,425,0,"enumerable"],[14,14,425,0],[15,4,425,0,"get"],[15,7,425,0],[15,18,425,0,"get"],[15,19,425,0],[16,6,425,0],[16,13,425,9,"useGameStore"],[16,25,425,21],[17,4,425,21],[18,2,425,21],[19,2,1,0],[19,6,1,0,"_zustand"],[19,14,1,0],[19,17,1,0,"require"],[19,24,1,0],[19,25,1,0,"_dependencyMap"],[19,39,1,0],[20,2,2,0],[20,6,2,0,"_utilsHapticsManager"],[20,26,2,0],[20,29,2,0,"require"],[20,36,2,0],[20,37,2,0,"_dependencyMap"],[20,51,2,0],[21,2,4,0],[22,2,5,0],[22,6,5,4,"AsyncStorage"],[22,18,5,21],[22,21,5,24],[22,25,5,28],[24,2,7,0],[25,2,8,0],[25,8,8,6,"getAsyncStorage"],[25,23,8,21],[25,26,8,24,"getAsyncStorage"],[25,27,8,24],[25,32,8,30],[26,4,9,2],[27,4,10,2],[27,14,10,37],[28,6,11,4],[28,13,11,11],[28,17,11,15],[29,4,12,2],[31,4,14,2],[32,4,15,2],[32,8,15,6,"AsyncStorage"],[32,20,15,18],[32,22,15,20],[32,29,15,27,"AsyncStorage"],[32,41,15,39],[34,4,17,2],[35,4,18,2],[35,8,18,6],[36,6,19,4],[37,6,20,4],[37,10,20,8],[37,17,20,15,"require"],[37,24,20,22],[37,29,20,27],[37,39,20,37],[37,41,20,39],[38,8,21,6],[38,14,21,12,"AsyncStorageModule"],[38,32,21,30],[38,35,21,33,"require"],[38,42,21,40],[38,43,21,40,"_dependencyMap"],[38,57,21,40],[38,105,21,84],[38,106,21,85],[39,8,22,6,"AsyncStorage"],[39,20,22,18],[39,23,22,21,"AsyncStorageModule"],[39,41,22,39],[39,42,22,40,"default"],[39,49,22,47],[39,53,22,51,"AsyncStorageModule"],[39,71,22,69],[40,8,23,6],[40,15,23,13,"AsyncStorage"],[40,27,23,25],[41,6,24,4],[42,4,25,2],[42,5,25,3],[42,6,25,4],[42,13,25,11,"error"],[42,18,25,16],[42,20,25,18],[43,6,26,4],[44,6,27,4,"console"],[44,13,27,11],[44,14,27,12,"log"],[44,17,27,15],[44,18,27,16],[44,47,27,45],[44,49,27,47,"error"],[44,54,27,52],[44,55,27,53,"message"],[44,62,27,60],[44,63,27,61],[45,4,28,2],[46,4,30,2],[46,11,30,9],[46,15,30,13],[47,2,31,0],[47,3,31,1],[48,2,61,0],[49,2,62,0],[49,8,62,6,"calculateLevelUpPoints"],[49,30,62,28],[49,33,62,32,"level"],[49,38,62,45],[49,42,62,58],[50,4,63,2],[50,11,63,9,"Math"],[50,15,63,13],[50,16,63,14,"floor"],[50,21,63,19],[50,22,63,20],[50,25,63,23],[50,28,63,26,"Math"],[50,32,63,30],[50,33,63,31,"pow"],[50,36,63,34],[50,37,63,35],[50,40,63,38],[50,42,63,40,"level"],[50,47,63,45],[50,50,63,48],[50,51,63,49],[50,52,63,50],[50,53,63,51],[51,2,64,0],[51,3,64,1],[53,2,66,0],[54,2,67,0],[54,8,67,6,"generateLevelThresholds"],[54,31,67,29],[54,34,67,32,"generateLevelThresholds"],[54,35,67,32],[54,40,67,48],[55,4,68,2],[55,10,68,8,"thresholds"],[55,20,68,18],[55,23,68,21],[55,24,68,22],[55,25,68,23],[55,26,68,24],[55,27,68,25],[55,28,68,26],[56,4,69,2],[56,9,69,7],[56,13,69,11,"i"],[56,14,69,12],[56,17,69,15],[56,18,69,16],[56,20,69,18,"i"],[56,21,69,19],[56,25,69,23],[56,27,69,25],[56,29,69,27,"i"],[56,30,69,28],[56,32,69,30],[56,34,69,32],[57,6,70,4,"thresholds"],[57,16,70,14],[57,17,70,15,"push"],[57,21,70,19],[57,22,70,20,"thresholds"],[57,32,70,30],[57,33,70,31,"i"],[57,34,70,32],[57,37,70,35],[57,38,70,36],[57,39,70,37],[57,42,70,40,"calculateLevelUpPoints"],[57,64,70,62],[57,65,70,63,"i"],[57,66,70,64],[57,67,70,65],[57,68,70,66],[58,4,71,2],[59,4,72,2],[59,11,72,9,"thresholds"],[59,21,72,19],[60,2,73,0],[60,3,73,1],[61,2,75,0],[61,8,75,6,"LEVEL_THRESHOLDS"],[61,24,75,22],[61,27,75,25,"generateLevelThresholds"],[61,50,75,48],[61,51,75,49],[61,52,75,50],[62,2,76,0],[62,8,76,6,"STORAGE_KEY"],[62,19,76,17],[62,22,76,20],[62,43,76,41],[64,2,78,0],[65,2,79,7],[65,8,79,13,"AVAILABLE_BADGES"],[65,24,79,29],[65,27,79,32],[66,4,80,2,"FIRST_TASK"],[66,14,80,12],[66,16,80,14],[66,28,80,26],[67,4,81,2,"WEEK_WARRIOR"],[67,16,81,14],[67,18,81,16],[67,32,81,30],[68,4,81,32],[69,4,82,2,"MONTH_MASTER"],[69,16,82,14],[69,18,82,16],[69,32,82,30],[70,4,82,32],[71,4,83,2,"HUNDRED_CLUB"],[71,16,83,14],[71,18,83,16],[71,32,83,30],[72,4,83,32],[73,4,84,2,"ROMANCE_EXPERT"],[73,18,84,16],[73,20,84,18],[73,36,84,34],[74,4,84,36],[75,4,85,2,"LOVE_GURU"],[75,13,85,11],[75,15,85,13],[75,26,85,24],[76,4,85,26],[77,4,86,2,"RELATIONSHIP_CHAMPION"],[77,25,86,23],[77,27,86,25],[77,50,86,48],[78,4,86,50],[79,4,87,2,"STREAK_LEGEND"],[79,17,87,15],[79,19,87,17],[79,34,87,32],[80,4,87,34],[81,4,88,2,"POINTS_MASTER"],[81,17,88,15],[81,19,88,17],[81,34,88,32],[82,4,88,34],[83,4,89,2,"DEDICATION_AWARD"],[83,20,89,18],[83,22,89,20],[83,40,89,38],[83,41,89,40],[84,2,90,0],[84,3,90,1],[85,2,92,0],[85,8,92,6,"useGameStore"],[85,20,92,18],[85,23,92,21],[85,27,92,21,"create"],[85,35,92,27],[85,36,92,27,"create"],[85,42,92,27],[85,44,92,39],[85,45,92,40,"set"],[85,48,92,43],[85,50,92,45,"get"],[85,53,92,48],[85,59,92,54],[86,4,93,2],[87,4,94,2,"totalPoints"],[87,15,94,13],[87,17,94,15],[87,18,94,16],[88,4,95,2,"currentLevel"],[88,16,95,14],[88,18,95,16],[88,19,95,17],[89,4,96,2,"currentStreak"],[89,17,96,15],[89,19,96,17],[89,20,96,18],[90,4,97,2,"longestStreak"],[90,17,97,15],[90,19,97,17],[90,20,97,18],[91,4,98,2,"tasksCompleted"],[91,18,98,16],[91,20,98,18],[91,21,98,19],[92,4,99,2,"badges"],[92,10,99,8],[92,12,99,10],[92,14,99,12],[93,4,100,2,"lastActiveDate"],[93,18,100,16],[93,20,100,18],[93,24,100,22],[94,4,101,2,"levelUpPoints"],[94,17,101,15],[94,19,101,17,"LEVEL_THRESHOLDS"],[94,35,101,33],[95,4,103,2],[96,4,104,2,"loadPersistedData"],[96,21,104,19],[96,23,104,21],[96,29,104,21,"loadPersistedData"],[96,30,104,21],[96,35,104,33],[97,6,105,4],[98,6,106,4],[98,12,106,10,"fallbackState"],[98,25,106,23],[98,28,106,26],[99,8,107,6,"totalPoints"],[99,19,107,17],[99,21,107,19],[99,23,107,21],[100,8,108,6,"currentLevel"],[100,20,108,18],[100,22,108,20],[100,23,108,21],[101,8,109,6,"currentStreak"],[101,21,109,19],[101,23,109,21],[101,24,109,22],[102,8,109,24],[103,8,110,6,"longestStreak"],[103,21,110,19],[103,23,110,21],[103,25,110,23],[104,8,110,25],[105,8,111,6,"tasksCompleted"],[105,22,111,20],[105,24,111,22],[105,25,111,23],[106,8,112,6,"badges"],[106,14,112,12],[106,16,112,14],[106,18,112,16],[107,8,113,6,"lastActiveDate"],[107,22,113,20],[107,24,113,22],[107,28,113,26,"Date"],[107,32,113,30],[107,33,113,31],[107,34,113,32],[107,35,113,33,"toISOString"],[107,46,113,44],[107,47,113,45],[108,6,114,4],[108,7,114,5],[109,6,116,4],[109,10,116,8],[110,8,117,6],[111,8,118,6],[111,14,118,12,"storage"],[111,21,118,19],[111,24,118,22,"getAsyncStorage"],[111,39,118,37],[111,40,118,38],[111,41,118,39],[112,8,119,6],[112,12,119,10],[112,13,119,11,"storage"],[112,20,119,18],[112,22,119,20],[113,10,120,8,"console"],[113,17,120,15],[113,18,120,16,"log"],[113,21,120,19],[113,22,120,20],[113,73,120,71],[113,74,120,72],[114,10,121,8,"set"],[114,13,121,11],[114,14,121,12,"fallbackState"],[114,27,121,25],[114,28,121,26],[115,10,122,8],[116,8,123,6],[117,8,125,6],[117,14,125,12,"stored"],[117,20,125,18],[117,23,125,21],[117,29,125,27,"storage"],[117,36,125,34],[117,37,125,35,"getItem"],[117,44,125,42],[117,45,125,43,"STORAGE_KEY"],[117,56,125,54],[117,57,125,55],[118,8,126,6],[118,12,126,10,"stored"],[118,18,126,16],[118,20,126,18],[119,10,127,8],[119,16,127,14,"data"],[119,20,127,18],[119,23,127,21,"JSON"],[119,27,127,25],[119,28,127,26,"parse"],[119,33,127,31],[119,34,127,32,"stored"],[119,40,127,38],[119,41,127,39],[120,10,128,8,"set"],[120,13,128,11],[120,14,128,12],[121,12,129,10,"totalPoints"],[121,23,129,21],[121,25,129,23,"data"],[121,29,129,27],[121,30,129,28,"totalPoints"],[121,41,129,39],[121,45,129,43],[121,46,129,44],[122,12,130,10,"currentLevel"],[122,24,130,22],[122,26,130,24,"data"],[122,30,130,28],[122,31,130,29,"currentLevel"],[122,43,130,41],[122,47,130,45],[122,48,130,46],[123,12,131,10,"currentStreak"],[123,25,131,23],[123,27,131,25,"data"],[123,31,131,29],[123,32,131,30,"currentStreak"],[123,45,131,43],[123,49,131,47],[123,50,131,48],[124,12,132,10,"longestStreak"],[124,25,132,23],[124,27,132,25,"data"],[124,31,132,29],[124,32,132,30,"longestStreak"],[124,45,132,43],[124,49,132,47],[124,50,132,48],[125,12,133,10,"tasksCompleted"],[125,26,133,24],[125,28,133,26,"data"],[125,32,133,30],[125,33,133,31,"tasksCompleted"],[125,47,133,45],[125,51,133,49],[125,52,133,50],[126,12,134,10,"badges"],[126,18,134,16],[126,20,134,18,"data"],[126,24,134,22],[126,25,134,23,"badges"],[126,31,134,29],[126,35,134,33],[126,37,134,35],[127,12,135,10,"lastActiveDate"],[127,26,135,24],[127,28,135,26,"data"],[127,32,135,30],[127,33,135,31,"lastActiveDate"],[127,47,135,45],[127,51,135,49],[128,10,136,8],[128,11,136,9],[128,12,136,10],[130,10,138,8],[131,10,139,8],[131,14,139,12,"data"],[131,18,139,16],[131,19,139,17,"lastActiveDate"],[131,33,139,31],[131,35,139,33],[132,12,140,10],[132,18,140,16,"lastDate"],[132,26,140,24],[132,29,140,27],[132,33,140,31,"Date"],[132,37,140,35],[132,38,140,36,"data"],[132,42,140,40],[132,43,140,41,"lastActiveDate"],[132,57,140,55],[132,58,140,56],[133,12,141,10],[133,18,141,16,"today"],[133,23,141,21],[133,26,141,24],[133,30,141,28,"Date"],[133,34,141,32],[133,35,141,33],[133,36,141,34],[134,12,142,10],[134,18,142,16,"diffTime"],[134,26,142,24],[134,29,142,27,"today"],[134,34,142,32],[134,35,142,33,"getTime"],[134,42,142,40],[134,43,142,41],[134,44,142,42],[134,47,142,45,"lastDate"],[134,55,142,53],[134,56,142,54,"getTime"],[134,63,142,61],[134,64,142,62],[134,65,142,63],[135,12,143,10],[135,18,143,16,"diffDays"],[135,26,143,24],[135,29,143,27,"Math"],[135,33,143,31],[135,34,143,32,"floor"],[135,39,143,37],[135,40,143,38,"diffTime"],[135,48,143,46],[135,52,143,50],[135,56,143,54],[135,59,143,57],[135,61,143,59],[135,64,143,62],[135,66,143,64],[135,69,143,67],[135,71,143,69],[135,72,143,70],[135,73,143,71],[137,12,145,10],[138,12,146,10],[138,16,146,14,"diffDays"],[138,24,146,22],[138,27,146,25],[138,28,146,26],[138,30,146,28],[139,14,147,12],[139,20,147,18,"get"],[139,23,147,21],[139,24,147,22],[139,25,147,23],[139,26,147,24,"breakStreak"],[139,37,147,35],[139,38,147,36],[139,39,147,37],[140,12,148,10],[141,10,149,8],[142,8,150,6],[142,9,150,7],[142,15,150,13],[143,10,151,8],[144,10,152,8,"console"],[144,17,152,15],[144,18,152,16,"log"],[144,21,152,19],[144,22,152,20],[144,71,152,69],[144,72,152,70],[145,10,153,8,"set"],[145,13,153,11],[145,14,153,12,"fallbackState"],[145,27,153,25],[145,28,153,26],[146,8,154,6],[147,6,155,4],[147,7,155,5],[147,8,155,6],[147,15,155,13,"error"],[147,20,155,18],[147,22,155,20],[148,8,156,6,"console"],[148,15,156,13],[148,16,156,14,"error"],[148,21,156,19],[148,22,156,20],[148,49,156,47],[148,51,156,49,"error"],[148,56,156,54],[148,57,156,55],[149,8,157,6],[150,8,158,6,"set"],[150,11,158,9],[150,12,158,10,"fallbackState"],[150,25,158,23],[150,26,158,24],[151,6,159,4],[152,4,160,2],[152,5,160,3],[153,4,162,2],[154,4,163,2,"persistData"],[154,15,163,13],[154,17,163,15],[154,23,163,22,"updatedState"],[154,35,163,54],[154,39,163,59],[155,6,164,4],[155,10,164,8],[156,8,165,6],[157,8,166,6],[157,14,166,12,"storage"],[157,21,166,19],[157,24,166,22,"getAsyncStorage"],[157,39,166,37],[157,40,166,38],[157,41,166,39],[158,8,167,6],[158,12,167,10],[158,13,167,11,"storage"],[158,20,167,18],[158,22,167,20],[159,10,168,8,"console"],[159,17,168,15],[159,18,168,16,"log"],[159,21,168,19],[159,22,168,20],[159,77,168,75],[159,78,168,76],[160,10,169,8],[161,8,170,6],[162,8,172,6],[162,14,172,12,"currentState"],[162,26,172,24],[162,29,172,27,"get"],[162,32,172,30],[162,33,172,31],[162,34,172,32],[163,8,173,6],[163,14,173,12,"dataToStore"],[163,25,173,23],[163,28,173,26],[164,10,174,8,"totalPoints"],[164,21,174,19],[164,23,174,21,"updatedState"],[164,35,174,33],[164,36,174,34,"totalPoints"],[164,47,174,45],[164,51,174,49,"currentState"],[164,63,174,61],[164,64,174,62,"totalPoints"],[164,75,174,73],[165,10,175,8,"currentLevel"],[165,22,175,20],[165,24,175,22,"updatedState"],[165,36,175,34],[165,37,175,35,"currentLevel"],[165,49,175,47],[165,53,175,51,"currentState"],[165,65,175,63],[165,66,175,64,"currentLevel"],[165,78,175,76],[166,10,176,8,"currentStreak"],[166,23,176,21],[166,25,176,23,"updatedState"],[166,37,176,35],[166,38,176,36,"currentStreak"],[166,51,176,49],[166,55,176,53,"currentState"],[166,67,176,65],[166,68,176,66,"currentStreak"],[166,81,176,79],[167,10,177,8,"longestStreak"],[167,23,177,21],[167,25,177,23,"updatedState"],[167,37,177,35],[167,38,177,36,"longestStreak"],[167,51,177,49],[167,55,177,53,"currentState"],[167,67,177,65],[167,68,177,66,"longestStreak"],[167,81,177,79],[168,10,178,8,"tasksCompleted"],[168,24,178,22],[168,26,178,24,"updatedState"],[168,38,178,36],[168,39,178,37,"tasksCompleted"],[168,53,178,51],[168,57,178,55,"currentState"],[168,69,178,67],[168,70,178,68,"tasksCompleted"],[168,84,178,82],[169,10,179,8,"badges"],[169,16,179,14],[169,18,179,16,"updatedState"],[169,30,179,28],[169,31,179,29,"badges"],[169,37,179,35],[169,41,179,39,"currentState"],[169,53,179,51],[169,54,179,52,"badges"],[169,60,179,58],[170,10,180,8,"lastActiveDate"],[170,24,180,22],[170,26,180,24,"updatedState"],[170,38,180,36],[170,39,180,37,"lastActiveDate"],[170,53,180,51],[170,57,180,55,"currentState"],[170,69,180,67],[170,70,180,68,"lastActiveDate"],[170,84,180,82],[170,88,180,86],[170,92,180,90,"Date"],[170,96,180,94],[170,97,180,95],[170,98,180,96],[170,99,180,97,"toISOString"],[170,110,180,108],[170,111,180,109],[171,8,181,6],[171,9,181,7],[172,8,183,6],[172,14,183,12,"storage"],[172,21,183,19],[172,22,183,20,"setItem"],[172,29,183,27],[172,30,183,28,"STORAGE_KEY"],[172,41,183,39],[172,43,183,41,"JSON"],[172,47,183,45],[172,48,183,46,"stringify"],[172,57,183,55],[172,58,183,56,"dataToStore"],[172,69,183,67],[172,70,183,68],[172,71,183,69],[173,6,184,4],[173,7,184,5],[173,8,184,6],[173,15,184,13,"error"],[173,20,184,18],[173,22,184,20],[174,8,185,6,"console"],[174,15,185,13],[174,16,185,14,"error"],[174,21,185,19],[174,22,185,20],[174,52,185,50],[174,54,185,52,"error"],[174,59,185,57],[174,60,185,58],[175,6,186,4],[176,4,187,2],[176,5,187,3],[177,4,189,2],[178,4,190,2,"addExperience"],[178,17,190,15],[178,19,190,17],[178,25,190,24,"points"],[178,31,190,38],[178,35,190,43],[179,6,191,4],[179,12,191,10,"state"],[179,17,191,15],[179,20,191,18,"get"],[179,23,191,21],[179,24,191,22],[179,25,191,23],[180,6,192,4],[180,12,192,10,"newPoints"],[180,21,192,19],[180,24,192,22,"state"],[180,29,192,27],[180,30,192,28,"totalPoints"],[180,41,192,39],[180,44,192,42,"points"],[180,50,192,48],[182,6,194,4],[183,6,195,4],[183,10,195,8,"newLevel"],[183,18,195,16],[183,21,195,19,"state"],[183,26,195,24],[183,27,195,25,"currentLevel"],[183,39,195,37],[184,6,196,4],[184,13,196,11,"newLevel"],[184,21,196,19],[184,24,196,22,"LEVEL_THRESHOLDS"],[184,40,196,38],[184,41,196,39,"length"],[184,47,196,45],[184,50,196,48],[184,51,196,49],[184,55,196,53,"newPoints"],[184,64,196,62],[184,68,196,66,"LEVEL_THRESHOLDS"],[184,84,196,82],[184,85,196,83,"newLevel"],[184,93,196,91],[184,94,196,92],[184,96,196,94],[185,8,197,6,"newLevel"],[185,16,197,14],[185,18,197,16],[186,6,198,4],[187,6,200,4],[187,12,200,10,"leveledUp"],[187,21,200,19],[187,24,200,22,"newLevel"],[187,32,200,30],[187,35,200,33,"state"],[187,40,200,38],[187,41,200,39,"currentLevel"],[187,53,200,51],[189,6,202,4],[190,6,203,4],[190,12,203,10,"updatedState"],[190,24,203,22],[190,27,203,25],[191,8,204,6,"totalPoints"],[191,19,204,17],[191,21,204,19,"newPoints"],[191,30,204,28],[192,8,205,6,"currentLevel"],[192,20,205,18],[192,22,205,20,"newLevel"],[193,6,206,4],[193,7,206,5],[194,6,208,4,"set"],[194,9,208,7],[194,10,208,8,"updatedState"],[194,22,208,20],[194,23,208,21],[196,6,210,4],[197,6,211,4],[197,12,211,11,"get"],[197,15,211,14],[197,16,211,15],[197,17,211,16],[197,18,211,25,"persistData"],[197,29,211,36],[197,30,211,37,"updatedState"],[197,42,211,49],[197,43,211,50],[199,6,213,4],[200,6,214,4],[200,10,214,8,"leveledUp"],[200,19,214,17],[200,21,214,19],[201,8,215,6],[201,14,215,12],[201,18,215,12,"levelUp"],[201,38,215,19],[201,39,215,19,"levelUp"],[201,46,215,19],[201,48,215,20],[201,49,215,21],[203,8,217,6],[204,8,218,6],[204,12,218,10,"newLevel"],[204,20,218,18],[204,25,218,23],[204,26,218,24],[204,28,218,26],[205,10,219,8],[205,16,219,14,"get"],[205,19,219,17],[205,20,219,18],[205,21,219,19],[205,22,219,20,"addBadge"],[205,30,219,28],[205,31,219,29,"AVAILABLE_BADGES"],[205,47,219,45],[205,48,219,46,"ROMANCE_EXPERT"],[205,62,219,60],[205,63,219,61],[206,8,220,6],[206,9,220,7],[206,15,220,13],[206,19,220,17,"newLevel"],[206,27,220,25],[206,32,220,30],[206,34,220,32],[206,36,220,34],[207,10,221,8],[207,16,221,14,"get"],[207,19,221,17],[207,20,221,18],[207,21,221,19],[207,22,221,20,"addBadge"],[207,30,221,28],[207,31,221,29,"AVAILABLE_BADGES"],[207,47,221,45],[207,48,221,46,"LOVE_GURU"],[207,57,221,55],[207,58,221,56],[208,8,222,6],[208,9,222,7],[208,15,222,13],[208,19,222,17,"newLevel"],[208,27,222,25],[208,32,222,30],[208,34,222,32],[208,36,222,34],[209,10,223,8],[209,16,223,14,"get"],[209,19,223,17],[209,20,223,18],[209,21,223,19],[209,22,223,20,"addBadge"],[209,30,223,28],[209,31,223,29,"AVAILABLE_BADGES"],[209,47,223,45],[209,48,223,46,"RELATIONSHIP_CHAMPION"],[209,69,223,67],[209,70,223,68],[210,8,224,6],[211,6,225,4],[213,6,227,4],[214,6,228,4],[214,10,228,8,"newPoints"],[214,19,228,17],[214,23,228,21],[214,27,228,25],[214,31,228,29],[214,32,228,30,"state"],[214,37,228,35],[214,38,228,36,"badges"],[214,44,228,42],[214,45,228,43,"includes"],[214,53,228,51],[214,54,228,52,"AVAILABLE_BADGES"],[214,70,228,68],[214,71,228,69,"POINTS_MASTER"],[214,84,228,82],[214,85,228,83],[214,87,228,85],[215,8,229,6],[215,14,229,12,"get"],[215,17,229,15],[215,18,229,16],[215,19,229,17],[215,20,229,18,"addBadge"],[215,28,229,26],[215,29,229,27,"AVAILABLE_BADGES"],[215,45,229,43],[215,46,229,44,"POINTS_MASTER"],[215,59,229,57],[215,60,229,58],[216,6,230,4],[217,4,231,2],[217,5,231,3],[218,4,233,2],[219,4,234,2,"completeTask"],[219,16,234,14],[219,18,234,16],[219,24,234,23,"taskPoints"],[219,34,234,41],[219,38,234,46],[220,6,235,4],[220,12,235,10,"state"],[220,17,235,15],[220,20,235,18,"get"],[220,23,235,21],[220,24,235,22],[220,25,235,23],[221,6,236,4],[221,12,236,10,"newTasksCompleted"],[221,29,236,27],[221,32,236,30,"state"],[221,37,236,35],[221,38,236,36,"tasksCompleted"],[221,52,236,50],[221,55,236,53],[221,56,236,54],[223,6,238,4],[224,6,239,4],[224,12,239,10,"updatedState"],[224,24,239,22],[224,27,239,25],[225,8,240,6,"tasksCompleted"],[225,22,240,20],[225,24,240,22,"newTasksCompleted"],[226,6,241,4],[226,7,241,5],[227,6,243,4,"set"],[227,9,243,7],[227,10,243,8,"updatedState"],[227,22,243,20],[227,23,243,21],[229,6,245,4],[230,6,246,4],[230,12,246,10,"get"],[230,15,246,13],[230,16,246,14],[230,17,246,15],[230,18,246,16,"addExperience"],[230,31,246,29],[230,32,246,30,"taskPoints"],[230,42,246,40],[230,43,246,41],[232,6,248,4],[233,6,249,4],[233,12,249,10,"get"],[233,15,249,13],[233,16,249,14],[233,17,249,15],[233,18,249,16,"updateStreak"],[233,30,249,28],[233,31,249,29],[233,32,249,30],[235,6,251,4],[236,6,252,4],[236,12,252,11,"get"],[236,15,252,14],[236,16,252,15],[236,17,252,16],[236,18,252,25,"persistData"],[236,29,252,36],[236,30,252,37,"updatedState"],[236,42,252,49],[236,43,252,50],[238,6,254,4],[239,6,255,4],[239,12,255,10],[239,16,255,10,"taskComplete"],[239,36,255,22],[239,37,255,22,"taskComplete"],[239,49,255,22],[239,51,255,23],[239,52,255,24],[241,6,257,4],[242,6,258,4],[242,10,258,8,"newTasksCompleted"],[242,27,258,25],[242,32,258,30],[242,33,258,31],[242,35,258,33],[243,8,259,6],[243,14,259,12,"get"],[243,17,259,15],[243,18,259,16],[243,19,259,17],[243,20,259,18,"addBadge"],[243,28,259,26],[243,29,259,27,"AVAILABLE_BADGES"],[243,45,259,43],[243,46,259,44,"FIRST_TASK"],[243,56,259,54],[243,57,259,55],[244,6,260,4],[244,7,260,5],[244,13,260,11],[244,17,260,15,"newTasksCompleted"],[244,34,260,32],[244,39,260,37],[244,42,260,40],[244,44,260,42],[245,8,261,6],[245,14,261,12,"get"],[245,17,261,15],[245,18,261,16],[245,19,261,17],[245,20,261,18,"addBadge"],[245,28,261,26],[245,29,261,27,"AVAILABLE_BADGES"],[245,45,261,43],[245,46,261,44,"HUNDRED_CLUB"],[245,58,261,56],[245,59,261,57],[246,6,262,4],[247,4,263,2],[247,5,263,3],[248,4,265,2],[249,4,266,2,"updateStreak"],[249,16,266,14],[249,18,266,16],[249,24,266,16,"updateStreak"],[249,25,266,16],[249,30,266,28],[250,6,267,4],[250,12,267,10,"state"],[250,17,267,15],[250,20,267,18,"get"],[250,23,267,21],[250,24,267,22],[250,25,267,23],[251,6,268,4],[251,12,268,10,"today"],[251,17,268,15],[251,20,268,18],[251,24,268,22,"Date"],[251,28,268,26],[251,29,268,27],[251,30,268,28],[252,6,269,4],[252,12,269,10,"todayString"],[252,23,269,21],[252,26,269,24,"today"],[252,31,269,29],[252,32,269,30,"toDateString"],[252,44,269,42],[252,45,269,43],[252,46,269,44],[254,6,271,4],[255,6,272,4],[255,10,272,8],[255,11,272,9,"state"],[255,16,272,14],[255,17,272,15,"lastActiveDate"],[255,31,272,29],[255,33,272,31],[256,8,273,6],[256,14,273,12,"updatedState"],[256,26,273,24],[256,29,273,27],[257,10,274,8,"currentStreak"],[257,23,274,21],[257,25,274,23],[257,26,274,24],[258,10,275,8,"longestStreak"],[258,23,275,21],[258,25,275,23,"Math"],[258,29,275,27],[258,30,275,28,"max"],[258,33,275,31],[258,34,275,32],[258,35,275,33],[258,37,275,35,"state"],[258,42,275,40],[258,43,275,41,"longestStreak"],[258,56,275,54],[258,57,275,55],[259,10,276,8,"lastActiveDate"],[259,24,276,22],[259,26,276,24,"today"],[259,31,276,29],[259,32,276,30,"toISOString"],[259,43,276,41],[259,44,276,42],[260,8,277,6],[260,9,277,7],[261,8,279,6,"set"],[261,11,279,9],[261,12,279,10,"updatedState"],[261,24,279,22],[261,25,279,23],[262,8,280,6],[262,14,280,13,"get"],[262,17,280,16],[262,18,280,17],[262,19,280,18],[262,20,280,27,"persistData"],[262,31,280,38],[262,32,280,39,"updatedState"],[262,44,280,51],[262,45,280,52],[264,8,282,6],[265,8,283,6],[265,12,283,10,"state"],[265,17,283,15],[265,18,283,16,"currentStreak"],[265,31,283,29],[265,36,283,34],[265,37,283,35],[265,39,283,37],[266,10,284,8],[266,16,284,14,"get"],[266,19,284,17],[266,20,284,18],[266,21,284,19],[266,22,284,20,"addBadge"],[266,30,284,28],[266,31,284,29,"AVAILABLE_BADGES"],[266,47,284,45],[266,48,284,46,"FIRST_TASK"],[266,58,284,56],[266,59,284,57],[267,8,285,6],[268,8,286,6],[269,6,287,4],[270,6,289,4],[270,12,289,10,"lastActiveDate"],[270,26,289,24],[270,29,289,27],[270,33,289,31,"Date"],[270,37,289,35],[270,38,289,36,"state"],[270,43,289,41],[270,44,289,42,"lastActiveDate"],[270,58,289,56],[270,59,289,57],[271,6,290,4],[271,12,290,10,"lastActiveDateString"],[271,32,290,30],[271,35,290,33,"lastActiveDate"],[271,49,290,47],[271,50,290,48,"toDateString"],[271,62,290,60],[271,63,290,61],[271,64,290,62],[273,6,292,4],[274,6,293,4],[274,10,293,8,"lastActiveDateString"],[274,30,293,28],[274,35,293,33,"todayString"],[274,46,293,44],[274,48,293,46],[275,8,294,6],[276,6,295,4],[278,6,297,4],[279,6,298,4],[279,12,298,10,"diffTime"],[279,20,298,18],[279,23,298,21,"today"],[279,28,298,26],[279,29,298,27,"getTime"],[279,36,298,34],[279,37,298,35],[279,38,298,36],[279,41,298,39,"lastActiveDate"],[279,55,298,53],[279,56,298,54,"getTime"],[279,63,298,61],[279,64,298,62],[279,65,298,63],[280,6,299,4],[280,12,299,10,"diffDays"],[280,20,299,18],[280,23,299,21,"Math"],[280,27,299,25],[280,28,299,26,"floor"],[280,33,299,31],[280,34,299,32,"diffTime"],[280,42,299,40],[280,46,299,44],[280,50,299,48],[280,53,299,51],[280,55,299,53],[280,58,299,56],[280,60,299,58],[280,63,299,61],[280,65,299,63],[280,66,299,64],[280,67,299,65],[281,6,301,4],[281,10,301,8,"newStreak"],[281,19,301,17],[282,6,302,4],[282,10,302,8,"newLongestStreak"],[282,26,302,24],[283,6,304,4],[283,10,304,8,"diffDays"],[283,18,304,16],[283,23,304,21],[283,24,304,22],[283,26,304,24],[284,8,305,6],[285,8,306,6,"newStreak"],[285,17,306,15],[285,20,306,18,"state"],[285,25,306,23],[285,26,306,24,"currentStreak"],[285,39,306,37],[285,42,306,40],[285,43,306,41],[286,8,307,6,"newLongestStreak"],[286,24,307,22],[286,27,307,25,"Math"],[286,31,307,29],[286,32,307,30,"max"],[286,35,307,33],[286,36,307,34,"newStreak"],[286,45,307,43],[286,47,307,45,"state"],[286,52,307,50],[286,53,307,51,"longestStreak"],[286,66,307,64],[286,67,307,65],[287,6,308,4],[287,7,308,5],[287,13,308,11],[287,17,308,15,"diffDays"],[287,25,308,23],[287,28,308,26],[287,29,308,27],[287,31,308,29],[288,8,309,6],[289,8,310,6,"newStreak"],[289,17,310,15],[289,20,310,18],[289,21,310,19],[290,8,311,6,"newLongestStreak"],[290,24,311,22],[290,27,311,25,"state"],[290,32,311,30],[290,33,311,31,"longestStreak"],[290,46,311,44],[290,47,311,45],[290,48,311,46],[291,6,312,4],[291,7,312,5],[291,13,312,11],[292,8,313,6],[293,8,314,6],[294,6,315,4],[295,6,317,4],[295,12,317,10,"updatedState"],[295,24,317,22],[295,27,317,25],[296,8,318,6,"currentStreak"],[296,21,318,19],[296,23,318,21,"newStreak"],[296,32,318,30],[297,8,319,6,"longestStreak"],[297,21,319,19],[297,23,319,21,"newLongestStreak"],[297,39,319,37],[298,8,320,6,"lastActiveDate"],[298,22,320,20],[298,24,320,22,"today"],[298,29,320,27],[298,30,320,28,"toISOString"],[298,41,320,39],[298,42,320,40],[299,6,321,4],[299,7,321,5],[300,6,323,4,"set"],[300,9,323,7],[300,10,323,8,"updatedState"],[300,22,323,20],[300,23,323,21],[302,6,325,4],[303,6,326,4],[303,12,326,11,"get"],[303,15,326,14],[303,16,326,15],[303,17,326,16],[303,18,326,25,"persistData"],[303,29,326,36],[303,30,326,37,"updatedState"],[303,42,326,49],[303,43,326,50],[305,6,328,4],[306,6,329,4],[306,10,329,8,"newStreak"],[306,19,329,17],[306,24,329,22],[306,25,329,23],[306,27,329,25],[307,8,330,6],[307,14,330,12,"get"],[307,17,330,15],[307,18,330,16],[307,19,330,17],[307,20,330,18,"addBadge"],[307,28,330,26],[307,29,330,27,"AVAILABLE_BADGES"],[307,45,330,43],[307,46,330,44,"WEEK_WARRIOR"],[307,58,330,56],[307,59,330,57],[308,6,331,4],[308,7,331,5],[308,13,331,11],[308,17,331,15,"newStreak"],[308,26,331,24],[308,31,331,29],[308,33,331,31],[308,35,331,33],[309,8,332,6],[309,14,332,12,"get"],[309,17,332,15],[309,18,332,16],[309,19,332,17],[309,20,332,18,"addBadge"],[309,28,332,26],[309,29,332,27,"AVAILABLE_BADGES"],[309,45,332,43],[309,46,332,44,"MONTH_MASTER"],[309,58,332,56],[309,59,332,57],[310,6,333,4],[310,7,333,5],[310,13,333,11],[310,17,333,15,"newStreak"],[310,26,333,24],[310,31,333,29],[310,33,333,31],[310,35,333,33],[311,8,334,6],[311,14,334,12,"get"],[311,17,334,15],[311,18,334,16],[311,19,334,17],[311,20,334,18,"addBadge"],[311,28,334,26],[311,29,334,27,"AVAILABLE_BADGES"],[311,45,334,43],[311,46,334,44,"STREAK_LEGEND"],[311,59,334,57],[311,60,334,58],[312,6,335,4],[313,4,336,2],[313,5,336,3],[314,4,338,2],[315,4,339,2,"breakStreak"],[315,15,339,13],[315,17,339,15],[315,23,339,15,"breakStreak"],[315,24,339,15],[315,29,339,27],[316,6,340,4],[316,12,340,10,"updatedState"],[316,24,340,22],[316,27,340,25],[317,8,341,6,"currentStreak"],[317,21,341,19],[317,23,341,21],[318,6,342,4],[318,7,342,5],[319,6,344,4,"set"],[319,9,344,7],[319,10,344,8,"updatedState"],[319,22,344,20],[319,23,344,21],[320,6,345,4],[320,12,345,11,"get"],[320,15,345,14],[320,16,345,15],[320,17,345,16],[320,18,345,25,"persistData"],[320,29,345,36],[320,30,345,37,"updatedState"],[320,42,345,49],[320,43,345,50],[321,4,346,2],[321,5,346,3],[322,4,348,2],[323,4,349,2,"addBadge"],[323,12,349,10],[323,14,349,12],[323,20,349,19,"badge"],[323,25,349,32],[323,29,349,37],[324,6,350,4],[324,12,350,10,"state"],[324,17,350,15],[324,20,350,18,"get"],[324,23,350,21],[324,24,350,22],[324,25,350,23],[325,6,352,4],[325,10,352,8],[325,11,352,9,"state"],[325,16,352,14],[325,17,352,15,"badges"],[325,23,352,21],[325,24,352,22,"includes"],[325,32,352,30],[325,33,352,31,"badge"],[325,38,352,36],[325,39,352,37],[325,41,352,39],[326,8,353,6],[326,14,353,12,"updatedState"],[326,26,353,24],[326,29,353,27],[327,10,354,8,"badges"],[327,16,354,14],[327,18,354,16],[327,19,354,17],[327,22,354,20,"state"],[327,27,354,25],[327,28,354,26,"badges"],[327,34,354,32],[327,36,354,34,"badge"],[327,41,354,39],[328,8,355,6],[328,9,355,7],[329,8,357,6,"set"],[329,11,357,9],[329,12,357,10,"updatedState"],[329,24,357,22],[329,25,357,23],[330,8,358,6],[330,14,358,13,"get"],[330,17,358,16],[330,18,358,17],[330,19,358,18],[330,20,358,27,"persistData"],[330,31,358,38],[330,32,358,39,"updatedState"],[330,44,358,51],[330,45,358,52],[332,8,360,6],[333,8,361,6],[333,14,361,12],[333,18,361,12,"achievement"],[333,38,361,23],[333,39,361,23,"achievement"],[333,50,361,23],[333,52,361,24],[333,53,361,25],[334,6,362,4],[335,4,363,2],[335,5,363,3],[336,4,365,2],[337,4,366,2,"resetProgress"],[337,17,366,15],[337,19,366,17],[337,25,366,17,"resetProgress"],[337,26,366,17],[337,31,366,29],[338,6,367,4],[338,12,367,10,"resetState"],[338,22,367,20],[338,25,367,23],[339,8,368,6,"totalPoints"],[339,19,368,17],[339,21,368,19],[339,22,368,20],[340,8,369,6,"currentLevel"],[340,20,369,18],[340,22,369,20],[340,23,369,21],[341,8,370,6,"currentStreak"],[341,21,370,19],[341,23,370,21],[341,24,370,22],[342,8,371,6,"longestStreak"],[342,21,371,19],[342,23,371,21],[342,24,371,22],[343,8,372,6,"tasksCompleted"],[343,22,372,20],[343,24,372,22],[343,25,372,23],[344,8,373,6,"badges"],[344,14,373,12],[344,16,373,14],[344,18,373,16],[345,8,374,6,"lastActiveDate"],[345,22,374,20],[345,24,374,22],[346,6,375,4],[346,7,375,5],[347,6,377,4,"set"],[347,9,377,7],[347,10,377,8,"resetState"],[347,20,377,18],[347,21,377,19],[349,6,379,4],[350,6,380,4],[350,10,380,8],[351,8,381,6],[352,8,382,6],[352,14,382,12,"storage"],[352,21,382,19],[352,24,382,22,"getAsyncStorage"],[352,39,382,37],[352,40,382,38],[352,41,382,39],[353,8,383,6],[353,12,383,10,"storage"],[353,19,383,17],[353,21,383,19],[354,10,384,8],[354,16,384,14,"storage"],[354,23,384,21],[354,24,384,22,"removeItem"],[354,34,384,32],[354,35,384,33,"STORAGE_KEY"],[354,46,384,44],[354,47,384,45],[355,8,385,6],[355,9,385,7],[355,15,385,13],[356,10,386,8,"console"],[356,17,386,15],[356,18,386,16,"log"],[356,21,386,19],[356,22,386,20],[356,74,386,72],[356,75,386,73],[357,8,387,6],[358,6,388,4],[358,7,388,5],[358,8,388,6],[358,15,388,13,"error"],[358,20,388,18],[358,22,388,20],[359,8,389,6,"console"],[359,15,389,13],[359,16,389,14,"error"],[359,21,389,19],[359,22,389,20],[359,50,389,48],[359,52,389,50,"error"],[359,57,389,55],[359,58,389,56],[360,6,390,4],[361,4,391,2],[361,5,391,3],[362,4,393,2],[363,4,394,2,"getExperienceForNextLevel"],[363,29,394,27],[363,31,394,29,"getExperienceForNextLevel"],[363,32,394,29],[363,37,394,35],[364,6,395,4],[364,12,395,10,"state"],[364,17,395,15],[364,20,395,18,"get"],[364,23,395,21],[364,24,395,22],[364,25,395,23],[365,6,396,4],[365,10,396,8,"state"],[365,15,396,13],[365,16,396,14,"currentLevel"],[365,28,396,26],[365,32,396,30,"LEVEL_THRESHOLDS"],[365,48,396,46],[365,49,396,47,"length"],[365,55,396,53],[365,58,396,56],[365,59,396,57],[365,61,396,59],[366,8,397,6],[366,15,397,13],[366,16,397,14],[366,17,397,15],[366,18,397,16],[367,6,398,4],[368,6,399,4],[368,13,399,11,"LEVEL_THRESHOLDS"],[368,29,399,27],[368,30,399,28,"state"],[368,35,399,33],[368,36,399,34,"currentLevel"],[368,48,399,46],[368,49,399,47],[368,52,399,50,"state"],[368,57,399,55],[368,58,399,56,"totalPoints"],[368,69,399,67],[369,4,400,2],[369,5,400,3],[370,4,402,2,"getProgressPercentage"],[370,25,402,23],[370,27,402,25,"getProgressPercentage"],[370,28,402,25],[370,33,402,31],[371,6,403,4],[371,12,403,10,"state"],[371,17,403,15],[371,20,403,18,"get"],[371,23,403,21],[371,24,403,22],[371,25,403,23],[372,6,404,4],[372,10,404,8,"state"],[372,15,404,13],[372,16,404,14,"currentLevel"],[372,28,404,26],[372,32,404,30,"LEVEL_THRESHOLDS"],[372,48,404,46],[372,49,404,47,"length"],[372,55,404,53],[372,58,404,56],[372,59,404,57],[372,61,404,59],[373,8,405,6],[373,15,405,13],[373,18,405,16],[373,19,405,17],[373,20,405,18],[374,6,406,4],[375,6,408,4],[375,12,408,10,"currentLevelStart"],[375,29,408,27],[375,32,408,30,"LEVEL_THRESHOLDS"],[375,48,408,46],[375,49,408,47,"state"],[375,54,408,52],[375,55,408,53,"currentLevel"],[375,67,408,65],[375,70,408,68],[375,71,408,69],[375,72,408,70],[376,6,409,4],[376,12,409,10,"nextLevelStart"],[376,26,409,24],[376,29,409,27,"LEVEL_THRESHOLDS"],[376,45,409,43],[376,46,409,44,"state"],[376,51,409,49],[376,52,409,50,"currentLevel"],[376,64,409,62],[376,65,409,63],[377,6,410,4],[377,12,410,10,"currentProgress"],[377,27,410,25],[377,30,410,28,"state"],[377,35,410,33],[377,36,410,34,"totalPoints"],[377,47,410,45],[377,50,410,48,"currentLevelStart"],[377,67,410,65],[378,6,411,4],[378,12,411,10,"totalNeeded"],[378,23,411,21],[378,26,411,24,"nextLevelStart"],[378,40,411,38],[378,43,411,41,"currentLevelStart"],[378,60,411,58],[379,6,413,4],[379,13,413,11,"Math"],[379,17,413,15],[379,18,413,16,"floor"],[379,23,413,21],[379,24,413,23,"currentProgress"],[379,39,413,38],[379,42,413,41,"totalNeeded"],[379,53,413,52],[379,56,413,56],[379,59,413,59],[379,60,413,60],[380,4,414,2],[380,5,414,3],[381,4,416,2,"shouldLevelUp"],[381,17,416,15],[381,19,416,17,"shouldLevelUp"],[381,20,416,17],[381,25,416,23],[382,6,417,4],[382,12,417,10,"state"],[382,17,417,15],[382,20,417,18,"get"],[382,23,417,21],[382,24,417,22],[382,25,417,23],[383,6,418,4],[383,13,418,11,"state"],[383,18,418,16],[383,19,418,17,"currentLevel"],[383,31,418,29],[383,34,418,32,"LEVEL_THRESHOLDS"],[383,50,418,48],[383,51,418,49,"length"],[383,57,418,55],[383,60,418,58],[383,61,418,59],[383,65,419,11,"state"],[383,70,419,16],[383,71,419,17,"totalPoints"],[383,82,419,28],[383,86,419,32,"LEVEL_THRESHOLDS"],[383,102,419,48],[383,103,419,49,"state"],[383,108,419,54],[383,109,419,55,"currentLevel"],[383,121,419,67],[383,122,419,68],[384,4,420,2],[385,2,421,0],[385,3,421,1],[385,4,421,2],[385,5,421,3],[387,2,423,0],[388,0,423,0],[388,3]],"functionMap":{"names":["<global>","getAsyncStorage","calculateLevelUpPoints","generateLevelThresholds","create$argument_0","loadPersistedData","persistData","addExperience","completeTask","updateStreak","breakStreak","addBadge","resetProgress","getExperienceForNextLevel","getProgressPercentage","shouldLevelUp"],"mappings":"AAA;wBCO;CDuB;+BE+B;CFE;gCGG;CHM;uCImB;qBCY;GDwD;eEG;GFwB;iBGG;GHyC;gBIG;GJ6B;gBKG;GLsE;eMG;GNO;YOG;GPc;iBQG;GRyB;6BSG;GTM;yBUE;GVY;iBWE;GXI;EJC"},"hasCjsExports":false},"type":"js/module"}]}