{"dependencies":[{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":47,"index":47}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./Crypto.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":48},"end":{"line":2,"column":48,"index":96}}],"key":"t4jPthUJCVssyew/Bvzn4bGBsgM=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  var _expoModulesCore = require(_dependencyMap[0], \"expo-modules-core\");\n  var _CryptoTypes = require(_dependencyMap[1], \"./Crypto.types\");\n  const getCrypto = () => window.crypto ?? window.msCrypto;\n  var _default = {\n    async digestStringAsync(algorithm, data, options) {\n      if (!crypto.subtle) {\n        throw new _expoModulesCore.CodedError('ERR_CRYPTO_UNAVAILABLE', 'Access to the WebCrypto API is restricted to secure origins (localhost/https).');\n      }\n      const encoder = new TextEncoder();\n      const buffer = encoder.encode(data);\n      const hashedData = await crypto.subtle.digest(algorithm, buffer);\n      if (options.encoding === _CryptoTypes.CryptoEncoding.HEX) {\n        return hexString(hashedData);\n      } else if (options.encoding === _CryptoTypes.CryptoEncoding.BASE64) {\n        return btoa(String.fromCharCode(...new Uint8Array(hashedData)));\n      }\n      throw new _expoModulesCore.CodedError('ERR_CRYPTO_DIGEST', 'Invalid encoding type provided.');\n    },\n    getRandomBytes(length) {\n      const array = new Uint8Array(length);\n      return getCrypto().getRandomValues(array);\n    },\n    async getRandomBytesAsync(length) {\n      const array = new Uint8Array(length);\n      return getCrypto().getRandomValues(array);\n    },\n    getRandomValues(typedArray) {\n      return getCrypto().getRandomValues(typedArray);\n    },\n    randomUUID() {\n      return getCrypto().randomUUID();\n    },\n    digestAsync(algorithm, data) {\n      return getCrypto().subtle.digest(algorithm, data);\n    }\n  };\n  function hexString(buffer) {\n    const byteArray = new Uint8Array(buffer);\n    const hexCodes = [...byteArray].map(value => {\n      const hexCode = value.toString(16);\n      const paddedHexCode = hexCode.padStart(2, '0');\n      return paddedHexCode;\n    });\n    return hexCodes.join('');\n  }\n});","lineCount":58,"map":[[7,2,4,0,"Object"],[7,8,4,0],[7,9,4,0,"defineProperty"],[7,23,4,0],[7,24,4,0,"exports"],[7,31,4,0],[8,4,4,0,"enumerable"],[8,14,4,0],[9,4,4,0,"get"],[9,7,4,0],[9,18,4,0,"get"],[9,19,4,0],[10,6,4,0],[10,13,4,0,"_default"],[10,21,4,0],[11,4,4,0],[12,2,4,0],[13,2,1,0],[13,6,1,0,"_expoModulesCore"],[13,22,1,0],[13,25,1,0,"require"],[13,32,1,0],[13,33,1,0,"_dependencyMap"],[13,47,1,0],[14,2,2,0],[14,6,2,0,"_CryptoTypes"],[14,18,2,0],[14,21,2,0,"require"],[14,28,2,0],[14,29,2,0,"_dependencyMap"],[14,43,2,0],[15,2,3,0],[15,8,3,6,"getCrypto"],[15,17,3,15],[15,20,3,18,"getCrypto"],[15,21,3,18],[15,26,3,24,"window"],[15,32,3,30],[15,33,3,31,"crypto"],[15,39,3,37],[15,43,3,41,"window"],[15,49,3,47],[15,50,3,48,"msCrypto"],[15,58,3,56],[16,2,4,0],[16,6,4,0,"_default"],[16,14,4,0],[16,17,4,15],[17,4,5,4],[17,10,5,10,"digestStringAsync"],[17,27,5,27,"digestStringAsync"],[17,28,5,28,"algorithm"],[17,37,5,37],[17,39,5,39,"data"],[17,43,5,43],[17,45,5,45,"options"],[17,52,5,52],[17,54,5,54],[18,6,6,8],[18,10,6,12],[18,11,6,13,"crypto"],[18,17,6,19],[18,18,6,20,"subtle"],[18,24,6,26],[18,26,6,28],[19,8,7,12],[19,14,7,18],[19,18,7,22,"CodedError"],[19,34,7,32],[19,35,7,32,"CodedError"],[19,45,7,32],[19,46,7,33],[19,70,7,57],[19,72,7,59],[19,152,7,139],[19,153,7,140],[20,6,8,8],[21,6,9,8],[21,12,9,14,"encoder"],[21,19,9,21],[21,22,9,24],[21,26,9,28,"TextEncoder"],[21,37,9,39],[21,38,9,40],[21,39,9,41],[22,6,10,8],[22,12,10,14,"buffer"],[22,18,10,20],[22,21,10,23,"encoder"],[22,28,10,30],[22,29,10,31,"encode"],[22,35,10,37],[22,36,10,38,"data"],[22,40,10,42],[22,41,10,43],[23,6,11,8],[23,12,11,14,"hashedData"],[23,22,11,24],[23,25,11,27],[23,31,11,33,"crypto"],[23,37,11,39],[23,38,11,40,"subtle"],[23,44,11,46],[23,45,11,47,"digest"],[23,51,11,53],[23,52,11,54,"algorithm"],[23,61,11,63],[23,63,11,65,"buffer"],[23,69,11,71],[23,70,11,72],[24,6,12,8],[24,10,12,12,"options"],[24,17,12,19],[24,18,12,20,"encoding"],[24,26,12,28],[24,31,12,33,"CryptoEncoding"],[24,43,12,47],[24,44,12,47,"CryptoEncoding"],[24,58,12,47],[24,59,12,48,"HEX"],[24,62,12,51],[24,64,12,53],[25,8,13,12],[25,15,13,19,"hexString"],[25,24,13,28],[25,25,13,29,"hashedData"],[25,35,13,39],[25,36,13,40],[26,6,14,8],[26,7,14,9],[26,13,15,13],[26,17,15,17,"options"],[26,24,15,24],[26,25,15,25,"encoding"],[26,33,15,33],[26,38,15,38,"CryptoEncoding"],[26,50,15,52],[26,51,15,52,"CryptoEncoding"],[26,65,15,52],[26,66,15,53,"BASE64"],[26,72,15,59],[26,74,15,61],[27,8,16,12],[27,15,16,19,"btoa"],[27,19,16,23],[27,20,16,24,"String"],[27,26,16,30],[27,27,16,31,"fromCharCode"],[27,39,16,43],[27,40,16,44],[27,43,16,47],[27,47,16,51,"Uint8Array"],[27,57,16,61],[27,58,16,62,"hashedData"],[27,68,16,72],[27,69,16,73],[27,70,16,74],[27,71,16,75],[28,6,17,8],[29,6,18,8],[29,12,18,14],[29,16,18,18,"CodedError"],[29,32,18,28],[29,33,18,28,"CodedError"],[29,43,18,28],[29,44,18,29],[29,63,18,48],[29,65,18,50],[29,98,18,83],[29,99,18,84],[30,4,19,4],[30,5,19,5],[31,4,20,4,"getRandomBytes"],[31,18,20,18,"getRandomBytes"],[31,19,20,19,"length"],[31,25,20,25],[31,27,20,27],[32,6,21,8],[32,12,21,14,"array"],[32,17,21,19],[32,20,21,22],[32,24,21,26,"Uint8Array"],[32,34,21,36],[32,35,21,37,"length"],[32,41,21,43],[32,42,21,44],[33,6,22,8],[33,13,22,15,"getCrypto"],[33,22,22,24],[33,23,22,25],[33,24,22,26],[33,25,22,27,"getRandomValues"],[33,40,22,42],[33,41,22,43,"array"],[33,46,22,48],[33,47,22,49],[34,4,23,4],[34,5,23,5],[35,4,24,4],[35,10,24,10,"getRandomBytesAsync"],[35,29,24,29,"getRandomBytesAsync"],[35,30,24,30,"length"],[35,36,24,36],[35,38,24,38],[36,6,25,8],[36,12,25,14,"array"],[36,17,25,19],[36,20,25,22],[36,24,25,26,"Uint8Array"],[36,34,25,36],[36,35,25,37,"length"],[36,41,25,43],[36,42,25,44],[37,6,26,8],[37,13,26,15,"getCrypto"],[37,22,26,24],[37,23,26,25],[37,24,26,26],[37,25,26,27,"getRandomValues"],[37,40,26,42],[37,41,26,43,"array"],[37,46,26,48],[37,47,26,49],[38,4,27,4],[38,5,27,5],[39,4,28,4,"getRandomValues"],[39,19,28,19,"getRandomValues"],[39,20,28,20,"typedArray"],[39,30,28,30],[39,32,28,32],[40,6,29,8],[40,13,29,15,"getCrypto"],[40,22,29,24],[40,23,29,25],[40,24,29,26],[40,25,29,27,"getRandomValues"],[40,40,29,42],[40,41,29,43,"typedArray"],[40,51,29,53],[40,52,29,54],[41,4,30,4],[41,5,30,5],[42,4,31,4,"randomUUID"],[42,14,31,14,"randomUUID"],[42,15,31,14],[42,17,31,17],[43,6,32,8],[43,13,32,15,"getCrypto"],[43,22,32,24],[43,23,32,25],[43,24,32,26],[43,25,32,27,"randomUUID"],[43,35,32,37],[43,36,32,38],[43,37,32,39],[44,4,33,4],[44,5,33,5],[45,4,34,4,"digestAsync"],[45,15,34,15,"digestAsync"],[45,16,34,16,"algorithm"],[45,25,34,25],[45,27,34,27,"data"],[45,31,34,31],[45,33,34,33],[46,6,35,8],[46,13,35,15,"getCrypto"],[46,22,35,24],[46,23,35,25],[46,24,35,26],[46,25,35,27,"subtle"],[46,31,35,33],[46,32,35,34,"digest"],[46,38,35,40],[46,39,35,41,"algorithm"],[46,48,35,50],[46,50,35,52,"data"],[46,54,35,56],[46,55,35,57],[47,4,36,4],[48,2,37,0],[48,3,37,1],[49,2,38,0],[49,11,38,9,"hexString"],[49,20,38,18,"hexString"],[49,21,38,19,"buffer"],[49,27,38,25],[49,29,38,27],[50,4,39,4],[50,10,39,10,"byteArray"],[50,19,39,19],[50,22,39,22],[50,26,39,26,"Uint8Array"],[50,36,39,36],[50,37,39,37,"buffer"],[50,43,39,43],[50,44,39,44],[51,4,40,4],[51,10,40,10,"hexCodes"],[51,18,40,18],[51,21,40,21],[51,22,40,22],[51,25,40,25,"byteArray"],[51,34,40,34],[51,35,40,35],[51,36,40,36,"map"],[51,39,40,39],[51,40,40,41,"value"],[51,45,40,46],[51,49,40,51],[52,6,41,8],[52,12,41,14,"hexCode"],[52,19,41,21],[52,22,41,24,"value"],[52,27,41,29],[52,28,41,30,"toString"],[52,36,41,38],[52,37,41,39],[52,39,41,41],[52,40,41,42],[53,6,42,8],[53,12,42,14,"paddedHexCode"],[53,25,42,27],[53,28,42,30,"hexCode"],[53,35,42,37],[53,36,42,38,"padStart"],[53,44,42,46],[53,45,42,47],[53,46,42,48],[53,48,42,50],[53,51,42,53],[53,52,42,54],[54,6,43,8],[54,13,43,15,"paddedHexCode"],[54,26,43,28],[55,4,44,4],[55,5,44,5],[55,6,44,6],[56,4,45,4],[56,11,45,11,"hexCodes"],[56,19,45,19],[56,20,45,20,"join"],[56,24,45,24],[56,25,45,25],[56,27,45,27],[56,28,45,28],[57,2,46,0],[58,0,46,1],[58,3]],"functionMap":{"names":["<global>","getCrypto","default.digestStringAsync","default.getRandomBytes","default.getRandomBytesAsync","default.getRandomValues","default.randomUUID","default.digestAsync","hexString","map$argument_0"],"mappings":"AAA;kBCE,sCD;IEE;KFc;IGC;KHG;IIC;KJG;IKC;KLE;IMC;KNE;IOC;KPE;AQE;wCCE;KDI;CRE"},"hasCjsExports":false},"type":"js/module"}]}