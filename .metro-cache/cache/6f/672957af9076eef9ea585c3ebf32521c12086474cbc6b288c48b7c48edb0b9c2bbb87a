{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"zustand","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":33,"index":33}}],"key":"POPvx7yS3Y3wz+S/9OAefiXNs0Q=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":34},"end":{"line":2,"column":69,"index":103}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"],"imports":1}},{"name":"../utils/HapticsManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":104},"end":{"line":3,"column":77,"index":181}}],"key":"nBdnSRqGBBV35N8QrGTTDbqVGgg=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"AVAILABLE_BADGES\", {\n    enumerable: true,\n    get: function () {\n      return AVAILABLE_BADGES;\n    }\n  });\n  Object.defineProperty(exports, \"useGameStore\", {\n    enumerable: true,\n    get: function () {\n      return useGameStore;\n    }\n  });\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0]);\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _zustand = require(_dependencyMap[1]);\n  var _reactNativeAsyncStorageAsyncStorage = require(_dependencyMap[2]);\n  var AsyncStorage = _interopDefault(_reactNativeAsyncStorageAsyncStorage);\n  var _utilsHapticsManager = require(_dependencyMap[3]);\n  // Level progression: exponential growth\n  var calculateLevelUpPoints = level => {\n    return Math.floor(100 * Math.pow(1.5, level - 1));\n  };\n\n  // Generate level thresholds up to level 50\n  var generateLevelThresholds = () => {\n    var thresholds = [0]; // Level 1 starts at 0\n    for (var i = 1; i <= 50; i++) {\n      thresholds.push(thresholds[i - 1] + calculateLevelUpPoints(i));\n    }\n    return thresholds;\n  };\n  var LEVEL_THRESHOLDS = generateLevelThresholds();\n  var STORAGE_KEY = '@pookie4u_game_data';\n\n  // Available badges\n  var AVAILABLE_BADGES = {\n    FIRST_TASK: 'first_task',\n    WEEK_WARRIOR: 'week_warrior',\n    // 7-day streak\n    MONTH_MASTER: 'month_master',\n    // 30-day streak\n    HUNDRED_CLUB: 'hundred_club',\n    // 100 tasks\n    ROMANCE_EXPERT: 'romance_expert',\n    // Level 5\n    LOVE_GURU: 'love_guru',\n    // Level 10\n    RELATIONSHIP_CHAMPION: 'relationship_champion',\n    // Level 20\n    STREAK_LEGEND: 'streak_legend',\n    // 50-day streak\n    POINTS_MASTER: 'points_master',\n    // 1000 points\n    DEDICATION_AWARD: 'dedication_award' // 100 days active\n  };\n  var useGameStore = (0, _zustand.create)((set, get) => ({\n    // Initial state\n    totalPoints: 0,\n    currentLevel: 1,\n    currentStreak: 0,\n    longestStreak: 0,\n    tasksCompleted: 0,\n    badges: [],\n    lastActiveDate: null,\n    levelUpPoints: LEVEL_THRESHOLDS,\n    // Load persisted data from AsyncStorage\n    loadPersistedData: function () {\n      var _ref = (0, _asyncToGenerator.default)(function* () {\n        try {\n          var stored = yield AsyncStorage.default.getItem(STORAGE_KEY);\n          if (stored) {\n            var data = JSON.parse(stored);\n            set({\n              totalPoints: data.totalPoints || 0,\n              currentLevel: data.currentLevel || 1,\n              currentStreak: data.currentStreak || 0,\n              longestStreak: data.longestStreak || 0,\n              tasksCompleted: data.tasksCompleted || 0,\n              badges: data.badges || [],\n              lastActiveDate: data.lastActiveDate || null\n            });\n\n            // Check if streak should be broken due to inactivity\n            var state = get();\n            if (state.lastActiveDate) {\n              var lastActive = new Date(state.lastActiveDate);\n              var now = new Date();\n              var daysSinceActive = Math.floor((now.getTime() - lastActive.getTime()) / 86400000);\n              if (daysSinceActive > 1 && state.currentStreak > 0) {\n                // Break streak if more than 1 day inactive\n                yield state.breakStreak();\n              }\n            }\n          }\n        } catch (error) {\n          console.error('Failed to load game data:', error);\n        }\n      });\n      return function loadPersistedData() {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    // Persist current state to AsyncStorage\n    persistData: function () {\n      var _ref2 = (0, _asyncToGenerator.default)(function* (updatedState) {\n        try {\n          var currentState = get();\n          var dataToStore = {\n            totalPoints: updatedState.totalPoints ?? currentState.totalPoints,\n            currentLevel: updatedState.currentLevel ?? currentState.currentLevel,\n            currentStreak: updatedState.currentStreak ?? currentState.currentStreak,\n            longestStreak: updatedState.longestStreak ?? currentState.longestStreak,\n            tasksCompleted: updatedState.tasksCompleted ?? currentState.tasksCompleted,\n            badges: updatedState.badges ?? currentState.badges,\n            lastActiveDate: new Date().toISOString()\n          };\n          yield AsyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(dataToStore));\n        } catch (error) {\n          console.error('Failed to persist game data:', error);\n        }\n      });\n      return function persistData(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    // Add experience points with level progression\n    addExperience: function () {\n      var _ref3 = (0, _asyncToGenerator.default)(function* (points) {\n        var state = get();\n        var newPoints = state.totalPoints + points;\n\n        // Calculate new level\n        var newLevel = state.currentLevel;\n        while (newLevel < LEVEL_THRESHOLDS.length - 1 && newPoints >= LEVEL_THRESHOLDS[newLevel]) {\n          newLevel++;\n        }\n        var leveledUp = newLevel > state.currentLevel;\n\n        // Update state\n        var updatedState = {\n          totalPoints: newPoints,\n          currentLevel: newLevel\n        };\n        set(updatedState);\n\n        // Persist immediately\n        yield get().persistData(updatedState);\n\n        // Haptic feedback for level up\n        if (leveledUp) {\n          yield (0, _utilsHapticsManager.levelUp)();\n\n          // Award level-based badges\n          if (newLevel === 5) {\n            yield get().addBadge(AVAILABLE_BADGES.ROMANCE_EXPERT);\n          } else if (newLevel === 10) {\n            yield get().addBadge(AVAILABLE_BADGES.LOVE_GURU);\n          } else if (newLevel === 20) {\n            yield get().addBadge(AVAILABLE_BADGES.RELATIONSHIP_CHAMPION);\n          }\n        }\n\n        // Check for points-based badges\n        if (newPoints >= 1000 && !state.badges.includes(AVAILABLE_BADGES.POINTS_MASTER)) {\n          yield get().addBadge(AVAILABLE_BADGES.POINTS_MASTER);\n        }\n      });\n      return function addExperience(_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    // Complete a task (combines points and task completion)\n    completeTask: function () {\n      var _ref4 = (0, _asyncToGenerator.default)(function* (taskPoints) {\n        var state = get();\n        var newTasksCompleted = state.tasksCompleted + 1;\n\n        // Update state\n        var updatedState = {\n          tasksCompleted: newTasksCompleted\n        };\n        set(updatedState);\n\n        // Add experience points\n        yield get().addExperience(taskPoints);\n\n        // Update streak\n        yield get().updateStreak();\n\n        // Persist task completion\n        yield get().persistData(updatedState);\n\n        // Task completion haptic feedback\n        yield (0, _utilsHapticsManager.taskComplete)();\n\n        // Check for task-based badges\n        if (newTasksCompleted === 1) {\n          yield get().addBadge(AVAILABLE_BADGES.FIRST_TASK);\n        } else if (newTasksCompleted === 100) {\n          yield get().addBadge(AVAILABLE_BADGES.HUNDRED_CLUB);\n        }\n      });\n      return function completeTask(_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }(),\n    // Update daily streak (Snapchat-style)\n    updateStreak: function () {\n      var _ref5 = (0, _asyncToGenerator.default)(function* () {\n        var state = get();\n        var today = new Date();\n        var todayString = today.toDateString();\n\n        // If no last active date, this is the first task - start streak at 1\n        if (!state.lastActiveDate) {\n          var _updatedState = {\n            currentStreak: 1,\n            longestStreak: Math.max(1, state.longestStreak),\n            lastActiveDate: today.toISOString()\n          };\n          set(_updatedState);\n          yield get().persistData(_updatedState);\n\n          // Check for first task badge\n          if (state.currentStreak === 0) {\n            yield get().addBadge(AVAILABLE_BADGES.FIRST_TASK);\n          }\n          return;\n        }\n        var lastActiveDate = new Date(state.lastActiveDate);\n        var lastActiveDateString = lastActiveDate.toDateString();\n\n        // If already updated today, don't update again\n        if (lastActiveDateString === todayString) {\n          return;\n        }\n\n        // Calculate days difference\n        var diffTime = today.getTime() - lastActiveDate.getTime();\n        var diffDays = Math.floor(diffTime / 86400000);\n        var newStreak;\n        var newLongestStreak;\n        if (diffDays === 1) {\n          // Consecutive day - increment streak\n          newStreak = state.currentStreak + 1;\n          newLongestStreak = Math.max(newStreak, state.longestStreak);\n        } else if (diffDays > 1) {\n          // Missed day(s) - reset streak to 1 (starting fresh)\n          newStreak = 1;\n          newLongestStreak = state.longestStreak; // Keep longest streak\n        } else {\n          // Same day (shouldn't happen but safety check)\n          return;\n        }\n        var updatedState = {\n          currentStreak: newStreak,\n          longestStreak: newLongestStreak,\n          lastActiveDate: today.toISOString()\n        };\n        set(updatedState);\n\n        // Persist immediately\n        yield get().persistData(updatedState);\n\n        // Check for streak-based badges\n        if (newStreak === 7) {\n          yield get().addBadge(AVAILABLE_BADGES.WEEK_WARRIOR);\n        } else if (newStreak === 30) {\n          yield get().addBadge(AVAILABLE_BADGES.MONTH_MASTER);\n        } else if (newStreak === 50) {\n          yield get().addBadge(AVAILABLE_BADGES.STREAK_LEGEND);\n        }\n      });\n      return function updateStreak() {\n        return _ref5.apply(this, arguments);\n      };\n    }(),\n    // Break current streak\n    breakStreak: function () {\n      var _ref6 = (0, _asyncToGenerator.default)(function* () {\n        var updatedState = {\n          currentStreak: 0\n        };\n        set(updatedState);\n        yield get().persistData(updatedState);\n      });\n      return function breakStreak() {\n        return _ref6.apply(this, arguments);\n      };\n    }(),\n    // Add a new badge\n    addBadge: function () {\n      var _ref7 = (0, _asyncToGenerator.default)(function* (badge) {\n        var state = get();\n        if (!state.badges.includes(badge)) {\n          var updatedState = {\n            badges: [...state.badges, badge]\n          };\n          set(updatedState);\n          yield get().persistData(updatedState);\n\n          // Achievement haptic feedback\n          yield (0, _utilsHapticsManager.achievement)();\n        }\n      });\n      return function addBadge(_x4) {\n        return _ref7.apply(this, arguments);\n      };\n    }(),\n    // Reset all progress (for testing or account reset)\n    resetProgress: function () {\n      var _ref8 = (0, _asyncToGenerator.default)(function* () {\n        var resetState = {\n          totalPoints: 0,\n          currentLevel: 1,\n          currentStreak: 0,\n          longestStreak: 0,\n          tasksCompleted: 0,\n          badges: [],\n          lastActiveDate: null\n        };\n        set(resetState);\n\n        // Clear from storage\n        try {\n          yield AsyncStorage.default.removeItem(STORAGE_KEY);\n        } catch (error) {\n          console.error('Failed to clear game data:', error);\n        }\n      });\n      return function resetProgress() {\n        return _ref8.apply(this, arguments);\n      };\n    }(),\n    // Computed getters\n    getExperienceForNextLevel: () => {\n      var state = get();\n      if (state.currentLevel >= LEVEL_THRESHOLDS.length - 1) {\n        return 0; // Max level reached\n      }\n      return LEVEL_THRESHOLDS[state.currentLevel] - state.totalPoints;\n    },\n    getProgressPercentage: () => {\n      var state = get();\n      if (state.currentLevel >= LEVEL_THRESHOLDS.length - 1) {\n        return 100; // Max level\n      }\n      var currentLevelStart = LEVEL_THRESHOLDS[state.currentLevel - 1];\n      var nextLevelStart = LEVEL_THRESHOLDS[state.currentLevel];\n      var currentProgress = state.totalPoints - currentLevelStart;\n      var totalNeeded = nextLevelStart - currentLevelStart;\n      return Math.floor(currentProgress / totalNeeded * 100);\n    },\n    shouldLevelUp: () => {\n      var state = get();\n      return state.currentLevel < LEVEL_THRESHOLDS.length - 1 && state.totalPoints >= LEVEL_THRESHOLDS[state.currentLevel];\n    }\n  }));\n\n  // Initialize store on app start\n  useGameStore.getState().loadPersistedData();\n});","lineCount":373,"map":[[12,2,51,0,"Object"],[12,8,51,0],[12,9,51,0,"defineProperty"],[12,23,51,0],[12,24,51,0,"exports"],[12,31,51,0],[13,4,51,0,"enumerable"],[13,14,51,0],[14,4,51,0,"get"],[14,7,51,0],[14,18,51,0,"get"],[14,19,51,0],[15,6,51,0],[15,13,51,0,"AVAILABLE_BADGES"],[15,29,51,0],[16,4,51,0],[17,2,51,0],[18,2,360,0,"Object"],[18,8,360,0],[18,9,360,0,"defineProperty"],[18,23,360,0],[18,24,360,0,"exports"],[18,31,360,0],[19,4,360,0,"enumerable"],[19,14,360,0],[20,4,360,0,"get"],[20,7,360,0],[20,18,360,0,"get"],[20,19,360,0],[21,6,360,0],[21,13,360,9,"useGameStore"],[21,25,360,21],[22,4,360,21],[23,2,360,21],[24,2,360,24],[24,6,360,24,"_babelRuntimeHelpersAsyncToGenerator"],[24,42,360,24],[24,45,360,24,"require"],[24,52,360,24],[24,53,360,24,"_dependencyMap"],[24,67,360,24],[25,2,360,24],[25,6,360,24,"_asyncToGenerator"],[25,23,360,24],[25,26,360,24,"_interopDefault"],[25,41,360,24],[25,42,360,24,"_babelRuntimeHelpersAsyncToGenerator"],[25,78,360,24],[26,2,1,0],[26,6,1,0,"_zustand"],[26,14,1,0],[26,17,1,0,"require"],[26,24,1,0],[26,25,1,0,"_dependencyMap"],[26,39,1,0],[27,2,2,0],[27,6,2,0,"_reactNativeAsyncStorageAsyncStorage"],[27,42,2,0],[27,45,2,0,"require"],[27,52,2,0],[27,53,2,0,"_dependencyMap"],[27,67,2,0],[28,2,2,0],[28,6,2,0,"AsyncStorage"],[28,18,2,0],[28,21,2,0,"_interopDefault"],[28,36,2,0],[28,37,2,0,"_reactNativeAsyncStorageAsyncStorage"],[28,73,2,0],[29,2,3,0],[29,6,3,0,"_utilsHapticsManager"],[29,26,3,0],[29,29,3,0,"require"],[29,36,3,0],[29,37,3,0,"_dependencyMap"],[29,51,3,0],[30,2,33,0],[31,2,34,0],[31,6,34,6,"calculateLevelUpPoints"],[31,28,34,28],[31,31,34,32,"level"],[31,36,34,45],[31,40,34,58],[32,4,35,2],[32,11,35,9,"Math"],[32,15,35,13],[32,16,35,14,"floor"],[32,21,35,19],[32,22,35,20],[32,25,35,23],[32,28,35,26,"Math"],[32,32,35,30],[32,33,35,31,"pow"],[32,36,35,34],[32,37,35,35],[32,40,35,38],[32,42,35,40,"level"],[32,47,35,45],[32,50,35,48],[32,51,35,49],[32,52,35,50],[32,53,35,51],[33,2,36,0],[33,3,36,1],[35,2,38,0],[36,2,39,0],[36,6,39,6,"generateLevelThresholds"],[36,29,39,29],[36,32,39,32,"generateLevelThresholds"],[36,33,39,32],[36,38,39,48],[37,4,40,2],[37,8,40,8,"thresholds"],[37,18,40,18],[37,21,40,21],[37,22,40,22],[37,23,40,23],[37,24,40,24],[37,25,40,25],[37,26,40,26],[38,4,41,2],[38,9,41,7],[38,13,41,11,"i"],[38,14,41,12],[38,17,41,15],[38,18,41,16],[38,20,41,18,"i"],[38,21,41,19],[38,25,41,23],[38,27,41,25],[38,29,41,27,"i"],[38,30,41,28],[38,32,41,30],[38,34,41,32],[39,6,42,4,"thresholds"],[39,16,42,14],[39,17,42,15,"push"],[39,21,42,19],[39,22,42,20,"thresholds"],[39,32,42,30],[39,33,42,31,"i"],[39,34,42,32],[39,37,42,35],[39,38,42,36],[39,39,42,37],[39,42,42,40,"calculateLevelUpPoints"],[39,64,42,62],[39,65,42,63,"i"],[39,66,42,64],[39,67,42,65],[39,68,42,66],[40,4,43,2],[41,4,44,2],[41,11,44,9,"thresholds"],[41,21,44,19],[42,2,45,0],[42,3,45,1],[43,2,47,0],[43,6,47,6,"LEVEL_THRESHOLDS"],[43,22,47,22],[43,25,47,25,"generateLevelThresholds"],[43,48,47,48],[43,49,47,49],[43,50,47,50],[44,2,48,0],[44,6,48,6,"STORAGE_KEY"],[44,17,48,17],[44,20,48,20],[44,41,48,41],[46,2,50,0],[47,2,51,7],[47,6,51,13,"AVAILABLE_BADGES"],[47,22,51,29],[47,25,51,32],[48,4,52,2,"FIRST_TASK"],[48,14,52,12],[48,16,52,14],[48,28,52,26],[49,4,53,2,"WEEK_WARRIOR"],[49,16,53,14],[49,18,53,16],[49,32,53,30],[50,4,53,32],[51,4,54,2,"MONTH_MASTER"],[51,16,54,14],[51,18,54,16],[51,32,54,30],[52,4,54,32],[53,4,55,2,"HUNDRED_CLUB"],[53,16,55,14],[53,18,55,16],[53,32,55,30],[54,4,55,32],[55,4,56,2,"ROMANCE_EXPERT"],[55,18,56,16],[55,20,56,18],[55,36,56,34],[56,4,56,36],[57,4,57,2,"LOVE_GURU"],[57,13,57,11],[57,15,57,13],[57,26,57,24],[58,4,57,26],[59,4,58,2,"RELATIONSHIP_CHAMPION"],[59,25,58,23],[59,27,58,25],[59,50,58,48],[60,4,58,50],[61,4,59,2,"STREAK_LEGEND"],[61,17,59,15],[61,19,59,17],[61,34,59,32],[62,4,59,34],[63,4,60,2,"POINTS_MASTER"],[63,17,60,15],[63,19,60,17],[63,34,60,32],[64,4,60,34],[65,4,61,2,"DEDICATION_AWARD"],[65,20,61,18],[65,22,61,20],[65,40,61,38],[65,41,61,40],[66,2,62,0],[66,3,62,1],[67,2,64,0],[67,6,64,6,"useGameStore"],[67,18,64,18],[67,21,64,21],[67,25,64,21,"create"],[67,33,64,27],[67,34,64,27,"create"],[67,40,64,27],[67,42,64,39],[67,43,64,40,"set"],[67,46,64,43],[67,48,64,45,"get"],[67,51,64,48],[67,57,64,54],[68,4,65,2],[69,4,66,2,"totalPoints"],[69,15,66,13],[69,17,66,15],[69,18,66,16],[70,4,67,2,"currentLevel"],[70,16,67,14],[70,18,67,16],[70,19,67,17],[71,4,68,2,"currentStreak"],[71,17,68,15],[71,19,68,17],[71,20,68,18],[72,4,69,2,"longestStreak"],[72,17,69,15],[72,19,69,17],[72,20,69,18],[73,4,70,2,"tasksCompleted"],[73,18,70,16],[73,20,70,18],[73,21,70,19],[74,4,71,2,"badges"],[74,10,71,8],[74,12,71,10],[74,14,71,12],[75,4,72,2,"lastActiveDate"],[75,18,72,16],[75,20,72,18],[75,24,72,22],[76,4,73,2,"levelUpPoints"],[76,17,73,15],[76,19,73,17,"LEVEL_THRESHOLDS"],[76,35,73,33],[77,4,75,2],[78,4,76,2,"loadPersistedData"],[78,21,76,19],[79,6,76,19],[79,10,76,19,"_ref"],[79,14,76,19],[79,21,76,19,"_asyncToGenerator"],[79,38,76,19],[79,39,76,19,"default"],[79,46,76,19],[79,48,76,21],[79,61,76,33],[80,8,77,4],[80,12,77,8],[81,10,78,6],[81,14,78,12,"stored"],[81,20,78,18],[81,29,78,27,"AsyncStorage"],[81,41,78,39],[81,42,78,39,"default"],[81,49,78,39],[81,50,78,40,"getItem"],[81,57,78,47],[81,58,78,48,"STORAGE_KEY"],[81,69,78,59],[81,70,78,60],[82,10,79,6],[82,14,79,10,"stored"],[82,20,79,16],[82,22,79,18],[83,12,80,8],[83,16,80,14,"data"],[83,20,80,18],[83,23,80,21,"JSON"],[83,27,80,25],[83,28,80,26,"parse"],[83,33,80,31],[83,34,80,32,"stored"],[83,40,80,38],[83,41,80,39],[84,12,81,8,"set"],[84,15,81,11],[84,16,81,12],[85,14,82,10,"totalPoints"],[85,25,82,21],[85,27,82,23,"data"],[85,31,82,27],[85,32,82,28,"totalPoints"],[85,43,82,39],[85,47,82,43],[85,48,82,44],[86,14,83,10,"currentLevel"],[86,26,83,22],[86,28,83,24,"data"],[86,32,83,28],[86,33,83,29,"currentLevel"],[86,45,83,41],[86,49,83,45],[86,50,83,46],[87,14,84,10,"currentStreak"],[87,27,84,23],[87,29,84,25,"data"],[87,33,84,29],[87,34,84,30,"currentStreak"],[87,47,84,43],[87,51,84,47],[87,52,84,48],[88,14,85,10,"longestStreak"],[88,27,85,23],[88,29,85,25,"data"],[88,33,85,29],[88,34,85,30,"longestStreak"],[88,47,85,43],[88,51,85,47],[88,52,85,48],[89,14,86,10,"tasksCompleted"],[89,28,86,24],[89,30,86,26,"data"],[89,34,86,30],[89,35,86,31,"tasksCompleted"],[89,49,86,45],[89,53,86,49],[89,54,86,50],[90,14,87,10,"badges"],[90,20,87,16],[90,22,87,18,"data"],[90,26,87,22],[90,27,87,23,"badges"],[90,33,87,29],[90,37,87,33],[90,39,87,35],[91,14,88,10,"lastActiveDate"],[91,28,88,24],[91,30,88,26,"data"],[91,34,88,30],[91,35,88,31,"lastActiveDate"],[91,49,88,45],[91,53,88,49],[92,12,89,8],[92,13,89,9],[92,14,89,10],[94,12,91,8],[95,12,92,8],[95,16,92,14,"state"],[95,21,92,19],[95,24,92,22,"get"],[95,27,92,25],[95,28,92,26],[95,29,92,27],[96,12,93,8],[96,16,93,12,"state"],[96,21,93,17],[96,22,93,18,"lastActiveDate"],[96,36,93,32],[96,38,93,34],[97,14,94,10],[97,18,94,16,"lastActive"],[97,28,94,26],[97,31,94,29],[97,35,94,33,"Date"],[97,39,94,37],[97,40,94,38,"state"],[97,45,94,43],[97,46,94,44,"lastActiveDate"],[97,60,94,58],[97,61,94,59],[98,14,95,10],[98,18,95,16,"now"],[98,21,95,19],[98,24,95,22],[98,28,95,26,"Date"],[98,32,95,30],[98,33,95,31],[98,34,95,32],[99,14,96,10],[99,18,96,16,"daysSinceActive"],[99,33,96,31],[99,36,96,34,"Math"],[99,40,96,38],[99,41,96,39,"floor"],[99,46,96,44],[99,47,96,45],[99,48,96,46,"now"],[99,51,96,49],[99,52,96,50,"getTime"],[99,59,96,57],[99,60,96,58],[99,61,96,59],[99,64,96,62,"lastActive"],[99,74,96,72],[99,75,96,73,"getTime"],[99,82,96,80],[99,83,96,81],[99,84,96,82],[99,96,96,107],[99,97,96,108],[100,14,98,10],[100,18,98,14,"daysSinceActive"],[100,33,98,29],[100,36,98,32],[100,37,98,33],[100,41,98,37,"state"],[100,46,98,42],[100,47,98,43,"currentStreak"],[100,60,98,56],[100,63,98,59],[100,64,98,60],[100,66,98,62],[101,16,99,12],[102,16,100,12],[102,22,100,18,"state"],[102,27,100,23],[102,28,100,24,"breakStreak"],[102,39,100,35],[102,40,100,36],[102,41,100,37],[103,14,101,10],[104,12,102,8],[105,10,103,6],[106,8,104,4],[106,9,104,5],[106,10,104,6],[106,17,104,13,"error"],[106,22,104,18],[106,24,104,20],[107,10,105,6,"console"],[107,17,105,13],[107,18,105,14,"error"],[107,23,105,19],[107,24,105,20],[107,51,105,47],[107,53,105,49,"error"],[107,58,105,54],[107,59,105,55],[108,8,106,4],[109,6,107,2],[109,7,107,3],[110,6,107,3],[110,22,76,2,"loadPersistedData"],[110,39,76,19,"loadPersistedData"],[110,40,76,19],[111,8,76,19],[111,15,76,19,"_ref"],[111,19,76,19],[111,20,76,19,"apply"],[111,25,76,19],[111,32,76,19,"arguments"],[111,41,76,19],[112,6,76,19],[113,4,76,19],[113,7,107,3],[114,4,109,2],[115,4,110,2,"persistData"],[115,15,110,13],[116,6,110,13],[116,10,110,13,"_ref2"],[116,15,110,13],[116,22,110,13,"_asyncToGenerator"],[116,39,110,13],[116,40,110,13,"default"],[116,47,110,13],[116,49,110,15],[116,60,110,22,"updatedState"],[116,72,110,54],[116,74,110,59],[117,8,111,4],[117,12,111,8],[118,10,112,6],[118,14,112,12,"currentState"],[118,26,112,24],[118,29,112,27,"get"],[118,32,112,30],[118,33,112,31],[118,34,112,32],[119,10,113,6],[119,14,113,12,"dataToStore"],[119,25,113,23],[119,28,113,26],[120,12,114,8,"totalPoints"],[120,23,114,19],[120,25,114,21,"updatedState"],[120,37,114,33],[120,38,114,34,"totalPoints"],[120,49,114,45],[120,53,114,49,"currentState"],[120,65,114,61],[120,66,114,62,"totalPoints"],[120,77,114,73],[121,12,115,8,"currentLevel"],[121,24,115,20],[121,26,115,22,"updatedState"],[121,38,115,34],[121,39,115,35,"currentLevel"],[121,51,115,47],[121,55,115,51,"currentState"],[121,67,115,63],[121,68,115,64,"currentLevel"],[121,80,115,76],[122,12,116,8,"currentStreak"],[122,25,116,21],[122,27,116,23,"updatedState"],[122,39,116,35],[122,40,116,36,"currentStreak"],[122,53,116,49],[122,57,116,53,"currentState"],[122,69,116,65],[122,70,116,66,"currentStreak"],[122,83,116,79],[123,12,117,8,"longestStreak"],[123,25,117,21],[123,27,117,23,"updatedState"],[123,39,117,35],[123,40,117,36,"longestStreak"],[123,53,117,49],[123,57,117,53,"currentState"],[123,69,117,65],[123,70,117,66,"longestStreak"],[123,83,117,79],[124,12,118,8,"tasksCompleted"],[124,26,118,22],[124,28,118,24,"updatedState"],[124,40,118,36],[124,41,118,37,"tasksCompleted"],[124,55,118,51],[124,59,118,55,"currentState"],[124,71,118,67],[124,72,118,68,"tasksCompleted"],[124,86,118,82],[125,12,119,8,"badges"],[125,18,119,14],[125,20,119,16,"updatedState"],[125,32,119,28],[125,33,119,29,"badges"],[125,39,119,35],[125,43,119,39,"currentState"],[125,55,119,51],[125,56,119,52,"badges"],[125,62,119,58],[126,12,120,8,"lastActiveDate"],[126,26,120,22],[126,28,120,24],[126,32,120,28,"Date"],[126,36,120,32],[126,37,120,33],[126,38,120,34],[126,39,120,35,"toISOString"],[126,50,120,46],[126,51,120,47],[127,10,121,6],[127,11,121,7],[128,10,123,6],[128,16,123,12,"AsyncStorage"],[128,28,123,24],[128,29,123,24,"default"],[128,36,123,24],[128,37,123,25,"setItem"],[128,44,123,32],[128,45,123,33,"STORAGE_KEY"],[128,56,123,44],[128,58,123,46,"JSON"],[128,62,123,50],[128,63,123,51,"stringify"],[128,72,123,60],[128,73,123,61,"dataToStore"],[128,84,123,72],[128,85,123,73],[128,86,123,74],[129,8,124,4],[129,9,124,5],[129,10,124,6],[129,17,124,13,"error"],[129,22,124,18],[129,24,124,20],[130,10,125,6,"console"],[130,17,125,13],[130,18,125,14,"error"],[130,23,125,19],[130,24,125,20],[130,54,125,50],[130,56,125,52,"error"],[130,61,125,57],[130,62,125,58],[131,8,126,4],[132,6,127,2],[132,7,127,3],[133,6,127,3],[133,22,110,2,"persistData"],[133,33,110,13,"persistData"],[133,34,110,13,"_x"],[133,36,110,13],[134,8,110,13],[134,15,110,13,"_ref2"],[134,20,110,13],[134,21,110,13,"apply"],[134,26,110,13],[134,33,110,13,"arguments"],[134,42,110,13],[135,6,110,13],[136,4,110,13],[136,7,127,3],[137,4,129,2],[138,4,130,2,"addExperience"],[138,17,130,15],[139,6,130,15],[139,10,130,15,"_ref3"],[139,15,130,15],[139,22,130,15,"_asyncToGenerator"],[139,39,130,15],[139,40,130,15,"default"],[139,47,130,15],[139,49,130,17],[139,60,130,24,"points"],[139,66,130,38],[139,68,130,43],[140,8,131,4],[140,12,131,10,"state"],[140,17,131,15],[140,20,131,18,"get"],[140,23,131,21],[140,24,131,22],[140,25,131,23],[141,8,132,4],[141,12,132,10,"newPoints"],[141,21,132,19],[141,24,132,22,"state"],[141,29,132,27],[141,30,132,28,"totalPoints"],[141,41,132,39],[141,44,132,42,"points"],[141,50,132,48],[143,8,134,4],[144,8,135,4],[144,12,135,8,"newLevel"],[144,20,135,16],[144,23,135,19,"state"],[144,28,135,24],[144,29,135,25,"currentLevel"],[144,41,135,37],[145,8,136,4],[145,15,136,11,"newLevel"],[145,23,136,19],[145,26,136,22,"LEVEL_THRESHOLDS"],[145,42,136,38],[145,43,136,39,"length"],[145,49,136,45],[145,52,136,48],[145,53,136,49],[145,57,136,53,"newPoints"],[145,66,136,62],[145,70,136,66,"LEVEL_THRESHOLDS"],[145,86,136,82],[145,87,136,83,"newLevel"],[145,95,136,91],[145,96,136,92],[145,98,136,94],[146,10,137,6,"newLevel"],[146,18,137,14],[146,20,137,16],[147,8,138,4],[148,8,140,4],[148,12,140,10,"leveledUp"],[148,21,140,19],[148,24,140,22,"newLevel"],[148,32,140,30],[148,35,140,33,"state"],[148,40,140,38],[148,41,140,39,"currentLevel"],[148,53,140,51],[150,8,142,4],[151,8,143,4],[151,12,143,10,"updatedState"],[151,24,143,22],[151,27,143,25],[152,10,144,6,"totalPoints"],[152,21,144,17],[152,23,144,19,"newPoints"],[152,32,144,28],[153,10,145,6,"currentLevel"],[153,22,145,18],[153,24,145,20,"newLevel"],[154,8,146,4],[154,9,146,5],[155,8,148,4,"set"],[155,11,148,7],[155,12,148,8,"updatedState"],[155,24,148,20],[155,25,148,21],[157,8,150,4],[158,8,151,4],[158,14,151,11,"get"],[158,17,151,14],[158,18,151,15],[158,19,151,16],[158,20,151,25,"persistData"],[158,31,151,36],[158,32,151,37,"updatedState"],[158,44,151,49],[158,45,151,50],[160,8,153,4],[161,8,154,4],[161,12,154,8,"leveledUp"],[161,21,154,17],[161,23,154,19],[162,10,155,6],[162,16,155,12],[162,20,155,12,"levelUp"],[162,40,155,19],[162,41,155,19,"levelUp"],[162,48,155,19],[162,50,155,20],[162,51,155,21],[164,10,157,6],[165,10,158,6],[165,14,158,10,"newLevel"],[165,22,158,18],[165,27,158,23],[165,28,158,24],[165,30,158,26],[166,12,159,8],[166,18,159,14,"get"],[166,21,159,17],[166,22,159,18],[166,23,159,19],[166,24,159,20,"addBadge"],[166,32,159,28],[166,33,159,29,"AVAILABLE_BADGES"],[166,49,159,45],[166,50,159,46,"ROMANCE_EXPERT"],[166,64,159,60],[166,65,159,61],[167,10,160,6],[167,11,160,7],[167,17,160,13],[167,21,160,17,"newLevel"],[167,29,160,25],[167,34,160,30],[167,36,160,32],[167,38,160,34],[168,12,161,8],[168,18,161,14,"get"],[168,21,161,17],[168,22,161,18],[168,23,161,19],[168,24,161,20,"addBadge"],[168,32,161,28],[168,33,161,29,"AVAILABLE_BADGES"],[168,49,161,45],[168,50,161,46,"LOVE_GURU"],[168,59,161,55],[168,60,161,56],[169,10,162,6],[169,11,162,7],[169,17,162,13],[169,21,162,17,"newLevel"],[169,29,162,25],[169,34,162,30],[169,36,162,32],[169,38,162,34],[170,12,163,8],[170,18,163,14,"get"],[170,21,163,17],[170,22,163,18],[170,23,163,19],[170,24,163,20,"addBadge"],[170,32,163,28],[170,33,163,29,"AVAILABLE_BADGES"],[170,49,163,45],[170,50,163,46,"RELATIONSHIP_CHAMPION"],[170,71,163,67],[170,72,163,68],[171,10,164,6],[172,8,165,4],[174,8,167,4],[175,8,168,4],[175,12,168,8,"newPoints"],[175,21,168,17],[175,25,168,21],[175,29,168,25],[175,33,168,29],[175,34,168,30,"state"],[175,39,168,35],[175,40,168,36,"badges"],[175,46,168,42],[175,47,168,43,"includes"],[175,55,168,51],[175,56,168,52,"AVAILABLE_BADGES"],[175,72,168,68],[175,73,168,69,"POINTS_MASTER"],[175,86,168,82],[175,87,168,83],[175,89,168,85],[176,10,169,6],[176,16,169,12,"get"],[176,19,169,15],[176,20,169,16],[176,21,169,17],[176,22,169,18,"addBadge"],[176,30,169,26],[176,31,169,27,"AVAILABLE_BADGES"],[176,47,169,43],[176,48,169,44,"POINTS_MASTER"],[176,61,169,57],[176,62,169,58],[177,8,170,4],[178,6,171,2],[178,7,171,3],[179,6,171,3],[179,22,130,2,"addExperience"],[179,35,130,15,"addExperience"],[179,36,130,15,"_x2"],[179,39,130,15],[180,8,130,15],[180,15,130,15,"_ref3"],[180,20,130,15],[180,21,130,15,"apply"],[180,26,130,15],[180,33,130,15,"arguments"],[180,42,130,15],[181,6,130,15],[182,4,130,15],[182,7,171,3],[183,4,173,2],[184,4,174,2,"completeTask"],[184,16,174,14],[185,6,174,14],[185,10,174,14,"_ref4"],[185,15,174,14],[185,22,174,14,"_asyncToGenerator"],[185,39,174,14],[185,40,174,14,"default"],[185,47,174,14],[185,49,174,16],[185,60,174,23,"taskPoints"],[185,70,174,41],[185,72,174,46],[186,8,175,4],[186,12,175,10,"state"],[186,17,175,15],[186,20,175,18,"get"],[186,23,175,21],[186,24,175,22],[186,25,175,23],[187,8,176,4],[187,12,176,10,"newTasksCompleted"],[187,29,176,27],[187,32,176,30,"state"],[187,37,176,35],[187,38,176,36,"tasksCompleted"],[187,52,176,50],[187,55,176,53],[187,56,176,54],[189,8,178,4],[190,8,179,4],[190,12,179,10,"updatedState"],[190,24,179,22],[190,27,179,25],[191,10,180,6,"tasksCompleted"],[191,24,180,20],[191,26,180,22,"newTasksCompleted"],[192,8,181,4],[192,9,181,5],[193,8,183,4,"set"],[193,11,183,7],[193,12,183,8,"updatedState"],[193,24,183,20],[193,25,183,21],[195,8,185,4],[196,8,186,4],[196,14,186,10,"get"],[196,17,186,13],[196,18,186,14],[196,19,186,15],[196,20,186,16,"addExperience"],[196,33,186,29],[196,34,186,30,"taskPoints"],[196,44,186,40],[196,45,186,41],[198,8,188,4],[199,8,189,4],[199,14,189,10,"get"],[199,17,189,13],[199,18,189,14],[199,19,189,15],[199,20,189,16,"updateStreak"],[199,32,189,28],[199,33,189,29],[199,34,189,30],[201,8,191,4],[202,8,192,4],[202,14,192,11,"get"],[202,17,192,14],[202,18,192,15],[202,19,192,16],[202,20,192,25,"persistData"],[202,31,192,36],[202,32,192,37,"updatedState"],[202,44,192,49],[202,45,192,50],[204,8,194,4],[205,8,195,4],[205,14,195,10],[205,18,195,10,"taskComplete"],[205,38,195,22],[205,39,195,22,"taskComplete"],[205,51,195,22],[205,53,195,23],[205,54,195,24],[207,8,197,4],[208,8,198,4],[208,12,198,8,"newTasksCompleted"],[208,29,198,25],[208,34,198,30],[208,35,198,31],[208,37,198,33],[209,10,199,6],[209,16,199,12,"get"],[209,19,199,15],[209,20,199,16],[209,21,199,17],[209,22,199,18,"addBadge"],[209,30,199,26],[209,31,199,27,"AVAILABLE_BADGES"],[209,47,199,43],[209,48,199,44,"FIRST_TASK"],[209,58,199,54],[209,59,199,55],[210,8,200,4],[210,9,200,5],[210,15,200,11],[210,19,200,15,"newTasksCompleted"],[210,36,200,32],[210,41,200,37],[210,44,200,40],[210,46,200,42],[211,10,201,6],[211,16,201,12,"get"],[211,19,201,15],[211,20,201,16],[211,21,201,17],[211,22,201,18,"addBadge"],[211,30,201,26],[211,31,201,27,"AVAILABLE_BADGES"],[211,47,201,43],[211,48,201,44,"HUNDRED_CLUB"],[211,60,201,56],[211,61,201,57],[212,8,202,4],[213,6,203,2],[213,7,203,3],[214,6,203,3],[214,22,174,2,"completeTask"],[214,34,174,14,"completeTask"],[214,35,174,14,"_x3"],[214,38,174,14],[215,8,174,14],[215,15,174,14,"_ref4"],[215,20,174,14],[215,21,174,14,"apply"],[215,26,174,14],[215,33,174,14,"arguments"],[215,42,174,14],[216,6,174,14],[217,4,174,14],[217,7,203,3],[218,4,205,2],[219,4,206,2,"updateStreak"],[219,16,206,14],[220,6,206,14],[220,10,206,14,"_ref5"],[220,15,206,14],[220,22,206,14,"_asyncToGenerator"],[220,39,206,14],[220,40,206,14,"default"],[220,47,206,14],[220,49,206,16],[220,62,206,28],[221,8,207,4],[221,12,207,10,"state"],[221,17,207,15],[221,20,207,18,"get"],[221,23,207,21],[221,24,207,22],[221,25,207,23],[222,8,208,4],[222,12,208,10,"today"],[222,17,208,15],[222,20,208,18],[222,24,208,22,"Date"],[222,28,208,26],[222,29,208,27],[222,30,208,28],[223,8,209,4],[223,12,209,10,"todayString"],[223,23,209,21],[223,26,209,24,"today"],[223,31,209,29],[223,32,209,30,"toDateString"],[223,44,209,42],[223,45,209,43],[223,46,209,44],[225,8,211,4],[226,8,212,4],[226,12,212,8],[226,13,212,9,"state"],[226,18,212,14],[226,19,212,15,"lastActiveDate"],[226,33,212,29],[226,35,212,31],[227,10,213,6],[227,14,213,12,"updatedState"],[227,27,213,24],[227,30,213,27],[228,12,214,8,"currentStreak"],[228,25,214,21],[228,27,214,23],[228,28,214,24],[229,12,215,8,"longestStreak"],[229,25,215,21],[229,27,215,23,"Math"],[229,31,215,27],[229,32,215,28,"max"],[229,35,215,31],[229,36,215,32],[229,37,215,33],[229,39,215,35,"state"],[229,44,215,40],[229,45,215,41,"longestStreak"],[229,58,215,54],[229,59,215,55],[230,12,216,8,"lastActiveDate"],[230,26,216,22],[230,28,216,24,"today"],[230,33,216,29],[230,34,216,30,"toISOString"],[230,45,216,41],[230,46,216,42],[231,10,217,6],[231,11,217,7],[232,10,219,6,"set"],[232,13,219,9],[232,14,219,10,"updatedState"],[232,27,219,22],[232,28,219,23],[233,10,220,6],[233,16,220,13,"get"],[233,19,220,16],[233,20,220,17],[233,21,220,18],[233,22,220,27,"persistData"],[233,33,220,38],[233,34,220,39,"updatedState"],[233,47,220,51],[233,48,220,52],[235,10,222,6],[236,10,223,6],[236,14,223,10,"state"],[236,19,223,15],[236,20,223,16,"currentStreak"],[236,33,223,29],[236,38,223,34],[236,39,223,35],[236,41,223,37],[237,12,224,8],[237,18,224,14,"get"],[237,21,224,17],[237,22,224,18],[237,23,224,19],[237,24,224,20,"addBadge"],[237,32,224,28],[237,33,224,29,"AVAILABLE_BADGES"],[237,49,224,45],[237,50,224,46,"FIRST_TASK"],[237,60,224,56],[237,61,224,57],[238,10,225,6],[239,10,226,6],[240,8,227,4],[241,8,229,4],[241,12,229,10,"lastActiveDate"],[241,26,229,24],[241,29,229,27],[241,33,229,31,"Date"],[241,37,229,35],[241,38,229,36,"state"],[241,43,229,41],[241,44,229,42,"lastActiveDate"],[241,58,229,56],[241,59,229,57],[242,8,230,4],[242,12,230,10,"lastActiveDateString"],[242,32,230,30],[242,35,230,33,"lastActiveDate"],[242,49,230,47],[242,50,230,48,"toDateString"],[242,62,230,60],[242,63,230,61],[242,64,230,62],[244,8,232,4],[245,8,233,4],[245,12,233,8,"lastActiveDateString"],[245,32,233,28],[245,37,233,33,"todayString"],[245,48,233,44],[245,50,233,46],[246,10,234,6],[247,8,235,4],[249,8,237,4],[250,8,238,4],[250,12,238,10,"diffTime"],[250,20,238,18],[250,23,238,21,"today"],[250,28,238,26],[250,29,238,27,"getTime"],[250,36,238,34],[250,37,238,35],[250,38,238,36],[250,41,238,39,"lastActiveDate"],[250,55,238,53],[250,56,238,54,"getTime"],[250,63,238,61],[250,64,238,62],[250,65,238,63],[251,8,239,4],[251,12,239,10,"diffDays"],[251,20,239,18],[251,23,239,21,"Math"],[251,27,239,25],[251,28,239,26,"floor"],[251,33,239,31],[251,34,239,32,"diffTime"],[251,42,239,40],[251,53,239,64],[251,54,239,65],[252,8,241,4],[252,12,241,8,"newStreak"],[252,21,241,17],[253,8,242,4],[253,12,242,8,"newLongestStreak"],[253,28,242,24],[254,8,244,4],[254,12,244,8,"diffDays"],[254,20,244,16],[254,25,244,21],[254,26,244,22],[254,28,244,24],[255,10,245,6],[256,10,246,6,"newStreak"],[256,19,246,15],[256,22,246,18,"state"],[256,27,246,23],[256,28,246,24,"currentStreak"],[256,41,246,37],[256,44,246,40],[256,45,246,41],[257,10,247,6,"newLongestStreak"],[257,26,247,22],[257,29,247,25,"Math"],[257,33,247,29],[257,34,247,30,"max"],[257,37,247,33],[257,38,247,34,"newStreak"],[257,47,247,43],[257,49,247,45,"state"],[257,54,247,50],[257,55,247,51,"longestStreak"],[257,68,247,64],[257,69,247,65],[258,8,248,4],[258,9,248,5],[258,15,248,11],[258,19,248,15,"diffDays"],[258,27,248,23],[258,30,248,26],[258,31,248,27],[258,33,248,29],[259,10,249,6],[260,10,250,6,"newStreak"],[260,19,250,15],[260,22,250,18],[260,23,250,19],[261,10,251,6,"newLongestStreak"],[261,26,251,22],[261,29,251,25,"state"],[261,34,251,30],[261,35,251,31,"longestStreak"],[261,48,251,44],[261,49,251,45],[261,50,251,46],[262,8,252,4],[262,9,252,5],[262,15,252,11],[263,10,253,6],[264,10,254,6],[265,8,255,4],[266,8,257,4],[266,12,257,10,"updatedState"],[266,24,257,22],[266,27,257,25],[267,10,258,6,"currentStreak"],[267,23,258,19],[267,25,258,21,"newStreak"],[267,34,258,30],[268,10,259,6,"longestStreak"],[268,23,259,19],[268,25,259,21,"newLongestStreak"],[268,41,259,37],[269,10,260,6,"lastActiveDate"],[269,24,260,20],[269,26,260,22,"today"],[269,31,260,27],[269,32,260,28,"toISOString"],[269,43,260,39],[269,44,260,40],[270,8,261,4],[270,9,261,5],[271,8,263,4,"set"],[271,11,263,7],[271,12,263,8,"updatedState"],[271,24,263,20],[271,25,263,21],[273,8,265,4],[274,8,266,4],[274,14,266,11,"get"],[274,17,266,14],[274,18,266,15],[274,19,266,16],[274,20,266,25,"persistData"],[274,31,266,36],[274,32,266,37,"updatedState"],[274,44,266,49],[274,45,266,50],[276,8,268,4],[277,8,269,4],[277,12,269,8,"newStreak"],[277,21,269,17],[277,26,269,22],[277,27,269,23],[277,29,269,25],[278,10,270,6],[278,16,270,12,"get"],[278,19,270,15],[278,20,270,16],[278,21,270,17],[278,22,270,18,"addBadge"],[278,30,270,26],[278,31,270,27,"AVAILABLE_BADGES"],[278,47,270,43],[278,48,270,44,"WEEK_WARRIOR"],[278,60,270,56],[278,61,270,57],[279,8,271,4],[279,9,271,5],[279,15,271,11],[279,19,271,15,"newStreak"],[279,28,271,24],[279,33,271,29],[279,35,271,31],[279,37,271,33],[280,10,272,6],[280,16,272,12,"get"],[280,19,272,15],[280,20,272,16],[280,21,272,17],[280,22,272,18,"addBadge"],[280,30,272,26],[280,31,272,27,"AVAILABLE_BADGES"],[280,47,272,43],[280,48,272,44,"MONTH_MASTER"],[280,60,272,56],[280,61,272,57],[281,8,273,4],[281,9,273,5],[281,15,273,11],[281,19,273,15,"newStreak"],[281,28,273,24],[281,33,273,29],[281,35,273,31],[281,37,273,33],[282,10,274,6],[282,16,274,12,"get"],[282,19,274,15],[282,20,274,16],[282,21,274,17],[282,22,274,18,"addBadge"],[282,30,274,26],[282,31,274,27,"AVAILABLE_BADGES"],[282,47,274,43],[282,48,274,44,"STREAK_LEGEND"],[282,61,274,57],[282,62,274,58],[283,8,275,4],[284,6,276,2],[284,7,276,3],[285,6,276,3],[285,22,206,2,"updateStreak"],[285,34,206,14,"updateStreak"],[285,35,206,14],[286,8,206,14],[286,15,206,14,"_ref5"],[286,20,206,14],[286,21,206,14,"apply"],[286,26,206,14],[286,33,206,14,"arguments"],[286,42,206,14],[287,6,206,14],[288,4,206,14],[288,7,276,3],[289,4,278,2],[290,4,279,2,"breakStreak"],[290,15,279,13],[291,6,279,13],[291,10,279,13,"_ref6"],[291,15,279,13],[291,22,279,13,"_asyncToGenerator"],[291,39,279,13],[291,40,279,13,"default"],[291,47,279,13],[291,49,279,15],[291,62,279,27],[292,8,280,4],[292,12,280,10,"updatedState"],[292,24,280,22],[292,27,280,25],[293,10,281,6,"currentStreak"],[293,23,281,19],[293,25,281,21],[294,8,282,4],[294,9,282,5],[295,8,284,4,"set"],[295,11,284,7],[295,12,284,8,"updatedState"],[295,24,284,20],[295,25,284,21],[296,8,285,4],[296,14,285,11,"get"],[296,17,285,14],[296,18,285,15],[296,19,285,16],[296,20,285,25,"persistData"],[296,31,285,36],[296,32,285,37,"updatedState"],[296,44,285,49],[296,45,285,50],[297,6,286,2],[297,7,286,3],[298,6,286,3],[298,22,279,2,"breakStreak"],[298,33,279,13,"breakStreak"],[298,34,279,13],[299,8,279,13],[299,15,279,13,"_ref6"],[299,20,279,13],[299,21,279,13,"apply"],[299,26,279,13],[299,33,279,13,"arguments"],[299,42,279,13],[300,6,279,13],[301,4,279,13],[301,7,286,3],[302,4,288,2],[303,4,289,2,"addBadge"],[303,12,289,10],[304,6,289,10],[304,10,289,10,"_ref7"],[304,15,289,10],[304,22,289,10,"_asyncToGenerator"],[304,39,289,10],[304,40,289,10,"default"],[304,47,289,10],[304,49,289,12],[304,60,289,19,"badge"],[304,65,289,32],[304,67,289,37],[305,8,290,4],[305,12,290,10,"state"],[305,17,290,15],[305,20,290,18,"get"],[305,23,290,21],[305,24,290,22],[305,25,290,23],[306,8,292,4],[306,12,292,8],[306,13,292,9,"state"],[306,18,292,14],[306,19,292,15,"badges"],[306,25,292,21],[306,26,292,22,"includes"],[306,34,292,30],[306,35,292,31,"badge"],[306,40,292,36],[306,41,292,37],[306,43,292,39],[307,10,293,6],[307,14,293,12,"updatedState"],[307,26,293,24],[307,29,293,27],[308,12,294,8,"badges"],[308,18,294,14],[308,20,294,16],[308,21,294,17],[308,24,294,20,"state"],[308,29,294,25],[308,30,294,26,"badges"],[308,36,294,32],[308,38,294,34,"badge"],[308,43,294,39],[309,10,295,6],[309,11,295,7],[310,10,297,6,"set"],[310,13,297,9],[310,14,297,10,"updatedState"],[310,26,297,22],[310,27,297,23],[311,10,298,6],[311,16,298,13,"get"],[311,19,298,16],[311,20,298,17],[311,21,298,18],[311,22,298,27,"persistData"],[311,33,298,38],[311,34,298,39,"updatedState"],[311,46,298,51],[311,47,298,52],[313,10,300,6],[314,10,301,6],[314,16,301,12],[314,20,301,12,"achievement"],[314,40,301,23],[314,41,301,23,"achievement"],[314,52,301,23],[314,54,301,24],[314,55,301,25],[315,8,302,4],[316,6,303,2],[316,7,303,3],[317,6,303,3],[317,22,289,2,"addBadge"],[317,30,289,10,"addBadge"],[317,31,289,10,"_x4"],[317,34,289,10],[318,8,289,10],[318,15,289,10,"_ref7"],[318,20,289,10],[318,21,289,10,"apply"],[318,26,289,10],[318,33,289,10,"arguments"],[318,42,289,10],[319,6,289,10],[320,4,289,10],[320,7,303,3],[321,4,305,2],[322,4,306,2,"resetProgress"],[322,17,306,15],[323,6,306,15],[323,10,306,15,"_ref8"],[323,15,306,15],[323,22,306,15,"_asyncToGenerator"],[323,39,306,15],[323,40,306,15,"default"],[323,47,306,15],[323,49,306,17],[323,62,306,29],[324,8,307,4],[324,12,307,10,"resetState"],[324,22,307,20],[324,25,307,23],[325,10,308,6,"totalPoints"],[325,21,308,17],[325,23,308,19],[325,24,308,20],[326,10,309,6,"currentLevel"],[326,22,309,18],[326,24,309,20],[326,25,309,21],[327,10,310,6,"currentStreak"],[327,23,310,19],[327,25,310,21],[327,26,310,22],[328,10,311,6,"longestStreak"],[328,23,311,19],[328,25,311,21],[328,26,311,22],[329,10,312,6,"tasksCompleted"],[329,24,312,20],[329,26,312,22],[329,27,312,23],[330,10,313,6,"badges"],[330,16,313,12],[330,18,313,14],[330,20,313,16],[331,10,314,6,"lastActiveDate"],[331,24,314,20],[331,26,314,22],[332,8,315,4],[332,9,315,5],[333,8,317,4,"set"],[333,11,317,7],[333,12,317,8,"resetState"],[333,22,317,18],[333,23,317,19],[335,8,319,4],[336,8,320,4],[336,12,320,8],[337,10,321,6],[337,16,321,12,"AsyncStorage"],[337,28,321,24],[337,29,321,24,"default"],[337,36,321,24],[337,37,321,25,"removeItem"],[337,47,321,35],[337,48,321,36,"STORAGE_KEY"],[337,59,321,47],[337,60,321,48],[338,8,322,4],[338,9,322,5],[338,10,322,6],[338,17,322,13,"error"],[338,22,322,18],[338,24,322,20],[339,10,323,6,"console"],[339,17,323,13],[339,18,323,14,"error"],[339,23,323,19],[339,24,323,20],[339,52,323,48],[339,54,323,50,"error"],[339,59,323,55],[339,60,323,56],[340,8,324,4],[341,6,325,2],[341,7,325,3],[342,6,325,3],[342,22,306,2,"resetProgress"],[342,35,306,15,"resetProgress"],[342,36,306,15],[343,8,306,15],[343,15,306,15,"_ref8"],[343,20,306,15],[343,21,306,15,"apply"],[343,26,306,15],[343,33,306,15,"arguments"],[343,42,306,15],[344,6,306,15],[345,4,306,15],[345,7,325,3],[346,4,327,2],[347,4,328,2,"getExperienceForNextLevel"],[347,29,328,27],[347,31,328,29,"getExperienceForNextLevel"],[347,32,328,29],[347,37,328,35],[348,6,329,4],[348,10,329,10,"state"],[348,15,329,15],[348,18,329,18,"get"],[348,21,329,21],[348,22,329,22],[348,23,329,23],[349,6,330,4],[349,10,330,8,"state"],[349,15,330,13],[349,16,330,14,"currentLevel"],[349,28,330,26],[349,32,330,30,"LEVEL_THRESHOLDS"],[349,48,330,46],[349,49,330,47,"length"],[349,55,330,53],[349,58,330,56],[349,59,330,57],[349,61,330,59],[350,8,331,6],[350,15,331,13],[350,16,331,14],[350,17,331,15],[350,18,331,16],[351,6,332,4],[352,6,333,4],[352,13,333,11,"LEVEL_THRESHOLDS"],[352,29,333,27],[352,30,333,28,"state"],[352,35,333,33],[352,36,333,34,"currentLevel"],[352,48,333,46],[352,49,333,47],[352,52,333,50,"state"],[352,57,333,55],[352,58,333,56,"totalPoints"],[352,69,333,67],[353,4,334,2],[353,5,334,3],[354,4,336,2,"getProgressPercentage"],[354,25,336,23],[354,27,336,25,"getProgressPercentage"],[354,28,336,25],[354,33,336,31],[355,6,337,4],[355,10,337,10,"state"],[355,15,337,15],[355,18,337,18,"get"],[355,21,337,21],[355,22,337,22],[355,23,337,23],[356,6,338,4],[356,10,338,8,"state"],[356,15,338,13],[356,16,338,14,"currentLevel"],[356,28,338,26],[356,32,338,30,"LEVEL_THRESHOLDS"],[356,48,338,46],[356,49,338,47,"length"],[356,55,338,53],[356,58,338,56],[356,59,338,57],[356,61,338,59],[357,8,339,6],[357,15,339,13],[357,18,339,16],[357,19,339,17],[357,20,339,18],[358,6,340,4],[359,6,342,4],[359,10,342,10,"currentLevelStart"],[359,27,342,27],[359,30,342,30,"LEVEL_THRESHOLDS"],[359,46,342,46],[359,47,342,47,"state"],[359,52,342,52],[359,53,342,53,"currentLevel"],[359,65,342,65],[359,68,342,68],[359,69,342,69],[359,70,342,70],[360,6,343,4],[360,10,343,10,"nextLevelStart"],[360,24,343,24],[360,27,343,27,"LEVEL_THRESHOLDS"],[360,43,343,43],[360,44,343,44,"state"],[360,49,343,49],[360,50,343,50,"currentLevel"],[360,62,343,62],[360,63,343,63],[361,6,344,4],[361,10,344,10,"currentProgress"],[361,25,344,25],[361,28,344,28,"state"],[361,33,344,33],[361,34,344,34,"totalPoints"],[361,45,344,45],[361,48,344,48,"currentLevelStart"],[361,65,344,65],[362,6,345,4],[362,10,345,10,"totalNeeded"],[362,21,345,21],[362,24,345,24,"nextLevelStart"],[362,38,345,38],[362,41,345,41,"currentLevelStart"],[362,58,345,58],[363,6,347,4],[363,13,347,11,"Math"],[363,17,347,15],[363,18,347,16,"floor"],[363,23,347,21],[363,24,347,23,"currentProgress"],[363,39,347,38],[363,42,347,41,"totalNeeded"],[363,53,347,52],[363,56,347,56],[363,59,347,59],[363,60,347,60],[364,4,348,2],[364,5,348,3],[365,4,350,2,"shouldLevelUp"],[365,17,350,15],[365,19,350,17,"shouldLevelUp"],[365,20,350,17],[365,25,350,23],[366,6,351,4],[366,10,351,10,"state"],[366,15,351,15],[366,18,351,18,"get"],[366,21,351,21],[366,22,351,22],[366,23,351,23],[367,6,352,4],[367,13,352,11,"state"],[367,18,352,16],[367,19,352,17,"currentLevel"],[367,31,352,29],[367,34,352,32,"LEVEL_THRESHOLDS"],[367,50,352,48],[367,51,352,49,"length"],[367,57,352,55],[367,60,352,58],[367,61,352,59],[367,65,353,11,"state"],[367,70,353,16],[367,71,353,17,"totalPoints"],[367,82,353,28],[367,86,353,32,"LEVEL_THRESHOLDS"],[367,102,353,48],[367,103,353,49,"state"],[367,108,353,54],[367,109,353,55,"currentLevel"],[367,121,353,67],[367,122,353,68],[368,4,354,2],[369,2,355,0],[369,3,355,1],[369,4,355,2],[369,5,355,3],[371,2,357,0],[372,2,358,0,"useGameStore"],[372,14,358,12],[372,15,358,13,"getState"],[372,23,358,21],[372,24,358,22],[372,25,358,23],[372,26,358,24,"loadPersistedData"],[372,43,358,41],[372,44,358,42],[372,45,358,43],[373,0,358,44],[373,3]],"functionMap":{"names":["<global>","calculateLevelUpPoints","generateLevelThresholds","create$argument_0","loadPersistedData","persistData","addExperience","completeTask","updateStreak","breakStreak","addBadge","resetProgress","getExperienceForNextLevel","getProgressPercentage","shouldLevelUp"],"mappings":"AAA;+BCiC;CDE;gCEG;CFM;uCGmB;qBCY;GD+B;eEG;GFiB;iBGG;GHyC;gBIG;GJ6B;gBKG;GLsE;eMG;GNO;YOG;GPc;iBQG;GRmB;6BSG;GTM;yBUE;GVY;iBWE;GXI;EHC"},"hasCjsExports":false},"type":"js/module"}]}