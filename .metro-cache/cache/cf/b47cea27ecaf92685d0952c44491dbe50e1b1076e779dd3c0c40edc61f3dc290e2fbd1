{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"expo-crypto","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":38,"index":38}}],"key":"+Akla+LrhuGGU54C9zXxLPlFUv4=","exportNames":["*"],"imports":1}},{"name":"invariant","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":39},"end":{"line":2,"column":34,"index":73}}],"key":"4HPAaDQ25ZwZ2dzTLatXuUucZUM=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  exports.generateRandom = generateRandom;\n  exports.deriveChallengeAsync = deriveChallengeAsync;\n  exports.buildCodeAsync = buildCodeAsync;\n  exports.generateHexStringAsync = generateHexStringAsync;\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _expoCrypto = require(_dependencyMap[1], \"expo-crypto\");\n  var Crypto = _interopNamespace(_expoCrypto);\n  var _invariant = require(_dependencyMap[2], \"invariant\");\n  var invariant = _interopDefault(_invariant);\n  var CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  function convertBufferToString(buffer) {\n    var state = [];\n    for (var i = 0; i < buffer.byteLength; i += 1) {\n      var index = buffer[i] % CHARSET.length;\n      state.push(CHARSET[index]);\n    }\n    return state.join('');\n  }\n  function convertToUrlSafeString(b64) {\n    return b64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n  }\n  function generateRandom(size) {\n    var buffer = Crypto.getRandomValues(new Uint8Array(size));\n    return convertBufferToString(buffer);\n  }\n  /**\n   * Proof key for Code Exchange by OAuth Public Clients (RFC 7636), Section 4.1\n   * [Section 4.1](https://tools.ietf.org/html/rfc7636#section-4.1)\n   */\n  function deriveChallengeAsync(_x) {\n    return _deriveChallengeAsync.apply(this, arguments);\n  }\n  function _deriveChallengeAsync() {\n    _deriveChallengeAsync = (0, _asyncToGenerator.default)(function* (code) {\n      // 43 is the minimum, and 128 is the maximum.\n      (0, invariant.default)(code.length > 42 && code.length < 129, 'Invalid code length for PKCE.');\n      var buffer = yield Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, code, {\n        encoding: Crypto.CryptoEncoding.BASE64\n      });\n      return convertToUrlSafeString(buffer);\n    });\n    return _deriveChallengeAsync.apply(this, arguments);\n  }\n  function buildCodeAsync() {\n    return _buildCodeAsync.apply(this, arguments);\n  }\n  /**\n   * Digest a random string with hex encoding, useful for creating `nonce`s.\n   */\n  function _buildCodeAsync() {\n    _buildCodeAsync = (0, _asyncToGenerator.default)(function* () {\n      var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n      // This method needs to be resolved like all other native methods.\n      var codeVerifier = generateRandom(size);\n      var codeChallenge = yield deriveChallengeAsync(codeVerifier);\n      return {\n        codeVerifier,\n        codeChallenge\n      };\n    });\n    return _buildCodeAsync.apply(this, arguments);\n  }\n  function generateHexStringAsync(_x2) {\n    return _generateHexStringAsync.apply(this, arguments);\n  }\n  function _generateHexStringAsync() {\n    _generateHexStringAsync = (0, _asyncToGenerator.default)(function* (size) {\n      var value = generateRandom(size);\n      var buffer = yield Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, value, {\n        encoding: Crypto.CryptoEncoding.HEX\n      });\n      return convertToUrlSafeString(buffer);\n    });\n    return _generateHexStringAsync.apply(this, arguments);\n  }\n});","lineCount":103,"map":[[27,2,15,0,"exports"],[27,9,15,0],[27,10,15,0,"generateRandom"],[27,24,15,0],[27,27,15,0,"generateRandom"],[27,41,15,0],[28,2,23,0,"exports"],[28,9,23,0],[28,10,23,0,"deriveChallengeAsync"],[28,30,23,0],[28,33,23,0,"deriveChallengeAsync"],[28,53,23,0],[29,2,31,0,"exports"],[29,9,31,0],[29,10,31,0,"buildCodeAsync"],[29,24,31,0],[29,27,31,0,"buildCodeAsync"],[29,41,31,0],[30,2,40,0,"exports"],[30,9,40,0],[30,10,40,0,"generateHexStringAsync"],[30,32,40,0],[30,35,40,0,"generateHexStringAsync"],[30,57,40,0],[31,2,46,1],[31,6,46,1,"_babelRuntimeHelpersAsyncToGenerator"],[31,42,46,1],[31,45,46,1,"require"],[31,52,46,1],[31,53,46,1,"_dependencyMap"],[31,67,46,1],[32,2,46,1],[32,6,46,1,"_asyncToGenerator"],[32,23,46,1],[32,26,46,1,"_interopDefault"],[32,41,46,1],[32,42,46,1,"_babelRuntimeHelpersAsyncToGenerator"],[32,78,46,1],[33,2,1,0],[33,6,1,0,"_expoCrypto"],[33,17,1,0],[33,20,1,0,"require"],[33,27,1,0],[33,28,1,0,"_dependencyMap"],[33,42,1,0],[34,2,1,0],[34,6,1,0,"Crypto"],[34,12,1,0],[34,15,1,0,"_interopNamespace"],[34,32,1,0],[34,33,1,0,"_expoCrypto"],[34,44,1,0],[35,2,2,0],[35,6,2,0,"_invariant"],[35,16,2,0],[35,19,2,0,"require"],[35,26,2,0],[35,27,2,0,"_dependencyMap"],[35,41,2,0],[36,2,2,0],[36,6,2,0,"invariant"],[36,15,2,0],[36,18,2,0,"_interopDefault"],[36,33,2,0],[36,34,2,0,"_invariant"],[36,44,2,0],[37,2,3,0],[37,6,3,6,"CHARSET"],[37,13,3,13],[37,16,3,16],[37,80,3,80],[38,2,4,0],[38,11,4,9,"convertBufferToString"],[38,32,4,30,"convertBufferToString"],[38,33,4,31,"buffer"],[38,39,4,37],[38,41,4,39],[39,4,5,4],[39,8,5,10,"state"],[39,13,5,15],[39,16,5,18],[39,18,5,20],[40,4,6,4],[40,9,6,9],[40,13,6,13,"i"],[40,14,6,14],[40,17,6,17],[40,18,6,18],[40,20,6,20,"i"],[40,21,6,21],[40,24,6,24,"buffer"],[40,30,6,30],[40,31,6,31,"byteLength"],[40,41,6,41],[40,43,6,43,"i"],[40,44,6,44],[40,48,6,48],[40,49,6,49],[40,51,6,51],[41,6,7,8],[41,10,7,14,"index"],[41,15,7,19],[41,18,7,22,"buffer"],[41,24,7,28],[41,25,7,29,"i"],[41,26,7,30],[41,27,7,31],[41,30,7,34,"CHARSET"],[41,37,7,41],[41,38,7,42,"length"],[41,44,7,48],[42,6,8,8,"state"],[42,11,8,13],[42,12,8,14,"push"],[42,16,8,18],[42,17,8,19,"CHARSET"],[42,24,8,26],[42,25,8,27,"index"],[42,30,8,32],[42,31,8,33],[42,32,8,34],[43,4,9,4],[44,4,10,4],[44,11,10,11,"state"],[44,16,10,16],[44,17,10,17,"join"],[44,21,10,21],[44,22,10,22],[44,24,10,24],[44,25,10,25],[45,2,11,0],[46,2,12,0],[46,11,12,9,"convertToUrlSafeString"],[46,33,12,31,"convertToUrlSafeString"],[46,34,12,32,"b64"],[46,37,12,35],[46,39,12,37],[47,4,13,4],[47,11,13,11,"b64"],[47,14,13,14],[47,15,13,15,"replace"],[47,22,13,22],[47,23,13,23],[47,28,13,28],[47,30,13,30],[47,33,13,33],[47,34,13,34],[47,35,13,35,"replace"],[47,42,13,42],[47,43,13,43],[47,48,13,48],[47,50,13,50],[47,53,13,53],[47,54,13,54],[47,55,13,55,"replace"],[47,62,13,62],[47,63,13,63],[47,67,13,67],[47,69,13,69],[47,71,13,71],[47,72,13,72],[48,2,14,0],[49,2,15,7],[49,11,15,16,"generateRandom"],[49,25,15,30,"generateRandom"],[49,26,15,31,"size"],[49,30,15,35],[49,32,15,37],[50,4,16,4],[50,8,16,10,"buffer"],[50,14,16,16],[50,17,16,19,"Crypto"],[50,23,16,25],[50,24,16,26,"getRandomValues"],[50,39,16,41],[50,40,16,42],[50,44,16,46,"Uint8Array"],[50,54,16,56],[50,55,16,57,"size"],[50,59,16,61],[50,60,16,62],[50,61,16,63],[51,4,17,4],[51,11,17,11,"convertBufferToString"],[51,32,17,32],[51,33,17,33,"buffer"],[51,39,17,39],[51,40,17,40],[52,2,18,0],[53,2,19,0],[54,0,20,0],[55,0,21,0],[56,0,22,0],[57,2,19,0],[57,11,23,22,"deriveChallengeAsync"],[57,31,23,42,"deriveChallengeAsync"],[57,32,23,42,"_x"],[57,34,23,42],[58,4,23,42],[58,11,23,42,"_deriveChallengeAsync"],[58,32,23,42],[58,33,23,42,"apply"],[58,38,23,42],[58,45,23,42,"arguments"],[58,54,23,42],[59,2,23,42],[60,2,23,42],[60,11,23,42,"_deriveChallengeAsync"],[60,33,23,42],[61,4,23,42,"_deriveChallengeAsync"],[61,25,23,42],[61,32,23,42,"_asyncToGenerator"],[61,49,23,42],[61,50,23,42,"default"],[61,57,23,42],[61,59,23,7],[61,70,23,43,"code"],[61,74,23,47],[61,76,23,49],[62,6,24,4],[63,6,25,4],[63,10,25,4,"invariant"],[63,19,25,13],[63,20,25,13,"default"],[63,27,25,13],[63,29,25,14,"code"],[63,33,25,18],[63,34,25,19,"length"],[63,40,25,25],[63,43,25,28],[63,45,25,30],[63,49,25,34,"code"],[63,53,25,38],[63,54,25,39,"length"],[63,60,25,45],[63,63,25,48],[63,66,25,51],[63,68,25,53],[63,99,25,84],[63,100,25,85],[64,6,26,4],[64,10,26,10,"buffer"],[64,16,26,16],[64,25,26,25,"Crypto"],[64,31,26,31],[64,32,26,32,"digestStringAsync"],[64,49,26,49],[64,50,26,50,"Crypto"],[64,56,26,56],[64,57,26,57,"CryptoDigestAlgorithm"],[64,78,26,78],[64,79,26,79,"SHA256"],[64,85,26,85],[64,87,26,87,"code"],[64,91,26,91],[64,93,26,93],[65,8,27,8,"encoding"],[65,16,27,16],[65,18,27,18,"Crypto"],[65,24,27,24],[65,25,27,25,"CryptoEncoding"],[65,39,27,39],[65,40,27,40,"BASE64"],[66,6,28,4],[66,7,28,5],[66,8,28,6],[67,6,29,4],[67,13,29,11,"convertToUrlSafeString"],[67,35,29,33],[67,36,29,34,"buffer"],[67,42,29,40],[67,43,29,41],[68,4,30,0],[68,5,30,1],[69,4,30,1],[69,11,30,1,"_deriveChallengeAsync"],[69,32,30,1],[69,33,30,1,"apply"],[69,38,30,1],[69,45,30,1,"arguments"],[69,54,30,1],[70,2,30,1],[71,2,30,1],[71,11,31,22,"buildCodeAsync"],[71,25,31,36,"buildCodeAsync"],[71,26,31,36],[72,4,31,36],[72,11,31,36,"_buildCodeAsync"],[72,26,31,36],[72,27,31,36,"apply"],[72,32,31,36],[72,39,31,36,"arguments"],[72,48,31,36],[73,2,31,36],[74,2,37,0],[75,0,38,0],[76,0,39,0],[77,2,37,0],[77,11,37,0,"_buildCodeAsync"],[77,27,37,0],[78,4,37,0,"_buildCodeAsync"],[78,19,37,0],[78,26,37,0,"_asyncToGenerator"],[78,43,37,0],[78,44,37,0,"default"],[78,51,37,0],[78,53,31,7],[78,66,31,49],[79,6,31,49],[79,10,31,37,"size"],[79,14,31,41],[79,17,31,41,"arguments"],[79,26,31,41],[79,27,31,41,"length"],[79,33,31,41],[79,41,31,41,"arguments"],[79,50,31,41],[79,58,31,41,"undefined"],[79,67,31,41],[79,70,31,41,"arguments"],[79,79,31,41],[79,85,31,44],[79,88,31,47],[80,6,32,4],[81,6,33,4],[81,10,33,10,"codeVerifier"],[81,22,33,22],[81,25,33,25,"generateRandom"],[81,39,33,39],[81,40,33,40,"size"],[81,44,33,44],[81,45,33,45],[82,6,34,4],[82,10,34,10,"codeChallenge"],[82,23,34,23],[82,32,34,32,"deriveChallengeAsync"],[82,52,34,52],[82,53,34,53,"codeVerifier"],[82,65,34,65],[82,66,34,66],[83,6,35,4],[83,13,35,11],[84,8,35,13,"codeVerifier"],[84,20,35,25],[85,8,35,27,"codeChallenge"],[86,6,35,41],[86,7,35,42],[87,4,36,0],[87,5,36,1],[88,4,36,1],[88,11,36,1,"_buildCodeAsync"],[88,26,36,1],[88,27,36,1,"apply"],[88,32,36,1],[88,39,36,1,"arguments"],[88,48,36,1],[89,2,36,1],[90,2,36,1],[90,11,40,22,"generateHexStringAsync"],[90,33,40,44,"generateHexStringAsync"],[90,34,40,44,"_x2"],[90,37,40,44],[91,4,40,44],[91,11,40,44,"_generateHexStringAsync"],[91,34,40,44],[91,35,40,44,"apply"],[91,40,40,44],[91,47,40,44,"arguments"],[91,56,40,44],[92,2,40,44],[93,2,40,44],[93,11,40,44,"_generateHexStringAsync"],[93,35,40,44],[94,4,40,44,"_generateHexStringAsync"],[94,27,40,44],[94,34,40,44,"_asyncToGenerator"],[94,51,40,44],[94,52,40,44,"default"],[94,59,40,44],[94,61,40,7],[94,72,40,45,"size"],[94,76,40,49],[94,78,40,51],[95,6,41,4],[95,10,41,10,"value"],[95,15,41,15],[95,18,41,18,"generateRandom"],[95,32,41,32],[95,33,41,33,"size"],[95,37,41,37],[95,38,41,38],[96,6,42,4],[96,10,42,10,"buffer"],[96,16,42,16],[96,25,42,25,"Crypto"],[96,31,42,31],[96,32,42,32,"digestStringAsync"],[96,49,42,49],[96,50,42,50,"Crypto"],[96,56,42,56],[96,57,42,57,"CryptoDigestAlgorithm"],[96,78,42,78],[96,79,42,79,"SHA256"],[96,85,42,85],[96,87,42,87,"value"],[96,92,42,92],[96,94,42,94],[97,8,43,8,"encoding"],[97,16,43,16],[97,18,43,18,"Crypto"],[97,24,43,24],[97,25,43,25,"CryptoEncoding"],[97,39,43,39],[97,40,43,40,"HEX"],[98,6,44,4],[98,7,44,5],[98,8,44,6],[99,6,45,4],[99,13,45,11,"convertToUrlSafeString"],[99,35,45,33],[99,36,45,34,"buffer"],[99,42,45,40],[99,43,45,41],[100,4,46,0],[100,5,46,1],[101,4,46,1],[101,11,46,1,"_generateHexStringAsync"],[101,34,46,1],[101,35,46,1,"apply"],[101,40,46,1],[101,47,46,1,"arguments"],[101,56,46,1],[102,2,46,1],[103,0,46,1],[103,3]],"functionMap":{"names":["<global>","convertBufferToString","convertToUrlSafeString","generateRandom","deriveChallengeAsync","buildCodeAsync","generateHexStringAsync"],"mappings":"AAA;ACG;CDO;AEC;CFE;OGC;CHG;OIK;CJO;OKC;CLK;OMI;CNM"},"hasCjsExports":false},"type":"js/module"}]}